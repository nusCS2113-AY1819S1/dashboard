[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:imagesDir: docs/images]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S1-F09-2/main[image:https://travis-ci.org/CS2113-AY1819S1-F09-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/se-edu/addressbook-level3?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level3\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/d4a0954383444a8db8cb26e5f5b7302c[Codacy Badge]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S1-F09-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S1-F09-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "image::homepage.png[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003c\u003cAboutUs#, *ABOUT US*\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "||"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003c\u003cUserGuide#,*USER GUIDE*\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "||"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003c\u003cDeveloperGuide#, *DEVELOPER GUIDE*\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "||"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003c\u003cContactUs#, *CONTACT US*\u003e\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003d\u003d Welcome to RMS Homepage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Restaurant Management System (RMS) promises to increase the quality of your service and enhance your work experience.  The Command Line Interface makes RMS highly efficient as it reduces the number of steps taken to perform a task to just one (or two).  It is your one-stop solution that can be used for serving customers, updating menu as well as storing and tracking important data. In a nutshell, RMS guarantees to be a faster, safer and smarter choice of management for any restaurants and fast food chains."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* This is a Desktop Application for Restaurant Management System. It is making use of Command Line Interface"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* Our primary target audience for RMS are *Restaurants* and *Fast Food Chains*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* RMS contains support for Build Automation using Gradle and for Continuous Integration using Travis CI, with coverage checks using Coveralls."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003d Who we are"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* Restaurant Management System was developed by CS2113-AY1819S1-F09-2 team. We are a team based in the School of Computing, National University of Singapore. For further information, visit \u003c\u003cAboutUs#, ABOUT US\u003e\u003e page."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* Restaurant Management System was developed based on the souce code of an"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "https://github.com/se-edu/addressbook-level4[Address Book] created by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "SE-EDU initiative."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* Some parts of this sample application was inspired by the excellent"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by Marco Jakob"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 4,
      "-": 16,
      "SalsabilTasnia": 18
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Restaurant Management System was developed by the https://github.com/CS2113-AY1819S1-F09-2/main[CS2113-AY1819S1-F09-2] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d\u003d Tay Kang Ming"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "image::kangmingtay.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "{empty} [https://github.com/kangmingtay[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Role: Team Leader +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Responsibilities: Responsible for overall project coordination."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d\u003d Salsabil Tasnia Ali Nikita MD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::salsabiltasnia.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "{empty}[https://github.com/SalsabilTasnia[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Role: Developer, Documentation Lead +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Responsibilities: Responsible for the menu feature."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d\u003d Pham Quang Minh"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "image::px1099.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "{empty}[https://github.com/px1099[github]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Responsibilities: Responsible for maintaining the code quality \u0026 testing. + Order Feature"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d\u003d Ang Wei Ming"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image::angwm.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "{empty}[https://github.com/AngWM[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Responsibilities: In charge of the Statistics feature"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d\u003d Lim Kian Hong"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "image::kianhong95.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "{empty}[https://github.com/kianhong95[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Responsibilities: In charge of Employee Feature"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 52,
      "px1099": 3,
      "-": 2
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003dContact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level3/issues[issue tracker]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "SalsabilTasnia": 5
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d Restaurant Management System (RMS) - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-F09-2/main.git"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "By: `CS2113-AY1819S1-F09-2`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Food Management System is to help provide restaurants"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " with a more efficient way to manage their restaurants."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "  It has various amount of features that can improve"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "   productivity of the different staff members in the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    restaurant."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Jump to the \u003c\u003cQuick Start\u003e\u003e to get started."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*[Coming Soon]*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*How It Works*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "When the application is first started, users have to choose"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " which state it wants to enter. There are 5 choices to pick from"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " :"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "1. Menu"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "2. Order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "3. Customers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "4. Employees"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "5. Statistics"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Menu"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d View Menu"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "View all items inside the menu +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: view"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* List the current food items in the menu"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Find Menu"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Finds the food item(s) related to the keywords typed in by the user. +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: find KEYWORD [MORE KEYWORDS]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* A list of menu items with names related to the keyword(s) will be displayed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* The command is case insensitive."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Order of keywords do not matter."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "find Burger COKE fries +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Returns Double Cheese Burger, Veggie Burger, Coke, Coke Zero, Fries, Curly Fries"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Update Menu"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Shows options that you can use to update the menu. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: update"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Update Menu will show user what he/ she can do to update menu."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Menu is updated by adding, editing or deleting food items from menu list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Add Item"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Add a new item to the menu and sorts the menu. +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: add NAME p/PRICE [t/TAG]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Adds the new food item into the menu list"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "add Cheese Fries p/3.50 t/New item +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "System adds Cheese Fries to the existing menu."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Item"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Edit an item on the menu +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: edit INDEX [n/NAME] [p/PRICE] [t/TAG]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Edits the name, price and tag of food item in that particular index (User able to edit either one or all three attributes of the particular food item)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "edit 3 Cheese Fries with bacon p/5.00 t/Limited Offer +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "System updates Cheese Fries, which is in index 3, to Cheese Fries with bacon and changes the price from $3.50 to $5.00"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Item"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Delete an item on the menu +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: delete INDEX"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Deletes the food item in that particular index"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "view menu +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "delete 1 +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "System deletes food item in index 1 from the menu. +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "find Cheese Fries +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Delete 3 +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "System deletes Cheese Fries in index 3 from the menu."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Order"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d\u003d\u003d List Orders"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Shows a list of all the current orders. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "px1099"
        },
        "content": "Each order include details of: customer, ordered time, total price and the list of dish items and quantities ordered +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "px1099"
        },
        "content": "Only the non-private data of customer will be showed. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "px1099"
        },
        "content": "Format: `listorder`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d View Order"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "px1099"
        },
        "content": "(To be implemented) +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Shows the details of a specified order. +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: view INDEX"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Edit the order at a specific index"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Add Order"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "px1099"
        },
        "content": "(To be implemented) +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Adds a new order to the list of current orders and display the list. +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "px1099"
        },
        "content": "Format: add ORDERFORMAT"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Update Order"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "px1099"
        },
        "content": "(To be implemented) +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Shows options that you can use to update orders. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: update"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Shows the list of commands the user can use (add, edit, delete)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Order"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "px1099"
        },
        "content": "(To be implemented) +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Edit details of an order. +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: edit INDEX"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Edit the order at a specific index"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Order"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Delete an order. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "px1099"
        },
        "content": "The deleted order is specified by the index of that order on the last displayed order list. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "px1099"
        },
        "content": "Format: `deleteorder INDEX`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d\u003d\u003d Clear Order"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "px1099"
        },
        "content": "Clear the entire order list. +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "px1099"
        },
        "content": "Format: `clearorder`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Find Order"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "px1099"
        },
        "content": "(To be implemented) +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Find an order by certain parameters. +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: find KEYWORD [MORE_KEYWORDS]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* The search is case-insensitive"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* The order of keywords do not matter"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Only the name of the order will be searched"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Members"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Add Member"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Add a new member to the RMS +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: add NAME p/PHONE_NUMBER e/EMAIL_ADDRESS d/DATE_JOINED"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Member"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Edit membership details of a member in the RMS +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: edit NAME [p/PHONE_NUMBER] [e/EMAIL_ADDRESS][d/DATE_JOINED][pt/POINTS]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Delete Member"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Delete membership details of a member in the RMS +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: delete NAME"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Find Member"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Find membership details of a member in the RMS +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: find NAME"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Employees"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d View Employees"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Show a list of all the employees on the RMS. +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: view"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Add Employee"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Adds a new employee to the RMS. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: add n/NAME p/PHONE_NUMBER pos/POSITION"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "add n/Joe Bob p/91234567 pos/Chef"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Employee"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Edit details of an employee. +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: edit NAME [p/PHONE_NUMBER] [pos/POSITION]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Edits the person with the given NAME."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Parameters in square brackets are optional."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* At least one of the optional parameters must be provided."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "edit Joe Bob pos/Cashier +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Edits the value of Joe Bob to Cashier"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Delete Employee"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Delete and employee. +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: delete NAME"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "delete Joe Bob +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Deletes Joe Bob."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Calculate Wages"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Calculates the wage of an employee. +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format calcwage NAME"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "calcwage Joe Bob"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Statistics"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d View Order Statistics"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Display the order statistics overview +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: vieworderstats"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d View Member Statistics"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Display the member statistics overview +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: viewmemberstats"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Restaurant Management System folder."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Menu"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*View Menu* : `view`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Find Menu* : `find KEYWORD [MORE KEYWORDS]`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Update Menu* : `update`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Add Item* : `add NAME p/PRICE [t/TAG]`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Edit Item* : `edit INDEX [n/NAME] [p/PRICE] [t/TAG]`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Delete Item* : `delete INDEX`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Order"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "px1099"
        },
        "content": "*List All Order* : `listorder`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*View Order* : `view INDEX`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Add Order* : `add ORDERNAME`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Update Order* : `update`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Edit Order* : `edit INDEX`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "px1099"
        },
        "content": "*Delete Order* : `deleteorder INDEX`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "px1099"
        },
        "content": "*Clear Order* : `clearorder`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Find Order* : `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Employees"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*View Employees* : `add n/NAME p/PHONE_NUMBER pos/POSITION`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Add Employee* : `add n/NAME p/PHONE_NUMBER pos/POSITION`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Edit Employee* : `edit NAME [p/PHONE_NUMBER] [pos/POSITION]`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Delete Employee* : `delete NAME`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Calculate Wages* : `calcwage NAME`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Members"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Add Member* : `add NAME p/PHONE_NUMBER e/EMAIL_ADDRESS d/DATE_JOINED`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Edit Member* : `edit NAME [p/PHONE_NUMBER] [e/EMAIL_ADDRESS][d/DATE_JOINED][pt/POINTS]`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Delete Member* : `delete NAME`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Find Member* : `find NAME`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Statistics"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*View Order Statistics* : `vieworderstats`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*View Member Statistics* : `viewmemberstats`"
      }
    ],
    "authorContributionMap": {
      "px1099": 27,
      "kianhong95": 266,
      "-": 56
    }
  },
  {
    "path": "src/seedu/addressbook/Main.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.ui.Gui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.ui.Stoppable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Main entry point to the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application implements Stoppable{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Version info of the program. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String VERSION \u003d \"Restaurant Management System - Version 1.0\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Gui gui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) throws Exception{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        gui \u003d new Gui(new Logic(), VERSION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        gui.start(primaryStage, this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super.stop();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "SalsabilTasnia": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.Rms;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.ui.Gui.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //protected List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": "    protected Rms rms;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    protected List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    protected List\u003c? extends ReadOnlyMenus\u003e relevantMenus;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    protected List\u003c? extends ReadOnlyMember\u003e relevantMembers;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": "    protected List\u003c? extends ReadOnlyOrder\u003e relevantOrders;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected List\u003c? extends ReadOnlyEmployee\u003e relevantEmployees;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private int targetIndex \u003d -1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param targetIndex last visible listing index of the target person"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command(int targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setTargetIndex(targetIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of persons."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param personsDisplayed used to generate summary"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return summary message for persons displayed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getMessageForPersonListShownSummary(List\u003c? extends ReadOnlyPerson\u003e personsDisplayed) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, personsDisplayed.size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of employees."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param employeesDisplayed used to generate summary"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @return summary message for employees displayed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static String getMessageForEmployeeListShownSummary(List\u003c? extends ReadOnlyEmployee\u003e employeesDisplayed) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return String.format(Messages.MESSAGE_EMPLOYEES_LISTED_OVERVIEW, employeesDisplayed.size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of menu."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @param menusDisplayed used to generate summary"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @return summary message for menus displayed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static String getMessageForMenuListShownSummary(List\u003c? extends ReadOnlyMenus\u003e menusDisplayed) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return String.format(Messages.MESSAGE_MENUS_LISTED_OVERVIEW, menusDisplayed.size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of members."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @param membersDisplayed used to generate summary"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @return summary message for members displayed"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static String getMessageForMemberListShownSummary(List\u003c? extends ReadOnlyMember\u003e membersDisplayed) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return String.format(Messages.MESSAGE_MEMBERS_LISTED_OVERVIEW, membersDisplayed.size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of orders."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @param ordersDisplayed used to generate summary"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @return summary message for orders displayed"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static String getMessageForOrderListShownSummary(List\u003c? extends ReadOnlyOrder\u003e ordersDisplayed) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return String.format(Messages.MESSAGE_ORDERS_LISTED_OVERVIEW, ordersDisplayed.size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //Note: it is better to make the execute() method abstract, by replacing the above method with the line below:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //public abstract CommandResult execute();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Supplies the data the command will operate on."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void setData(Rms rms,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "px1099"
        },
        "content": "                        List\u003c? extends ReadOnlyPerson\u003e relevantPersons,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "px1099"
        },
        "content": "                        List\u003c? extends ReadOnlyMenus\u003e relevantMenus,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "px1099"
        },
        "content": "                        List\u003c? extends ReadOnlyOrder\u003e relevantOrders,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                        List\u003c? extends ReadOnlyMember\u003e relevantMembers,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                        List\u003c? extends ReadOnlyEmployee\u003e relevantEmployees) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.rms \u003d rms;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.relevantMenus \u003d relevantMenus;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.relevantOrders \u003d relevantOrders;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantMembers \u003d relevantMembers;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.relevantEmployees \u003d relevantEmployees;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the the target person in the last shown list from the given arguments."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    protected ReadOnlyPerson getTargetPerson() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return relevantPersons.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Extracts the the target menu item in the last shown menu list from the given arguments."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    protected ReadOnlyMenus getTargetMenu() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return relevantMenus.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Extracts the the target member in the last shown list from the given arguments."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    protected ReadOnlyMember getTargetMember() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return relevantMembers.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Extracts the the target order in the last shown order list from the given arguments."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "px1099"
        },
        "content": "    protected ReadOnlyOrder getTargetOrder() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return relevantOrders.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Extracts the the target order in the last shown employee list from the given arguments."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected ReadOnlyEmployee getTargetEmployee() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return relevantEmployees.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getTargetIndex() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTargetIndex(int targetIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 21,
      "px1099": 39,
      "kianhong95": 20,
      "-": 75,
      "SalsabilTasnia": 14
    }
  },
  {
    "path": "src/seedu/addressbook/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The feedback message to be shown to the user. Contains a description of the execution result */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The list of persons that was produced by the command */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /** The list of persons that was produced by the command */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final List\u003c? extends ReadOnlyEmployee\u003e relevantEmployees;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** The menu list produced by the menu command*/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final List\u003c? extends ReadOnlyMenus\u003e relevantMenus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /** The list of members that was produced by the command */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private final List\u003c? extends ReadOnlyMember\u003e relevantMembers;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** The list of orders that was produced by the order command */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private final List\u003c? extends ReadOnlyOrder\u003e relevantOrders;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** Old AB3 command result constructor for result which do not return person list*/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        relevantPersons \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        relevantMenus \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "        relevantOrders \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        relevantMembers \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        relevantEmployees \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** Old AB3 command result constructor for result which return person list*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, List\u003c? extends ReadOnlyPerson\u003e relevantPersons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.relevantMenus \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.relevantOrders \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.relevantMembers \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.relevantEmployees \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** Command result constructor used by child classes for Rms commands*/"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public CommandResult(String feedbackToUser,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "px1099"
        },
        "content": "                         List\u003c? extends ReadOnlyPerson\u003e relevantPersons,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "px1099"
        },
        "content": "                         List\u003c? extends ReadOnlyMenus\u003e relevantMenus,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "px1099"
        },
        "content": "                         List\u003c? extends ReadOnlyOrder\u003e relevantOrders,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                         List\u003c? extends ReadOnlyMember\u003e relevantMembers,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                         List\u003c? extends ReadOnlyEmployee\u003e relevantEmployees) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.relevantMenus \u003d relevantMenus;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.relevantOrders \u003d relevantOrders;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.relevantMembers \u003d relevantMembers;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.relevantEmployees \u003d relevantEmployees;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Returns list of persons relevant to the command result, if any."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e getRelevantPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.ofNullable(relevantPersons);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Returns list of menu items relevant to the command result, if any."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyMenus\u003e\u003e getRelevantMenus() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return Optional.ofNullable(relevantMenus);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AngWM"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Returns list of orders relevant to the command result, if any."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyOrder\u003e\u003e getRelevantOrders() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return Optional.ofNullable(relevantOrders);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Returns list of members relevant to the command result, if any."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyMember\u003e\u003e getRelevantMember() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return Optional.ofNullable(relevantMembers);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Returns list of employees relevant to the command result, if any."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyEmployee\u003e\u003e getRelevantEmployee() { return Optional.ofNullable(relevantEmployees);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 17,
      "px1099": 24,
      "AngWM": 1,
      "kianhong95": 15,
      "-": 40,
      "SalsabilTasnia": 7
    }
  },
  {
    "path": "src/seedu/addressbook/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.member.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.menu.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.order.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.employee.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" +\"Shows program usage instructions.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ALL_USAGES \u003d AddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + DeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + FindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ViewCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ViewAllCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"\\n\" + EmployeeListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"\\n\" + EmployeeAddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + MemberListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \"\\n\" + MemberAddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + MenuAddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"\\n\" + MenuDeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"\\n\" + MenuFindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + MenuListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + MenuViewAllCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + OrderDeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + OrderClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + OrderListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ExitCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 1,
      "px1099": 14,
      "kianhong95": 6,
      "-": 29,
      "SalsabilTasnia": 2
    }
  },
  {
    "path": "src/seedu/addressbook/commands/employee/EmployeeAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeePhone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeePosition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Employee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueEmployeeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Adds a new employee."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeeAddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addemp\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds an employee to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Parameters: NAME p/PHONE e/EMAIL a/ADDRESS pos/POSITION\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \" Peter Lee p/91234567 e/PeterLee89@rms.com a/Clementi Ave 2, Blk 543 #13-12 pos/Cashier\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New employee added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EMPLOYEE \u003d \"This employee already exists in the Rms\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final Employee toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeAddCommand(String name,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                      String phone,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                      String email,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                      String address,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                              String position) throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.toAdd \u003d new Employee("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new EmployeeName(name),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new EmployeePhone(phone),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new EmployeeEmail(email),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new EmployeeAddress(address),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new EmployeePosition(position)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeAddCommand(Employee toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public ReadOnlyEmployee getEmployee() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            rms.addEmployee(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } catch (UniqueEmployeeList.DuplicateEmployeeException dee) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 4,
      "kianhong95": 65
    }
  },
  {
    "path": "src/seedu/addressbook/commands/employee/EmployeeCommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents the result of an employee command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeeCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeCommandResult(String feedbackToUser, List\u003c? extends ReadOnlyEmployee\u003e relevantEmployees) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        super(feedbackToUser, null, null, null, null, relevantEmployees);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 16
    }
  },
  {
    "path": "src/seedu/addressbook/commands/employee/EmployeeDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueEmployeeList.EmployeeNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Deletes an employee identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeeDeleteCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delemp\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Deletes the employee identified by the index number used in the last employee listing.\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_DELETE_EMPLOYEE_SUCCESS \u003d \"Deleted Employee: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeDeleteCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            final ReadOnlyEmployee target \u003d getTargetEmployee();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            rms.removeEmployee(target);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, target));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } catch (EmployeeNotFoundException enfe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_EMPLOYEE_NOT_IN_RMS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 42
    }
  },
  {
    "path": "src/seedu/addressbook/commands/employee/EmployeeListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * List all employees."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmployeeListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listemp\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"List all employees. \\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Parameters: NIL\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cReadOnlyEmployee\u003e allEmployees \u003d rms.getAllEmployees().immutableListView();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new EmployeeCommandResult(getMessageForEmployeeListShownSummary(allEmployees), allEmployees);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 4,
      "kianhong95": 19,
      "-": 2
    }
  },
  {
    "path": "src/seedu/addressbook/commands/member/MemberAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "package seedu.addressbook.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.Member;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.Points;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.UniqueMemberList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public class MemberAddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addmember\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a member to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \"Contact details can be marked private by prepending \u0027p\u0027 to the prefix.\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \"Parameters: NAME \\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \" John Doe \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New member added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEMBER \u003d \"This member already exists in the address book\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private final Member toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public MemberAddCommand(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.toAdd \u003d new Member("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                new Name(name),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                new Points()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public MemberAddCommand(Member toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public ReadOnlyMember getMember() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            rms.addMember(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        } catch (UniqueMemberList.DuplicateMemberException dpe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 64
    }
  },
  {
    "path": "src/seedu/addressbook/commands/member/MemberCommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * Represents the result of an order command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public class MemberCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public MemberCommandResult(String feedbackToUser, List\u003c? extends ReadOnlyMember\u003e relevantMembers) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        super(feedbackToUser, null, null, null, relevantMembers, null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 13,
      "px1099": 2,
      "kianhong95": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/member/MemberListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class MemberListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listmembers\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \"Displays all members in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyMember\u003e allMembers \u003d rms.getAllMembers().immutableListView();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return new MemberCommandResult(getMessageForMemberListShownSummary(allMembers), allMembers);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 17,
      "px1099": 3,
      "-": 2
    }
  },
  {
    "path": "src/seedu/addressbook/commands/menu/MenuAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Adds a menu item to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class MenuAddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addmenu\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a food item to the Rms. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Parameters: NAME p/PRICE   [t/TAG]...\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \" Cheese Burger p/5 t/newAddition t/hotSeller\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New food item added: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MENU_ITEM \u003d \"This food item already exists in the Rms\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final Menu toAddFoodItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuAddCommand(String name,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                          String price, /*boolean isPricePrivate,*/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                          Set\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.toAddFoodItem \u003d new Menu("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                new MenuName(name),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                new Price(price),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                tagSet"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuAddCommand(Menu toAddFoodItem) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.toAddFoodItem \u003d toAddFoodItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public ReadOnlyMenus getMenu() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return toAddFoodItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            rms.addMenu(toAddFoodItem);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new MenuCommandResult(String.format(MESSAGE_SUCCESS, toAddFoodItem));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (UniqueMenuList.DuplicateMenuException dpe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MENU_ITEM);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 5,
      "SalsabilTasnia": 61
    }
  },
  {
    "path": "src/seedu/addressbook/commands/menu/MenuCommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class MenuCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /** The feedback message to be shown to the user. Contains a description of the execution result */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //public final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /*public MenuCommandResult(String feedbackToUser, List\u003c? extends ReadOnlyMenus\u003e relevantMenus) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.relevantMenus \u003d relevantMenus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Returns list of menu items relevant to the command command result_menu, if any."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public MenuCommandResult(String feedbackToUser, List\u003c? extends ReadOnlyMenus\u003e relevantMenus){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        super(feedbackToUser, null, relevantMenus, null, null, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 2,
      "kianhong95": 1,
      "-": 3,
      "SalsabilTasnia": 25
    }
  },
  {
    "path": "src/seedu/addressbook/commands/menu/MenuDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "package seedu.addressbook.commands.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.Menu;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.UniqueMenuList.MenuNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Deletes a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class MenuDeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletemenu\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Deletes the menu item identified by the index number used in the last menu listing.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_DELETE_MENU_ITEM_SUCCESS \u003d \"Deleted Menu Item: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuDeleteCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            final ReadOnlyMenus Menutarget \u003d getTargetMenu();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            rms.removeMenuItem(Menutarget);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_MENU_ITEM_SUCCESS, Menutarget));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_MENU_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (MenuNotFoundException pnfe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_MENU_ITEM_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SalsabilTasnia": 45
    }
  },
  {
    "path": "src/seedu/addressbook/commands/menu/MenuFindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "package seedu.addressbook.commands.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class MenuFindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findmenu\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Finds all menu items whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" coke cheese burger\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuFindCommand(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Returns copy of keywords in this command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final List\u003cReadOnlyMenus\u003e menusFound \u003d getMenuItemsWithNameContainingAnyKeyword(keywords);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new MenuCommandResult(getMessageForMenuListShownSummary(menusFound), menusFound);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Retrieve all persons in the address book whose names contain some of the specified keywords."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @param keywords for searching"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @return list of persons found"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private List\u003cReadOnlyMenus\u003e getMenuItemsWithNameContainingAnyKeyword(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final List\u003cReadOnlyMenus\u003e matchedMenuItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (ReadOnlyMenus menu : rms.getAllMenus()){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(menu.getName().getWordsInName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            if (!Collections.disjoint(wordsInName, keywords)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                matchedMenuItems.add(menu);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return matchedMenuItems;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SalsabilTasnia": 59
    }
  },
  {
    "path": "src/seedu/addressbook/commands/menu/MenuListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Lists all food items in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class MenuListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listmenu\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Displays all menu items in the Rms system as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyMenus\u003e allMenus \u003d rms.getAllMenus().immutableListView();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new MenuCommandResult(getMessageForMenuListShownSummary(allMenus), allMenus);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 5,
      "-": 6,
      "SalsabilTasnia": 15
    }
  },
  {
    "path": "src/seedu/addressbook/commands/menu/MenuViewAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Shows all details of the person identified using the last displayed index."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Private contact details are shown."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class MenuViewAllCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewallmenu\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows all details of the food items \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"identified by the index number in the last shown menu listing.\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_VIEW_MENU_ITEM_DETAILS \u003d \"Viewing menu: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public MenuViewAllCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            final ReadOnlyMenus target \u003d getTargetMenu();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!rms.containsMenus(target)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_MENU_ITEM_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEW_MENU_ITEM_DETAILS, target.getAsTextShowAll()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_MENU_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 3,
      "-": 4,
      "SalsabilTasnia": 35
    }
  },
  {
    "path": "src/seedu/addressbook/commands/order/OrderClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Clears the order list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class OrderClearCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearorder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clears order list permanently.\\n\\t\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Order list has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "        rms.clearOrderList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 22
    }
  },
  {
    "path": "src/seedu/addressbook/commands/order/OrderCommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Represents the result of an order command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class OrderCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public OrderCommandResult(String feedbackToUser, List\u003c? extends ReadOnlyOrder\u003e relevantOrders) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        super(feedbackToUser, null, null, relevantOrders, null, null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 15,
      "kianhong95": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/order/OrderDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.UniqueOrderList.OrderNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Deletes an order identified using it\u0027s last displayed index from the order list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class OrderDeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteorder\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Deletes the order identified by the index number used in the last order listing.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_DELETE_ORDER_SUCCESS \u003d \"Deleted Order: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public OrderDeleteCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final ReadOnlyOrder target \u003d getTargetOrder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "            rms.removeOrder(target);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_ORDER_SUCCESS, target));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } catch (OrderNotFoundException pnfe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_ORDER_NOT_IN_ORDER_LIST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 43
    }
  },
  {
    "path": "src/seedu/addressbook/commands/order/OrderListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Lists all orders in the order list to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class OrderListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listorder\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Displays all orders in the order list as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": "        List\u003cReadOnlyOrder\u003e allOrders \u003d rms.getAllOrders().immutableListView();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new OrderCommandResult(getMessageForOrderListShownSummary(allOrders), allOrders);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 26
    }
  },
  {
    "path": "src/seedu/addressbook/common/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_IN_ADDRESSBOOK \u003d \"Person could not be found in address book\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX \u003d \"The employee index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_EMPLOYEE_NOT_IN_RMS \u003d \"Employee could not be found in Rms\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_EMPLOYEES_LISTED_OVERVIEW \u003d \"%1$d employees listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_MEMBERS_LISTED_OVERVIEW \u003d \"%1$d members listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_INVALID_MENU_ITEM_DISPLAYED_INDEX \u003d \"The menu item index provided is invalid\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_MENU_ITEM_NOT_IN_ADDRESSBOOK \u003d \"Menu item could not be found in Rms\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_MENUS_LISTED_OVERVIEW \u003d \"%1$d food items listed!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER_DISPLAYED_INDEX \u003d \"The order index provided is invalid\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_ORDER_NOT_IN_ORDER_LIST \u003d \"Order could not be found in order list\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_ORDERS_LISTED_OVERVIEW \u003d \"%1$d orders listed!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_USING_ORDER_LIST_STORAGE_FILE \u003d \"Using order list storage file : %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE \u003d \"Launch command format: \" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \"java seedu.addressbook.Main [STORAGE_FILE_PATH]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Welcome to Restaurant Management System! \\n\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"- To access MENU, key in \u0027menu\\n\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"- To access ORDER, key in \u0027order\u0027\\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"- To access CUSTOMER DATABASE, key in \u0027customer\u0027\\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"- To access EMPLOYEE DATABASE, key in \u0027employee\u0027\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"- To access STATISITCS information, key in \u0027statisitics\u0027\\n\" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"- For further assistance, key in \u0027help\u0027\\n\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"----------------------------------------------------------\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USING_STORAGE_FILE \u003d \"Using storage file : %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 1,
      "px1099": 1,
      "kianhong95": 15,
      "-": 15,
      "SalsabilTasnia": 8
    }
  },
  {
    "path": "src/seedu/addressbook/data/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.Menu;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.UniqueMenuList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueEmployeeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.DuplicatePersonException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the entire address book. Contains the data of the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList allPersons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final UniqueEmployeeList allEmployees;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final UniqueMenuList allFoodItems;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook empty() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    // added allEmployees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        allEmployees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        allFoodItems \u003d new UniqueMenuList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an address book with the given data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons external changes to this will not affect this address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    // Construct address book with persons, employees and food items"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AngWM"
        },
        "content": "    public AddressBook(UniquePersonList persons, UniqueMenuList menus, UniqueEmployeeList employees) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allPersons \u003d new UniquePersonList(persons);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.allEmployees \u003d new UniqueEmployeeList(employees);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.allFoodItems \u003d new UniqueMenuList(menus);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person toAdd) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Adds a menu item to the address book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent food item already exists."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void addMenu(Menu toAddFoodItem) throws UniqueMenuList.DuplicateMenuException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        allFoodItems.add(toAddFoodItem);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if an equivalent person exists in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsPerson(ReadOnlyPerson key) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.contains(key);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Checks if an equivalent menu item exists in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public boolean containsMenus(ReadOnlyMenus key1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return allFoodItems.contains(key1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such Person could be found."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(ReadOnlyPerson toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.remove(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Removes the equivalent food item from the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws PersonNotFoundException if no such Person could be found."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void removeMenuItem(ReadOnlyMenus toRemove1) throws UniqueMenuList.MenuNotFoundException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        allFoodItems.remove(toRemove1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons from the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.clear();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Clears all menu items from the address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void clearmenu() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        allFoodItems.clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Defensively copied UniquePersonList of all persons in the address book at the time of the call."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList getAllPersons() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UniquePersonList(allPersons);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    // this is a copy of getAllPersons for employees"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public UniqueEmployeeList getAllEmployees() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new UniqueEmployeeList(allEmployees);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AngWM"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Defensively copied UniqueMenuList of all menu items in the address book at the time of the call."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public UniqueMenuList getAllMenus() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new UniqueMenuList(allFoodItems);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.allPersons.equals(((AddressBook) other).allPersons));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.hashCode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AngWM": 2,
      "kianhong95": 10,
      "-": 87,
      "SalsabilTasnia": 47
    }
  },
  {
    "path": "src/seedu/addressbook/data/Rms.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.member.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.member.UniqueMemberList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.member.UniqueMemberList.DuplicateMemberException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.member.UniqueMemberList.MemberNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.Menu;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.UniqueMenuList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.UniqueMenuList.DuplicateMenuException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.menu.UniqueMenuList.MenuNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.Order;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.order.UniqueOrderList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.order.UniqueOrderList.OrderNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Employee;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueEmployeeList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueEmployeeList.DuplicateEmployeeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueEmployeeList.EmployeeNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.DuplicatePersonException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the entire address book. Contains the data of the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class Rms {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList allPersons;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueEmployeeList allEmployees;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueMenuList allFoodItems;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueOrderList allOrders;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueMemberList allMembers;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static Rms empty() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new Rms();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // added allEmployees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Rms() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        allEmployees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        allFoodItems \u003d new UniqueMenuList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        allOrders \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        allMembers \u003d new UniqueMemberList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an address book with the given data."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons external changes to this will not affect this address book"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    // Construct address book with persons and employees"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Rms(UniquePersonList persons,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "px1099"
        },
        "content": "               UniqueMenuList menus,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "px1099"
        },
        "content": "               UniqueEmployeeList employees,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "px1099"
        },
        "content": "               UniqueOrderList orders,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "px1099"
        },
        "content": "               UniqueMemberList members) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allPersons \u003d new UniquePersonList(persons);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allEmployees \u003d new UniqueEmployeeList(employees);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allFoodItems \u003d new UniqueMenuList(menus);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allOrders \u003d new UniqueOrderList(orders);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allMembers \u003d new UniqueMemberList(members);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person toAdd) throws DuplicatePersonException { allPersons.add(toAdd); }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws DuplicateEmployeeException if an equivalent person already exists."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void addEmployee(Employee toAdd) throws DuplicateEmployeeException { allEmployees.add(toAdd); }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Adds a menu item to the menu list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addMenu(Menu toAdd) throws DuplicateMenuException { allFoodItems.add(toAdd); }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Adds an order to the order list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void addOrder(Order toAdd) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "px1099"
        },
        "content": "        allOrders.add(toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a member to the address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicateMemberException if an equivalent member already exists."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addMember(Member toAdd) throws DuplicateMemberException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        allMembers.add(toAdd);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if an equivalent person exists in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsPerson(ReadOnlyPerson key) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.contains(key);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Checks if an equivalent menu item exists in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsMenus(ReadOnlyMenus key) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return allFoodItems.contains(key);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Checks if an equivalent order exists in the order list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean containsOrder(ReadOnlyOrder key) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return allOrders.contains(key);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if an equivalent member exists in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsMember(ReadOnlyMember key) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return allMembers.contains(key);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Checks if an equivalent employee exists in the address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean containsEmployee(ReadOnlyEmployee key) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return allEmployees.contains(key);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such Person could be found."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(ReadOnlyPerson toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.remove(toRemove);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Removes the equivalent menu item from the menu."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws MenuNotFoundException if no such Order could be found."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void removeMenuItem(ReadOnlyMenus toRemove) throws MenuNotFoundException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        allFoodItems.remove(toRemove);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Removes the equivalent order from the order list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws OrderNotFoundException if no such Order could be found."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void removeOrder(ReadOnlyOrder toRemove) throws OrderNotFoundException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "px1099"
        },
        "content": "        allOrders.remove(toRemove);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent member from the address book."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws MemberNotFoundException if no such Member could be found."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeMember(ReadOnlyMember toRemove) throws MemberNotFoundException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        allMembers.remove(toRemove);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Removes the equivalent employee from the address book."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws EmployeeNotFoundException if no such Employee could be found."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void removeEmployee(ReadOnlyEmployee toRemove) throws EmployeeNotFoundException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        allEmployees.remove(toRemove);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons from the address book."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.clear();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Clears all menu items from the menu."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearMenu() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        allFoodItems.clear();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Clears all orders from the order list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void clearOrderList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "px1099"
        },
        "content": "        allOrders.clear();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all members from the address book."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void clearMembers() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        allMembers.clear();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Clears all employees from the Rms."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void clearEmployee() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        allEmployees.clear();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Defensively copied UniquePersonList of all persons in the address book at the time of the call."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList getAllPersons() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UniquePersonList(allPersons);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Defensively copied UniqueMemberList of all members in the member list at the time of the call."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueMemberList getAllMembers() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UniqueMemberList(allMembers);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Defensively copied UniqueEmployeeList of all employees in the employee list at the time of the call."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueEmployeeList getAllEmployees() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UniqueEmployeeList(allEmployees);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Defensively copied UniqueMenuList of all menu items in the menu at the time of the call."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueMenuList getAllMenus() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UniqueMenuList(allFoodItems);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Defensively copied UniqueOrderList of all orders in the employee list at the time of the call."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueOrderList getAllOrders() { return new UniqueOrderList(allOrders); }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "px1099"
        },
        "content": "                || (other instanceof Rms // instanceof handles nulls"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "px1099"
        },
        "content": "                \u0026\u0026 this.allPersons.equals(((Rms) other).allPersons));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.hashCode();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "px1099": 103,
      "kianhong95": 36,
      "-": 133
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/Employee.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents an Employee in the system."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class Employee implements ReadOnlyEmployee {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private EmployeeName name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private EmployeePhone phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private EmployeeEmail email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private EmployeeAddress address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private EmployeePosition position;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Employee(EmployeeName name,EmployeePhone phone, EmployeeEmail email, EmployeeAddress address, EmployeePosition position){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Employee(ReadOnlyEmployee source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(), source.getPosition());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeName getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeePhone getPhone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeEmail getEmail() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeAddress getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeePosition getPosition() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return position;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setName(EmployeeName name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setPhone(EmployeePhone phone){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setEmail(EmployeeEmail email) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setAddress(EmployeeAddress address){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setPosition(EmployeePosition position){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                || (other instanceof ReadOnlyEmployee // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyEmployee) other));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return Objects.hash(name, phone, email, address, position);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return getAsTextShowDetails();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 97
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/EmployeeAddress.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents an Employee\u0027s address in the Rms."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeeAddress {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String EXAMPLE \u003d \"Clementi Ave 2, Blk 543 #13-12\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d \"Employee addresses can be in any format\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \".+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Validates given address."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IllegalValueException if given address string is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeAddress(String address) throws IllegalValueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!isValidAddress(address)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.value \u003d address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Returns true if a given string is a valid Employee email."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                || (other instanceof EmployeeAddress // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 this.value.equals(((EmployeeAddress) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 52
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/EmployeeEmail.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents an Employee\u0027s email in the Rms."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeeEmail {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String EXAMPLE \u003d \"PeterLee89@rms.com\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            \"Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d \"[\\\\w\\\\.]+@[\\\\w\\\\.]+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Validates given email."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IllegalValueException if given email address string is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeEmail(String email) throws IllegalValueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        email \u003d email.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!isValidEmail(email)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new IllegalValueException(MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.value \u003d email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Checks if a given string is a valid employee email."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                || (other instanceof EmployeeEmail // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 this.value.equals(((EmployeeEmail) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 54
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/EmployeeName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents an Employee\u0027s name in the Rms."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeeName {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String EXAMPLE \u003d \"Peter Lee\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Employee names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IllegalValueException if given name string is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!isValidName(name)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.value \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Returns true if a given string is a valid employee name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return Arrays.asList(value.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                || (other instanceof EmployeeName // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 this.value.equals(((EmployeeName) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 65
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/EmployeePhone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents an Employee\u0027s phone number in the Rms."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeePhone {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String EXAMPLE \u003d \"91234567\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d \"Employee phone numbers should only contain numbers\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Validates given phone number."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IllegalValueException if given phone string is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeePhone(String phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        phone \u003d phone.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!isValidPhone(phone)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new IllegalValueException(MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Checks if a given string is a valid employee phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                || (other instanceof EmployeePhone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 this.value.equals(((EmployeePhone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 53
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/EmployeePosition.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents an Employee\u0027s position in the Rms."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPosition(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeePosition {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String EXAMPLE \u003d \"Cashier\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_POSITION_CONSTRAINTS \u003d \"Employee position should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String POSITION_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IllegalValueException if given name string is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeePosition(String value) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        value \u003d value.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!isValidPosition(value)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new IllegalValueException(MESSAGE_POSITION_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Returns true if a given string is a valid employee name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static boolean isValidPosition(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return test.matches(POSITION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return Arrays.asList(value.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                || (other instanceof EmployeePosition // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 this.value.equals(((EmployeePosition) other).value)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode() { return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 63
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/ReadOnlyEmployee.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * A read-only immutable interface for an Employee in the Rms."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public interface ReadOnlyEmployee {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    EmployeeName getName();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    EmployeePhone getPhone();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    EmployeeEmail getEmail();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    EmployeeAddress getAddress();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    EmployeePosition getPosition();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyEmployee other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 other.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 other.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 other.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 other.getPosition().equals(this.getPosition()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    // Deal with this after creating variable classes"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Formats the Employee as text, showing all details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Value of each attribute is trimmed to prevent whitespace errors during tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    default String getAsTextShowDetails() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        builder.append(getName().value.trim())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                .append(\" Phone: \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        builder.append(getPhone().value.trim())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                .append(\" Email: \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        builder.append(getEmail().value.trim())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                .append(\" Address: \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        builder.append(getAddress().value.trim())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                .append(\" Position: \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        builder.append(getPosition().value.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 50
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/UniqueEmployeeList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * A list of employees. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * @see Employee#equals(Object)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class UniqueEmployeeList implements Iterable\u003cEmployee\u003e{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static class DuplicateEmployeeException extends DuplicateDataException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        protected DuplicateEmployeeException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            super(\"Operation would result in duplicate employees\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Signals that an operation targeting a specified employee in the list would fail because"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * there is no such matching employee in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static class EmployeeNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final List\u003cEmployee\u003e employeeInternalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Constructs empty employee list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public UniqueEmployeeList(){}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Constructs an employee list with the given employees."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public UniqueEmployeeList(Employee... employees) throws DuplicateEmployeeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final List\u003cEmployee\u003e initialTags \u003d Arrays.asList(employees);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new DuplicateEmployeeException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        employeeInternalList.addAll(initialTags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param employees a collection of employees"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws DuplicateEmployeeException if the {@code employees} contains duplicate employees"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public UniqueEmployeeList(Collection\u003cEmployee\u003e employees) throws DuplicateEmployeeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!Utils.elementsAreUnique(employees)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new DuplicateEmployeeException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        employeeInternalList.addAll(employees);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public UniqueEmployeeList(UniqueEmployeeList source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        employeeInternalList.addAll(source.employeeInternalList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public List\u003cReadOnlyEmployee\u003e immutableListView() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return Collections.unmodifiableList(employeeInternalList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Checks if the list contains an equivalent employee as the given argument."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean contains(ReadOnlyEmployee toCheck) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return employeeInternalList.contains(toCheck);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Adds an employee to the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws UniqueEmployeeList.DuplicateEmployeeException if the employee to add is a duplicate of an existing employee in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void add(Employee toAdd) throws UniqueEmployeeList.DuplicateEmployeeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new UniqueEmployeeList.DuplicateEmployeeException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        employeeInternalList.add(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Removes the equivalent employee from the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws EmployeeNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void remove(ReadOnlyEmployee toRemove) throws EmployeeNotFoundException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final boolean employeeFoundAndDeleted \u003d employeeInternalList.remove(toRemove);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!employeeFoundAndDeleted) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new EmployeeNotFoundException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Clears all employees in list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        employeeInternalList.clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Iterator\u003cEmployee\u003e iterator() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return employeeInternalList.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                || (other instanceof UniqueEmployeeList // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 this.employeeInternalList.equals("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                ((UniqueEmployeeList) other).employeeInternalList));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return employeeInternalList.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 133
    }
  },
  {
    "path": "src/seedu/addressbook/data/member/Member.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "package seedu.addressbook.data.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.person.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public class Member implements ReadOnlyMember {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private Points points;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Member() {}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Member(Name name, Points points) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.points \u003d points;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Member(ReadOnlyMember source) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this(source.getName(), source.getPoints());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Points getPoints() { return points; }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    protected void setName(Name name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                || (other instanceof ReadOnlyMember // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyMember) other));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 53,
      "px1099": 1
    }
  },
  {
    "path": "src/seedu/addressbook/data/member/Points.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "package seedu.addressbook.data.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.awt.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public class Points {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private String points;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Points(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.points \u003d \"0\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.value \u003d this.points;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    };"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                || (other instanceof Points // instanceof handles nulls"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                \u0026\u0026 this.value.equals(((Points) other).value)); // state check"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    public boolean isPrivate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        return isPrivate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 34
    }
  },
  {
    "path": "src/seedu/addressbook/data/member/ReadOnlyMember.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "package seedu.addressbook.data.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.person.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * A read-only immutable interface for a Person in the addressbook."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public interface ReadOnlyMember {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    Points getPoints();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    Phone getPhone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    Email getEmail();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    Address getAddress();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * The returned {@code Set} is a deep copy of the internal {@code Set},"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * changes on the returned list will not affect the person\u0027s internal tags."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyMember other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName())); // state checks here onwards"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Formats the person as text, showing all contact details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final String detailIsPrivate \u003d \"(private) \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                .append(\" Points: \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        builder.append(getPoints());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//                .append(\" Phone: \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        if (getPhone().isPrivate()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(detailIsPrivate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        builder.append(getPhone())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//                .append(\" Email: \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        if (getEmail().isPrivate()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(detailIsPrivate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        builder.append(getEmail())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//                .append(\" Address: \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        if (getAddress().isPrivate()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(detailIsPrivate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        builder.append(getAddress())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//                .append(\" Tags: \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(tag);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Formats a person as text, showing only non-private contact details."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    default String getAsTextHidePrivate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        builder.append(\" Points: \").append(getPoints());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        if (!getPhone().isPrivate()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(\" Phone: \").append(getPhone());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        if (!getEmail().isPrivate()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(\" Email: \").append(getEmail());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        if (!getAddress().isPrivate()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(\" Address: \").append(getAddress());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(tag);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 87
    }
  },
  {
    "path": "src/seedu/addressbook/data/member/UniqueMemberList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "package seedu.addressbook.data.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.Member;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * A list of persons. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * @see Member#equals(Object)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public class UniqueMemberList implements Iterable\u003cMember\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static class DuplicateMemberException extends DuplicateDataException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        protected DuplicateMemberException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            super(\"Operation would result in duplicate members\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Signals that an operation targeting a specified member in the list would fail because"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * there is no such matching member in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static class MemberNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private final List\u003cMember\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Constructs empty person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public UniqueMemberList() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Constructs a person list with the given persons."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public UniqueMemberList(Member... members) throws DuplicateMemberException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final List\u003cMember\u003e initialTags \u003d Arrays.asList(members);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            throw new DuplicateMemberException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @param members a collection of persons"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @throws DuplicateMemberException if the {@code persons} contains duplicate persons"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public UniqueMemberList(Collection\u003cMember\u003e members) throws DuplicateMemberException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        if (!Utils.elementsAreUnique(members)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            throw new DuplicateMemberException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        internalList.addAll(members);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public UniqueMemberList(UniqueMemberList source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyMember}s."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public List\u003cReadOnlyMember\u003e immutableListView() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Checks if the list contains an equivalent member as the given argument."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public boolean contains(ReadOnlyMember toCheck) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Adds a member to the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @throws DuplicateMemberException if the member to add is a duplicate of an existing person in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void add(Member toAdd) throws DuplicateMemberException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            throw new DuplicateMemberException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Removes the equivalent member from the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @throws MemberNotFoundException if no such member could be found in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void remove(ReadOnlyMember toRemove) throws MemberNotFoundException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final boolean memberFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        if (!memberFoundAndDeleted) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            throw new MemberNotFoundException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Clears all members in list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Iterator\u003cMember\u003e iterator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                || (other instanceof UniqueMemberList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                \u0026\u0026 this.internalList.equals("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                        ((UniqueMemberList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 136
    }
  },
  {
    "path": "src/seedu/addressbook/data/menu/Menu.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.Price;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Represents a Menu in the Rms."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class Menu implements ReadOnlyMenus {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private MenuName name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private Price price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Menu(MenuName name, Price price, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Menu(ReadOnlyMenus source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this(source.getName(), source.getPrice(), source.getTags());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuName getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Replaces this menu item\u0027s tags with the tags in {@code replacement}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void setTags(Set\u003cTag\u003e replacement) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        tags.addAll(replacement);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                || (other instanceof ReadOnlyMenus // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyMenus) other));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return Objects.hash(name, price, tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//random comment"
      }
    ],
    "authorContributionMap": {
      "px1099": 1,
      "-": 3,
      "SalsabilTasnia": 76
    }
  },
  {
    "path": "src/seedu/addressbook/data/menu/MenuName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class MenuName {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String EXAMPLE \u003d \"Cheese Burger\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Menu Item names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given name string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidName(name)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.asList(fullName.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                || (other instanceof MenuName // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \u0026\u0026 this.fullName.equals(((MenuName) other).fullName)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "SalsabilTasnia": 6
    }
  },
  {
    "path": "src/seedu/addressbook/data/menu/Price.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Price of a particular menu item in the Restaurant Management System."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String EXAMPLE \u003d \"440\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d \"Price should be in SGD and in dollars and cents\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d+\";//\"^\\\\$\\\\d+([.][0-9]+)?$\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //private boolean isPrivate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Validates given phone number."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws IllegalValueException if given phone string is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Price(String price/*, boolean isPrivate*/) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        price \u003d price.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (!isValidPhone(price)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            throw new IllegalValueException(MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.value \u003d price;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Checks if a given string is a valid menu item price."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "SalsabilTasnia": 48
    }
  },
  {
    "path": "src/seedu/addressbook/data/menu/ReadOnlyMenus.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": " * A read-only immutable interface for a Menu Item in the Rms."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public interface ReadOnlyMenus {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    MenuName getName();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    Price getPrice();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * The returned {@code Set} is a deep copy of the internal {@code Set},"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * changes on the returned list will not affect the menu item\u0027s internal tags."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyMenus other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \u0026\u0026 other.getPrice().equals(this.getPrice()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Formats the food item as text, showing all relevant details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                .append(\" Price: \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        builder.append(getPrice())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Formats a menu item as text, showing only non-private contact details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    default String getAsTextHidePrivate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        builder.append(getName()).append(\" Price \").append(getPrice());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        /*if (!getPrice().isPrivate()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            builder.append(\" Price: \").append(getPrice());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 1,
      "-": 1,
      "SalsabilTasnia": 60
    }
  },
  {
    "path": "src/seedu/addressbook/data/menu/UniqueMenuList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * A list of menus. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * @see Menu#equals(Object)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class UniqueMenuList implements Iterable\u003cMenu\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static class DuplicateMenuException extends DuplicateDataException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        protected DuplicateMenuException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            super(\"Operation would result in duplicate menu items\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Signals that an operation targeting a specified menu item in the list would fail because"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * there is no such matching person in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static class MenuNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final List\u003cMenu\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Constructs empty menu list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public UniqueMenuList() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Constructs a menu list with the given menus."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public UniqueMenuList(Menu... menus) throws DuplicateMenuException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final List\u003cMenu\u003e initialTags \u003d Arrays.asList(menus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            throw new DuplicateMenuException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @param menus a collection of menus"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws DuplicateMenuException if the {@code menus} contains duplicate menus"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public UniqueMenuList(Collection\u003cMenu\u003e menus) throws DuplicateMenuException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (!Utils.elementsAreUnique(menus)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            throw new DuplicateMenuException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        internalList.addAll(menus);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public UniqueMenuList(UniqueMenuList source) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyMenus}s."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public List\u003cReadOnlyMenus\u003e immutableListView() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Checks if the list contains an equivalent menu item as the given argument."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public boolean contains(ReadOnlyMenus toCheck) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Adds a menu item to the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws DuplicateMenuException if the menu item to add is a duplicate of an existing menu item in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void add(Menu toAdd) throws DuplicateMenuException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            throw new DuplicateMenuException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Removes the equivalent menu item from the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws MenuNotFoundException if no such menu item could be found in the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void remove(ReadOnlyMenus toRemove) throws MenuNotFoundException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final boolean menuFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (!menuFoundAndDeleted) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            throw new MenuNotFoundException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Clears all persons in list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Iterator\u003cMenu\u003e iterator() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                || (other instanceof UniqueMenuList // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \u0026\u0026 this.internalList.equals("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                        ((UniqueMenuList) other).internalList));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 1,
      "-": 1,
      "SalsabilTasnia": 132
    }
  },
  {
    "path": "src/seedu/addressbook/data/order/Dish.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.data.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Represents a Dish in the Order."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class Dish {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private String dishName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private double dishPrice;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Dish(String dishName, double dishPrice) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.dishName \u003d dishName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.dishPrice \u003d dishPrice;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public String getDishName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return dishName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public double getDishPrice() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return dishPrice;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": "                || (other instanceof Dish // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": "                \u0026\u0026 this.dishName.equals(((Dish) other).dishName)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "                \u0026\u0026 (this.dishPrice \u003d\u003d ((Dish) other).dishPrice)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return Objects.hash(dishName, dishPrice);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 38
    }
  },
  {
    "path": "src/seedu/addressbook/data/order/Order.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.data.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Represents an Order in the ordering list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class Order implements ReadOnlyOrder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private Person customer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Map with Dishes as keys and quantities as Integer values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Use {@code entrySet()} to create a Set for iteration."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private final Map\u003cDish, Integer\u003e dishItems \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructor for new order."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Order(Person customer, Map\u003cDish, Integer\u003e dishItems) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.dishItems.putAll(dishItems);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.price \u003d calculatePrice(dishItems);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.date \u003d new Date();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructor for edited order to keep the original ordered date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Order(Person customer, Date date, Map\u003cDish, Integer\u003e dishItems) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.dishItems.putAll(dishItems);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.price \u003d calculatePrice(dishItems);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Full constructor."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Order(Person customer, Date date, double price, Map\u003cDish, Integer\u003e dishItems) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.dishItems.putAll(dishItems);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Order(ReadOnlyOrder source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this(source.getCustomer(), source.getDate(), source.getPrice(), source.getDishItems());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Person getCustomer() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return customer;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Map\u003cDish, Integer\u003e getDishItems() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new HashMap\u003c\u003e(dishItems);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Replaces the list of dish items with the dish items in {@code replacement}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void setDishItems(Map\u003cDish, Integer\u003e replacement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "px1099"
        },
        "content": "        dishItems.clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "px1099"
        },
        "content": "        dishItems.putAll(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "px1099"
        },
        "content": "        price \u003d calculatePrice(dishItems);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public double calculatePrice(Map\u003cDish, Integer\u003e dishItems) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "px1099"
        },
        "content": "        double result \u003d 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "px1099"
        },
        "content": "        for (Map.Entry\u003cDish, Integer\u003e m: getDishItems().entrySet()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "px1099"
        },
        "content": "            double dishPrice \u003d m.getKey().getDishPrice();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "px1099"
        },
        "content": "            int dishQuantity \u003d m.getValue();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "px1099"
        },
        "content": "            result +\u003d (dishPrice * dishQuantity);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public int getDishQuantity(Dish dish) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (dishItems.containsKey(dish)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return dishItems.get(dish);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void changeDishQuantity(Dish dish, int quantity) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "px1099"
        },
        "content": "        dishItems.remove(dish);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "px1099"
        },
        "content": "        dishItems.put(dish, quantity);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "px1099"
        },
        "content": "                || (other instanceof ReadOnlyOrder // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "px1099"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyOrder) other));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "px1099"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return Objects.hash(customer, date, price, dishItems);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 135
    }
  },
  {
    "path": "src/seedu/addressbook/data/order/ReadOnlyOrder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.data.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": " * A read-only immutable interface for an Order in the ordering list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": "public interface ReadOnlyOrder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": "    Person getCustomer();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "    Date getDate();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "    double getPrice();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "    Map\u003cDish, Integer\u003e getDishItems();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyOrder other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "                \u0026\u0026 other.getCustomer().equals(this.getCustomer()) // state checks here onwards"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "                \u0026\u0026 other.getDate().equals(this.getDate())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "                \u0026\u0026 other.getDishItems().equals(this.getDishItems()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Formats an order as text, showing all details of customer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "        builder.append(\"\\tCustomer: \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "                .append(getCustomer().getAsTextShowAll()).append(\"\\n\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "                .append(\"\\t\\tDate: \").append(getDate()).append(\"\\n\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "                .append(\"\\t\\tPrice: \").append(getPrice()).append(\" SGD\\n\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "                .append(\"\\t\\tDishes: \\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "        for (Map.Entry\u003cDish, Integer\u003e m: getDishItems().entrySet()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": "            String dishName \u003d m.getKey().getDishName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": "            double dishPrice \u003d m.getKey().getDishPrice();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "            int quantity \u003d m.getValue();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "px1099"
        },
        "content": "            builder.append(\"\\t\\t\\t\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(i).append(\". \")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(dishName)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(\" (\").append(dishPrice).append(\" SGD) \\t\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(\"x\").append(quantity).append(\"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Formats an order as text, showing only non-private details of customer."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "px1099"
        },
        "content": "    default String getAsTextHidePrivate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "px1099"
        },
        "content": "        builder.append(\"\\tCustomer: \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "px1099"
        },
        "content": "                .append(getCustomer().getAsTextHidePrivate()).append(\"\\n\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "px1099"
        },
        "content": "                .append(\"\\t\\tDate: \").append(getDate()).append(\"\\n\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "px1099"
        },
        "content": "                .append(\"\\t\\tPrice: \").append(getPrice()).append(\" SGD\\n\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "px1099"
        },
        "content": "                .append(\"\\t\\tDishes: \\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "px1099"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "px1099"
        },
        "content": "        for (Map.Entry\u003cDish, Integer\u003e m: getDishItems().entrySet()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "px1099"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "px1099"
        },
        "content": "            String dishName \u003d m.getKey().getDishName();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "px1099"
        },
        "content": "            double dishPrice \u003d m.getKey().getDishPrice();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "px1099"
        },
        "content": "            int quantity \u003d m.getValue();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "px1099"
        },
        "content": "            builder.append(\"\\t\\t\\t\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(i).append(\". \")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(dishName)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(\" (\").append(dishPrice).append(\" SGD) \\t\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(\"x\").append(quantity).append(\"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 78
    }
  },
  {
    "path": "src/seedu/addressbook/data/order/UniqueOrderList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.data.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": " * A list of orders."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueOrderList implements Iterable\u003cOrder\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Signals that an operation targeting a specified order in the list would fail because"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * there is no such matching order in the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static class OrderNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private final List\u003cOrder\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructs empty order list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueOrderList() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructs an order list with the given orders."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueOrderList(Order... orders) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final List\u003cOrder\u003e initialTags \u003d Arrays.asList(orders);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueOrderList(Collection\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "        internalList.addAll(orders);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueOrderList(UniqueOrderList source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "px1099"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyOrder}s."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public List\u003cReadOnlyOrder\u003e immutableListView() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Checks if the list contains an equivalent order as the given argument."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean contains(ReadOnlyOrder toCheck) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Adds an order to the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void add(Order toAdd) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "px1099"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Removes the equivalent order from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws OrderNotFoundException if no such order could be found in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void remove(ReadOnlyOrder toRemove) throws OrderNotFoundException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final boolean orderFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (!orderFoundAndDeleted) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "px1099"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Clears all orders in list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "px1099"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Iterator\u003cOrder\u003e iterator() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniqueOrderList // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "px1099"
        },
        "content": "                \u0026\u0026 this.internalList.equals("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                ((UniqueOrderList) other).internalList));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 98,
      "-": 13
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person implements ReadOnlyPerson {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Person(){ }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(ReadOnlyPerson source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(), source.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setName(Name name) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setPhone(Phone phone){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setEmail(Email email) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setAddress(Address address){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces this person\u0027s tags with the tags in {@code replacement}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e replacement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.addAll(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ReadOnlyPerson // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 20,
      "-": 90
    }
  },
  {
    "path": "src/seedu/addressbook/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.Rms;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Represents the main Logic of the Rms."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private Rms rms;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The list of person shown to the user most recently.  */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003c? extends ReadOnlyPerson\u003e lastShownList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /** The list of menu shown to the user most recently.  */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AngWM"
        },
        "content": "    private List\u003c? extends ReadOnlyMenus\u003e lastShownMenuList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /** The list of member shown to the user most recently.  */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private List\u003c? extends ReadOnlyMember\u003e lastShownMemberList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** The list of order shown to the user most recently.  */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private List\u003c? extends ReadOnlyOrder\u003e lastShownOrderList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /** The list of employee shown to the user most recently.  */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private List\u003c? extends ReadOnlyEmployee\u003e lastShownEmployeeList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Logic() throws Exception{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setStorage(initializeStorage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        setRms(storage.load());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "px1099"
        },
        "content": "    Logic(StorageFile storageFile, Rms rms){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        setStorage(storageFile);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        setRms(rms);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setStorage(StorageFile storage){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "px1099"
        },
        "content": "    void setRms(Rms rms){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.rms \u003d rms;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the StorageFile object based on the user specified path (if any) or the default storage path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageFile.InvalidStorageFilePathException if the target file path is incorrect."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile initializeStorage() throws StorageFile.InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStorageFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getPath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Unmodifiable view of the current last shown list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e getLastShownList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableList(lastShownList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Unmodifiable view of the current last shown menu list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AngWM"
        },
        "content": "    public List\u003cReadOnlyMenus\u003e getLastShownMenuList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AngWM"
        },
        "content": "        return Collections.unmodifiableList(lastShownMenuList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AngWM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Unmodifiable view of the current last shown member list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public List\u003cReadOnlyMember\u003e getLastShownMemberList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return Collections.unmodifiableList(lastShownMemberList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Unmodifiable view of the current last shown order list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public List\u003cReadOnlyEmployee\u003e getLastShownEmployeeList() { return Collections.unmodifiableList(lastShownEmployeeList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Unmodifiable view of the current last shown order list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public List\u003cReadOnlyOrder\u003e getLastShownOrderList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return Collections.unmodifiableList(lastShownOrderList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void setLastShownList(List\u003c? extends ReadOnlyPerson\u003e newList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        lastShownList \u003d newList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void setLastShownMenuList(List\u003c? extends ReadOnlyMenus\u003e newList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        lastShownMenuList \u003d newList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AngWM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AngWM"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "px1099"
        },
        "content": "    protected void setLastShownOrderList(List\u003c? extends ReadOnlyOrder\u003e newList) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "px1099"
        },
        "content": "        lastShownOrderList \u003d newList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "px1099"
        },
        "content": "    protected void setLastShownMemberList(List\u003c? extends ReadOnlyMember\u003e newList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "px1099"
        },
        "content": "        lastShownMemberList \u003d newList;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setLastShownEmployeeList(List\u003c? extends ReadOnlyEmployee\u003e newList) { lastShownEmployeeList \u003d newList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the user command, executes it, and returns the result."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception if there was any problem during command execution."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String userCommandText) throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d new Parser().parseCommand(userCommandText);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d execute(command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        recordResult(result);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, updates storage, and returns the result."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command user command"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return result of the command"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception if there was any problem during command execution."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult execute(Command command) throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        command.setData(rms, lastShownList, lastShownMenuList, lastShownOrderList, lastShownMemberList, lastShownEmployeeList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(rms);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Updates the {@link #lastShownList} if the result contains a list of Persons. */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void recordResult(CommandResult result) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e personList \u003d result.getRelevantPersons();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyMenus\u003e\u003e menuList \u003d result.getRelevantMenus();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyOrder\u003e\u003e orderList \u003d result.getRelevantOrders();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyMember\u003e\u003e memberList \u003d result.getRelevantMember();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyEmployee\u003e\u003e employeeList \u003d result.getRelevantEmployee();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (personList.isPresent()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            lastShownList \u003d personList.get();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (menuList.isPresent()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "px1099"
        },
        "content": "            lastShownMenuList \u003d menuList.get();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (orderList.isPresent()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "px1099"
        },
        "content": "            lastShownOrderList \u003d orderList.get();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (memberList.isPresent()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "px1099"
        },
        "content": "            lastShownMemberList \u003d memberList.get();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (employeeList.isPresent()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            lastShownEmployeeList \u003d employeeList.get();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AngWM"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 11,
      "px1099": 35,
      "AngWM": 7,
      "kianhong95": 18,
      "-": 99,
      "SalsabilTasnia": 3
    }
  },
  {
    "path": "src/seedu/addressbook/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.employee.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.member.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.menu.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.order.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.statistics.StatsMemberCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.statistics.StatsMenuCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.statistics.StatsOrderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.statistics.StatsEmployeeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AngWM"
        },
        "content": "    public static final Pattern INDEX_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctargetIndex\u003e.+)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern KEYWORDS_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003ckeywords\u003e\\\\S+(?:\\\\s+\\\\S+)*)\"); // one or more keywords separated by whitespace"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern PERSON_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisPhonePrivate\u003ep?)p/(?\u003cphone\u003e[^/]+)\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisEmailPrivate\u003ep?)e/(?\u003cemail\u003e[^/]+)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisAddressPrivate\u003ep?)a/(?\u003caddress\u003e[^/]+)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final Pattern EMPLOYEE_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    + \"p/(?\u003cphone\u003e[^/]+)\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    + \"e/(?\u003cemail\u003e[^/]+)\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    + \"a/(?\u003caddress\u003e[^/]+)\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    + \"pos/(?\u003cposition\u003e[^/]+)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final Pattern MENU_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    + \" p/(?\u003cprice\u003e[^/]+)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final Pattern MEMBER_DATA_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\"); // variable number of tags"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that the user input could not be parsed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class ParseException extends Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ParseException(String message) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareAdd(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            case MenuAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return prepareAddMenu(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            case MemberAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                return prepareAddMember(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareDelete(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareFind(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            case MenuListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return new MenuListCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareView(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            case ViewAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareViewAll(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            case EmployeeListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                return new EmployeeListCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            case EmployeeAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                return prepareEmployeeAdd(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            case EmployeeDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                return prepareEmployeeDelete(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            case MenuViewAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return prepareViewAllMenu(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            case MenuDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return prepareMenuDelete(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            case MenuFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return prepareMenuFind(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "px1099"
        },
        "content": "            case OrderDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return prepareOrderDelete(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "px1099"
        },
        "content": "            case OrderClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return new OrderClearCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "px1099"
        },
        "content": "            case OrderListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return new OrderListCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            case StatsEmployeeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                return new StatsEmployeeCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            case StatsMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                return new StatsMemberCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            case StatsMenuCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                return new StatsMenuCommand();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            case StatsOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                return new StatsOrderCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            case MemberListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                return new MemberListCommand();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            case HelpCommand.COMMAND_WORD: // Fallthrough"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the add person command."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareAdd(String args){"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d PERSON_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"phone\"),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isPhonePrivate\")),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"email\"),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isEmailPrivate\")),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"address\"),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isAddressPrivate\")),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private Command prepareAddMenu(String args){"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Matcher matcher \u003d MENU_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new MenuAddCommand("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    matcher.group(\"price\"),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    //isPrivatePrefixPresent(matcher.group(\"isPricePrivate\")),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            );"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Parses arguments in the context of the add member command."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private Command prepareAddMember(String args){"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final Matcher matcher \u003d MEMBER_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new MemberAddCommand("
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                    matcher.group(\"name\")"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            );"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Parses arguments in the context of the add employee command."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private Command prepareEmployeeAdd(String args){"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final Matcher matcher \u003d EMPLOYEE_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmployeeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new EmployeeAddCommand("
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    matcher.group(\"phone\"),"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    matcher.group(\"email\"),"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    matcher.group(\"address\"),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    matcher.group(\"position\")"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            );"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Parses arguments in the context of the delete employee command."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private Command prepareEmployeeDelete(String args) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new EmployeeDeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmployeeDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether the private prefix of a contact detail in the add command\u0027s arguments string is present."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isPrivatePrefixPresent(String matchedPrefix) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        return matchedPrefix.equals(\"p\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *      * Extracts the new person\u0027s tags from the add command\u0027s tag arguments string."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *      * Merges duplicate tag strings."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Set\u003cString\u003e getTagsFromArgs(String tagArguments) throws IllegalValueException {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagArguments.isEmpty()) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.emptySet();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        // replace first delimiter prefix, then split"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        final Collection\u003cString\u003e tagStrings \u003d Arrays.asList(tagArguments.replaceFirst(\" t/\", \"\").split(\" t/\"));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(tagStrings);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the delete person command."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareDelete(String args) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Parses arguments in the context of the delete menu item command."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private Command prepareMenuDelete(String args) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new MenuDeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Parses arguments in the context of the delete order command."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private Command prepareOrderDelete(String args) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "px1099"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new OrderDeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the view command."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareView(String args) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewCommand(targetIndex);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the view all command."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareViewAll(String args) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewAllCommand(targetIndex);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewAllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private Command prepareViewAllMenu(String args) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            return new MenuViewAllCommand(targetIndex);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "                    MenuViewAllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given arguments string as a single index number."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args arguments string to parse as index number"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the parsed index number"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if no region of the args string could be found for the index"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NumberFormatException the args string region is not a valid number"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    private int parseArgsAsDisplayedIndex(String args) throws ParseException, NumberFormatException {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AngWM"
        },
        "content": "        final Matcher matcher \u003d INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(\"Could not find index number to parse\");"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the find person command."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareFind(String args) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(keywordSet);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Parses arguments in the context of the find menu command."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private Command prepareMenuFind(String args) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    MenuFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new MenuFindCommand(keywordSet);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 25,
      "px1099": 24,
      "AngWM": 2,
      "kianhong95": 58,
      "-": 252,
      "SalsabilTasnia": 88
    }
  },
  {
    "path": "src/seedu/addressbook/storage/StorageFile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.Rms;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.storage.jaxb.AdaptedRms;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the file used to store address book data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageFile {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Default file path used if the user doesn\u0027t provide the file name. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"Rms.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Note: Note the use of nested classes below."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * More info https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that the given file path does not fulfill the storage filepath constraints."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class InvalidStorageFilePathException extends IllegalValueException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        public InvalidStorageFilePathException(String message) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Signals that some error has occurred while trying to convert and read/write data between the application"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the storage file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class StorageOperationException extends Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final JAXBContext jaxbContext;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidStorageFilePathException if the default path is invalid"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageFile() throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidStorageFilePathException if the given file path is invalid"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageFile(String filePath) throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "px1099"
        },
        "content": "            jaxbContext \u003d JAXBContext.newInstance(AdaptedRms.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(\"jaxb initialisation error\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidPath(path)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InvalidStorageFilePathException(\"Storage file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the given path is acceptable as a storage file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The file path is considered acceptable if it ends with \u0027.txt\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isValidPath(Path filePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves all data to this storage file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void save(Rms rms) throws StorageOperationException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: Note the \u0027try with resource\u0027 statement below."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * More info: https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try (final Writer fileWriter \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                     new BufferedWriter(new FileWriter(path.toFile()))) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final AdaptedRms toSave \u003d new AdaptedRms(rms);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            final Marshaller marshaller \u003d jaxbContext.createMarshaller();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            marshaller.marshal(toSave, fileWriter);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path + \" error: \" + ioe.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error converting address book into storage format\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads data from this storage file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageOperationException if there were errors reading and/or converting data from file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Rms load() throws StorageOperationException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try (final Reader fileReader \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                     new BufferedReader(new FileReader(path.toFile()))) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            final Unmarshaller unmarshaller \u003d jaxbContext.createUnmarshaller();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final AdaptedRms loaded \u003d (AdaptedRms) unmarshaller.unmarshal(fileReader);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            // manual check for missing elements"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            if (loaded.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new StorageOperationException(\"File data missing some elements\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return loaded.toModelType();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: Here, we are using an exception to create the file if it is missing. However, we should minimize"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * using exceptions to facilitate normal paths of execution. If we consider the missing file as a \u0027normal\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * situation (i.e. not truly exceptional) we should not use an exception to handle it."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // create empty file if not found"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final Rms empty \u003d new Rms();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            save(empty);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return empty;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // other errors"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error parsing file data format\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"File contains illegal data values; data type constraints not met\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 10,
      "-": 138
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedDish.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.Dish;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": " * JAXB-friendly adapted dish data holder class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class AdaptedDish {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public String dishName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public double dishPrice;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public AdaptedDish() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedDish"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public AdaptedDish(Dish source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "        dishName \u003d source.getDishName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": "        dishPrice \u003d source.getDishPrice();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return Utils.isAnyNull(dishName, dishPrice);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the Tag object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Dish toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new Dish(dishName, dishPrice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 54
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedEmployee.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Employee;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeePhone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeePosition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class AdaptedEmployee {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private String position;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public AdaptedEmployee() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public AdaptedEmployee(ReadOnlyEmployee source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        name \u003d source.getName().value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        phone\u003d source.getPhone().value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        position \u003d source.getPosition().value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Converts this jaxb-friendly adapted employee object into the Employee object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted employee"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Employee toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final EmployeeName name \u003d new EmployeeName(this.name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final EmployeePhone phone \u003d new EmployeePhone(this.phone);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final EmployeeEmail email \u003d new EmployeeEmail(this.email);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final EmployeeAddress address \u003d new EmployeeAddress(this.address);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final EmployeePosition position \u003d new EmployeePosition(this.position);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Employee(name, phone, email, address, position);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 61
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedMember.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.Member;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.Points;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * JAXB-friendly adapted person data holder class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public class AdaptedMember {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private static class AdaptedContactDetail {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        @XmlValue"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        public String value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        @XmlAttribute(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        public boolean isPrivate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private String points;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    private AdaptedContactDetail phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    private AdaptedContactDetail email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    private AdaptedContactDetail address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    @XmlElement"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    private List\u003cAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public AdaptedMember() {}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedPerson"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public AdaptedMember(ReadOnlyMember source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        points \u003d source.getPoints().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        phone \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        phone.isPrivate \u003d source.getPhone().isPrivate();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        phone.value \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        email \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        email.isPrivate \u003d source.getEmail().isPrivate();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        email.value \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        address \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        address.isPrivate \u003d source.getAddress().isPrivate();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        address.value \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            tagged.add(new AdaptedTag(tag));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            if (tag.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//                return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        // second call only happens if phone/email/address are all not null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return Utils.isAnyNull(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//                || Utils.isAnyNull(phone.value, email.value, address.value);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the Person object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Member toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final Points points \u003d new Points();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        final Phone phone \u003d new Phone(this.phone.value, this.phone.isPrivate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        final Email email \u003d new Email(this.email.value, this.email.isPrivate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        final Address address \u003d new Address(this.address.value, this.address.isPrivate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return new Member(name, points);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 115
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedMenu.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * JAXB-friendly adapted person data holder class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class AdaptedMenu {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private static class AdaptedMenuItemDetail {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        @XmlValue"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        public String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        @XmlAttribute(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        public boolean isPrivate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private AdaptedMenuItemDetail price;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private List\u003cAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public AdaptedMenu() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedPerson"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public AdaptedMenu(ReadOnlyMenus source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        price \u003d new AdaptedMenuItemDetail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //price.isPrivate \u003d source.getPrice().isPrivate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        price.value \u003d source.getPrice().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            tagged.add(new AdaptedTag(tag));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            if (tag.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // second call only happens if phone/email/address are all not null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return Utils.isAnyNull(name, price)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                || Utils.isAnyNull(price.value);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the Person object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Menu toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final MenuName name \u003d new MenuName(this.name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Price price \u003d new Price(this.price.value/*, this.price.isPrivate*/);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new Menu(name, price, tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "SalsabilTasnia": 93
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedOrder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.Dish;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.Order;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class AdaptedOrder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private static class AdaptedDishItem {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "        @XmlElement"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "        public AdaptedDish dish;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": "        @XmlElement"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "        public int quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private AdaptedPerson customer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private long date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private List\u003cAdaptedDishItem\u003e dishItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public AdaptedOrder() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedOrder"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public AdaptedOrder(ReadOnlyOrder source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": "        customer \u003d new AdaptedPerson(source.getCustomer());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "        date \u003d source.getDate().getTime();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "px1099"
        },
        "content": "        price \u003d source.getPrice();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "px1099"
        },
        "content": "        dishItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": "        for (Map.Entry\u003cDish, Integer\u003e m: source.getDishItems().entrySet()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "px1099"
        },
        "content": "            AdaptedDishItem dishItem \u003d new AdaptedDishItem();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "            dishItem.dish \u003d new AdaptedDish(m.getKey());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "            dishItem.quantity \u003d m.getValue();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "px1099"
        },
        "content": "            dishItems.add(dishItem);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "px1099"
        },
        "content": "        for (AdaptedDishItem dishItem : dishItems) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "px1099"
        },
        "content": "            if (dishItem.dish.isAnyRequiredFieldMissing() || Utils.isAnyNull(dishItem.quantity)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "px1099"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return customer.isAnyRequiredFieldMissing() || Utils.isAnyNull(date, price);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Converts this jaxb-friendly adapted order object into the Order object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Order toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final Map\u003cDish, Integer\u003e dishItems \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "px1099"
        },
        "content": "        for (AdaptedDishItem dishItem : this.dishItems) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "px1099"
        },
        "content": "            dishItems.put(dishItem.dish.toModelType(), dishItem.quantity);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final Person customer \u003d this.customer.toModelType();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final Date date \u003d new Date(this.date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final double price \u003d this.price;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new Order(customer, date, price, dishItems);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 88
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedRms.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.Rms;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.order.Order;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.order.UniqueOrderList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.Menu;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.UniqueMenuList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.Member;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.UniqueMemberList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Employee;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueEmployeeList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted address book data holder class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "@XmlRootElement(name \u003d \"Rms\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class AdaptedRms {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(name \u003d \"persons\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(name \u003d \"menus\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private List\u003cAdaptedMenu\u003e menus \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @XmlElement(name \u003d \"members\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private List\u003cAdaptedMember\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AngWM"
        },
        "content": "    @XmlElement(name \u003d \"employees\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private List\u003cAdaptedEmployee\u003e employees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(name \u003d \"orders\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cAdaptedOrder\u003e orders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public AdaptedRms() {}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Converts a given Rms into this class for JAXB use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedRms"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /*public AdaptedRms(Rms source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        source.getAllPersons().forEach(person -\u003e persons.add(new AdaptedPerson(person)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "*/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public AdaptedRms(Rms source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        menus \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        employees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getAllPersons().forEach(person -\u003e persons.add(new AdaptedPerson(person)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        source.getAllMenus().forEach(menu -\u003e menus.add(new AdaptedMenu(menu)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        source.getAllEmployees().forEach(employee -\u003e employees.add(new AdaptedEmployee(employee)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        source.getAllMembers().forEach(member -\u003e members.add(new AdaptedMember(member)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getAllOrders().forEach(order -\u003e orders.add(new AdaptedOrder(order)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.stream().anyMatch(AdaptedPerson::isAnyRequiredFieldMissing);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public boolean isAnyRequiredFieldMissingMenu() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return menus.stream().anyMatch(AdaptedMenu::isAnyRequiredFieldMissing);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Converts this jaxb-friendly {@code AdaptedRms} object into the corresponding(@code Rms} object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Rms toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final List\u003cMenu\u003e menuList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AngWM"
        },
        "content": "        final List\u003cEmployee\u003e employeeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final List\u003cMember\u003e memberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cOrder\u003e orderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AdaptedPerson person : persons) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            personList.add(person.toModelType());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "      // goes through employeeList to change it  "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for (AdaptedEmployee employee : employees) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            employeeList.add(employee.toModelType());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AngWM"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (AdaptedMenu menu : menus) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            menuList.add(menu.toModelType());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        for (AdaptedMember member : members) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            memberList.add(member.toModelType());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AdaptedOrder order : orders) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            orderList.add(order.toModelType());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new Rms("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "px1099"
        },
        "content": "                new UniquePersonList(personList),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "px1099"
        },
        "content": "                new UniqueMenuList(menuList),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "px1099"
        },
        "content": "                new UniqueEmployeeList(employeeList),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "px1099"
        },
        "content": "                new UniqueOrderList(orderList),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "px1099"
        },
        "content": "                new UniqueMemberList(memberList)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "px1099"
        },
        "content": "        );"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 10,
      "px1099": 17,
      "AngWM": 3,
      "kianhong95": 10,
      "-": 65,
      "SalsabilTasnia": 16
    }
  },
  {
    "path": "src/seedu/addressbook/ui/Formatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Used for formatting text for display. e.g. for adding text decorations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Formatter {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** A decorative prefix added to the beginning of lines printed by Rms */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LINE_PREFIX \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Format of indexed list item */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INDEXED_LIST_ITEM \u003d \"\\t%1$d. %2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats the given strings for displaying to the user. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String format(String... messages) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String m : messages) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(LINE_PREFIX + m.replace(\"\\n\", LS + LINE_PREFIX) + LS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats the given list of persons for displaying to the user. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String format(List\u003c? extends ReadOnlyPerson\u003e persons) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cString\u003e formattedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyPerson person : persons) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedPersons.add(person.getAsTextHidePrivate());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return format(asIndexedList(formattedPersons));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** Formats the given list of menus for displaying to the user. */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public String formatMenuResult(List\u003c? extends ReadOnlyMenus\u003e menus) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final List\u003cString\u003e formattedMenus \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (ReadOnlyMenus menu : menus) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            formattedMenus.add(menu.getAsTextHidePrivate());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return format(asIndexedList(formattedMenus));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AngWM"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** Formats the given list of orders for displaying to the user. */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public String formatOrderResult(List\u003c? extends ReadOnlyOrder\u003e orders) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final List\u003cString\u003e formattedOrders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "px1099"
        },
        "content": "        for (ReadOnlyOrder order : orders) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "px1099"
        },
        "content": "            formattedOrders.add(order.getAsTextHidePrivate());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return format(asIndexedList(formattedOrders));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /** Formats the given list of members for displaying to the user. */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public String formatMemberResult(List\u003c? extends ReadOnlyMember\u003e members) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final List\u003cString\u003e formattedOrders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        for (ReadOnlyMember member : members) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            formattedOrders.add(member.getAsTextHidePrivate());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return format(asIndexedList(formattedOrders));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /** Formats the given list of employees for displaying to the user. */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String formatEmployeeResult(List\u003c? extends ReadOnlyEmployee\u003e employees) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final List\u003cString\u003e formattedOrders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for (ReadOnlyEmployee employee : employees) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            formattedOrders.add(employee.getAsTextShowDetails());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return format(asIndexedList(formattedOrders));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats a list of strings as an indexed list. */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String asIndexedList(List\u003cString\u003e listItems) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder formatted \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        int displayIndex \u003d 0 + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String listItem : listItems) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            formatted.append(getIndexedListItem(displayIndex, listItem)).append(\"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return formatted.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats a string as an indexed list item."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param visibleIndex index for this listing"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getIndexedListItem(int visibleIndex, String listItem) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_INDEXED_LIST_ITEM, visibleIndex, listItem);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 10,
      "px1099": 11,
      "AngWM": 1,
      "kianhong95": 10,
      "-": 67,
      "SalsabilTasnia": 7
    }
  },
  {
    "path": "src/seedu/addressbook/ui/Gui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.Main;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The GUI of the App"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Gui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int INITIAL_WINDOW_WIDTH \u003d 800;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int INITIAL_WINDOW_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private String version;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Gui(Logic logic_rms, String version) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic_rms;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.version \u003d version;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage, Stoppable mainApp) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AngWM"
        },
        "content": "      // ADD DISPLAY OF STORAGE FILE PATH"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow \u003d createMainWindow(stage, mainApp);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "        mainWindow.displayRmsWelcomeMessage(version, logic.getStorageFilePath());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AngWM"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow createMainWindow(Stage stage, Stoppable mainApp) throws IOException{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: When calling getResource(), use \u0027/\u0027, instead of File.separator or \u0027\\\\\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More info: http://docs.oracle.com/javase/8/docs/technotes/guides/lang/resources.html#res_name_context"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loader.setLocation(Main.class.getResource(\"ui/mainwindow.fxml\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setTitle(version);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(new Scene(loader.load(), INITIAL_WINDOW_WIDTH, INITIAL_WINDOW_HEIGHT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        MainWindow mainWindow_rms \u003d loader.getController();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow_rms.setLogic(logic);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        mainWindow_rms.setMainApp(mainApp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return mainWindow_rms;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 1,
      "AngWM": 2,
      "-": 48,
      "SalsabilTasnia": 5
    }
  },
  {
    "path": "src/seedu/addressbook/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.*;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Main Window of the GUI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stoppable mainApp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogic(Logic logic){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setMainApp(Stoppable mainApp){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mainApp \u003d mainApp;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea outputConsole;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandInput;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void onCommand(ActionEvent event) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String userCommandText \u003d commandInput.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(userCommandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if(isExitCommand(result)){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                exitApp();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            displayResult(result);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            clearCommandInput();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            display(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void exitApp() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        mainApp.stop();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns true of the result given is the result of an exit command */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isExitCommand(CommandResult result) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return result.feedbackToUser.equals(ExitCommand.MESSAGE_EXIT_ACKNOWEDGEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears the command input box */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void clearCommandInput() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        commandInput.setText(\"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears the output display area */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearOutputConsole(){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Displays the result of a command execution to the user. */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayResult(CommandResult result) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        clearOutputConsole();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e resultPersons \u003d result.getRelevantPersons();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyMenus\u003e\u003e resultMenus \u003d result.getRelevantMenus();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyOrder\u003e\u003e resultOrders \u003d result.getRelevantOrders();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyMember\u003e\u003e resultMembers \u003d result.getRelevantMember();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyEmployee\u003e\u003e resultEmployees \u003d result.getRelevantEmployee();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if(resultPersons.isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            display(resultPersons.get());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } else if (resultOrders.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "px1099"
        },
        "content": "            displayOrderResult(resultOrders.get());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AngWM"
        },
        "content": "        } else if(resultMenus.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AngWM"
        },
        "content": "            displayMenuResult(resultMenus.get());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        } else if(resultMembers.isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            displayMemberResult(resultMembers.get());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } else if(resultEmployees.isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            displayEmployeeResult(resultEmployees.get());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        display(result.feedbackToUser);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void displayRmsWelcomeMessage(String version, String orderListStorageFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "px1099"
        },
        "content": "        String orderListStorageFileInfo \u003d String.format(MESSAGE_USING_ORDER_LIST_STORAGE_FILE,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "px1099"
        },
        "content": "                orderListStorageFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        display(MESSAGE_WELCOME, version, MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE, orderListStorageFileInfo);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the list of persons in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Private contact details are hidden."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void display(List\u003c? extends ReadOnlyPerson\u003e persons) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        display(new Formatter().format(persons));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Displays the list of members in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Private contact details are hidden."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private void displayMemberResult(List\u003c? extends ReadOnlyMember\u003e members) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        display(new Formatter().formatMemberResult(members));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Displays the list of orders in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Private contact details are hidden."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private void displayOrderResult(List\u003c? extends ReadOnlyOrder\u003e orders) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "px1099"
        },
        "content": "        display(new Formatter().formatOrderResult(orders));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Displays the menu list in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private void displayMenuResult(List\u003c? extends ReadOnlyMenus\u003e menus) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "px1099"
        },
        "content": "        display(new Formatter().formatMenuResult(menus));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Displays the employee list in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private void displayEmployeeResult(List\u003c? extends ReadOnlyEmployee\u003e employees) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        display(new Formatter().formatEmployeeResult(employees));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the given messages on the output display area, after formatting appropriately."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void display(String... messages) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.setText(outputConsole.getText() + new Formatter().format(messages));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 13,
      "px1099": 22,
      "AngWM": 2,
      "kianhong95": 11,
      "-": 107,
      "SalsabilTasnia": 3
    }
  },
  {
    "path": "test/java/seedu/addressbook/logic/LogicTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.employee.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.commands.member.MemberAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.menu.MenuViewAllCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.Rms;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.Member;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.Points;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.*;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.*;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * See https://github.com/junit-team/junit4/wiki/rules#temporaryfolder-rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile saveFile;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private Rms rms;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFile \u003d new StorageFile(saveFolder.newFile(\"testSaveFile.txt\").getPath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "px1099"
        },
        "content": "        rms \u003d new Rms();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFile.save(rms);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new Logic(saveFile, rms);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //Constructor is called in the setup() method which executes before every test, no need to call it here again."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the last shown list is empty"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastShownList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastShownMenuList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastShownEmployeeList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastShownMemberList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalid() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"       \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(invalidCommand,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that the result message is correct."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Both the \u0027address book\u0027 and the \u0027last shown list\u0027 are expected to be empty."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @see #assertCommandBehavior(String, String, Rms, boolean, List)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "px1099"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedMessage, Rms.empty(),false, Collections.emptyList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Executes the Employee command and confirms that the result message is correct."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Both the \u0027address book\u0027 and the \u0027last shown list\u0027 are expected to be empty."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @see #assertEmployeeCommandBehavior(String, String, Rms, boolean, List)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private void assertEmployeeCommandBehavior(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(inputCommand, expectedMessage, Rms.empty(),false, Collections.emptyList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Executes the Member command and confirms that the result message is correct."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Both the \u0027address book\u0027 and the \u0027last shown list\u0027 are expected to be empty."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @see #assertMemberCommandBehavior(String, String, Rms, boolean, List)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private void assertMemberCommandBehavior(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertMemberCommandBehavior(inputCommand, expectedMessage, Rms.empty(),false, Collections.emptyList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *      - the internal address book data are same as those in the {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *      - the storage file content matches data in {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                                       String expectedMessage,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "px1099"
        },
        "content": "                                       Rms expectedRms,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                                       boolean isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                                       List\u003c? extends ReadOnlyPerson\u003e lastShownList) throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(r.getRelevantPersons().isPresent(), isRelevantPersonsExpected);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if(isRelevantPersonsExpected){"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(lastShownList, r.getRelevantPersons().get());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "px1099"
        },
        "content": "        assertEquals(expectedRms, rms);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(lastShownList, logic.getLastShownList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(rms, saveFile.load());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *      - the internal address book data are same as those in the {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *      - the storage file content matches data in {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private void assertEmployeeCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                               String expectedMessage,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                               Rms expectedRms,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                               boolean isRelevantEmployeesExpected,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                               List\u003c? extends ReadOnlyEmployee\u003e lastShownList) throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(r.getRelevantEmployee().isPresent(), isRelevantEmployeesExpected);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if(isRelevantEmployeesExpected){"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            assertEquals(lastShownList, r.getRelevantEmployee().get());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(expectedRms, rms);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(lastShownList, logic.getLastShownEmployeeList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(rms, saveFile.load());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *      - the internal address book data are same as those in the {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *      - the storage file content matches data in {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private void assertMemberCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                                               String expectedMessage,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                                               Rms expectedRms,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                                               boolean isRelevantMemberExpected,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                                               List\u003c? extends ReadOnlyMember\u003e lastShownList) throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertEquals(r.getRelevantMember().isPresent(), isRelevantMemberExpected);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        if(isRelevantMemberExpected){"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            assertEquals(lastShownList, r.getRelevantMember().get());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertEquals(expectedRms, rms);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertEquals(lastShownList, logic.getLastShownMemberList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertEquals(rms, saveFile.load());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Executes the menu command and confirms that the result message is correct."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Both the \u0027address book\u0027 and the \u0027last shown menu list\u0027 are expected to be empty."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @see #assertMenuCommandBehavior(String, String, Rms, boolean, List)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private void assertMenuCommandBehavior(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertMenuCommandBehavior(inputCommand, expectedMessage, Rms.empty(), false, Collections.emptyList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Executes the menu command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *      - the internal address book data are same as those in the {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *      - the internal \u0027last shown menu list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *      - the storage file content matches data in {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private void assertMenuCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                           String expectedMessage,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                           Rms expectedRms,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                           boolean isRelevantMenuItemsExpected,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                           List\u003c? extends ReadOnlyMenus\u003e lastShownMenuList) throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(r.getRelevantMenus().isPresent(), isRelevantMenuItemsExpected);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if(isRelevantMenuItemsExpected){"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            assertEquals(lastShownMenuList, r.getRelevantMenus().get());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(expectedRms, rms);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(lastShownMenuList, logic.getLastShownMenuList());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(rms, saveFile.load());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_unknownCommandWord() throws Exception {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        String unknownCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(unknownCommand, HelpCommand.MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"help\", HelpCommand.MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"exit\", ExitCommand.MESSAGE_EXIT_ACKNOWEDGEMENT);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_clear() throws Exception {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        rms.addPerson(helper.generatePerson(1, true));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        rms.addPerson(helper.generatePerson(2, true));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        rms.addPerson(helper.generatePerson(3, true));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "px1099"
        },
        "content": "        assertCommandBehavior(\"clear\", ClearCommand.MESSAGE_SUCCESS, Rms.empty(), false, Collections.emptyList());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add wrong args wrong args\", expectedMessage);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name 12345 e/valid@email.butNoPhonePrefix a/valid, address\", expectedMessage);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 valid@email.butNoPrefix a/valid, address\", expectedMessage);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 e/valid@email.butNoAddressPrefix valid, address\", expectedMessage);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addemp_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmployeeAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp wrong args wrong args\", expectedMessage);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp Valid Name 12345 e/valid@email.butNoPhonePrefix a/valid, address pos/validPos\", expectedMessage);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp Valid Name p/12345 valid@email.butNoPrefix a/valid, address pos/validPos\", expectedMessage);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp Valid Name p/12345 e/valid@email.butNoAddressPrefix valid, address pos/validPos\", expectedMessage);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp Valid Name p/12345 e/valid@email a/butNoAddressPrefix valid, address butNoPositionPrefix\", expectedMessage);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void execute_addmember_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertMemberCommandBehavior("
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                \"addmember Valid Name p/\", expectedMessage);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_invalidPersonData() throws Exception {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add []\\\\[;] p/12345 e/valid@e.mail a/valid, address\", Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/not_numbers e/valid@e.mail a/valid, address\", Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 e/notAnEmail a/valid, address\", Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 e/valid@e.mail a/valid, address t/invalid_-[.tag\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addemp_invalidPersonData() throws Exception {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp []\\\\[;] p/12345 e/valid@e.mail a/valid, address pos/validPos\", EmployeeName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp Valid Name p/not_numbers e/valid@e.mail a/valid, address pos/validPos\", EmployeePhone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp Valid Name p/12345 e/notAnEmail a/valid, address pos/validPos\", EmployeeEmail.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp Valid Name p/12345 e/valid@e.mail a/valid, address pos/@#%\u0026%\", EmployeePosition.MESSAGE_POSITION_CONSTRAINTS);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_successful() throws Exception {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toBeAdded \u003d helper.adam();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "px1099"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, toBeAdded),"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addemp_successful() throws Exception {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee toBeAdded \u003d helper.peter();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        expectedAB.addEmployee(toBeAdded);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(helper.generateAddEmpCommand(toBeAdded),"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                String.format(EmployeeAddCommand.MESSAGE_SUCCESS, toBeAdded),"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void execute_addmember_successful() throws Exception {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        Member toAdd \u003d helper.eve();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        expectedAB.addMember(toAdd);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertMemberCommandBehavior(helper.generateAddMemberCommand(toAdd),"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                String.format(MemberAddCommand.MESSAGE_SUCCESS, toAdd),"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_addDuplicate_notAllowed() throws Exception {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toBeAdded \u003d helper.adam();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "px1099"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        rms.addPerson(toBeAdded); // person already in internal address book"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "                helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addempDuplicate_notAllowed() throws Exception {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee toBeAdded \u003d helper.peter();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        expectedAB.addEmployee(toBeAdded);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        logic.execute(helper.generateAddEmpCommand(toBeAdded)); //employee already in Rms"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                helper.generateAddEmpCommand(toBeAdded),"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                EmployeeAddCommand.MESSAGE_DUPLICATE_EMPLOYEE,"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_list_showsAllPersons() throws Exception {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(false, true);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e expectedList \u003d expectedAB.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, false, true);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"list\","
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //test for MenuListCommand"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void execute_list_showsAllMenuItems() throws Exception {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        Rms expectedRMS \u003d new Rms();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        List\u003c? extends ReadOnlyMenus\u003e expectedRMSList \u003d expectedRMS.getAllMenus().immutableListView();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //helper.addToRMS(rms, expectedRMSList);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertMenuCommandBehavior(\"listmenu\","
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                Command.getMessageForMenuListShownSummary(expectedRMSList),"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                expectedRMS,"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                expectedRMSList);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_listemp_successful() throws Exception {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e1 \u003d helper.generateEmployee(1);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e2 \u003d helper.generateEmployee(2);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cEmployee\u003e lastShownList \u003d helper.generateEmployeeList(e1, e2);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedRms \u003d helper.generateRmsEmployees(lastShownList);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003c? extends ReadOnlyEmployee\u003e expectedList \u003d expectedRms.getAllEmployees().immutableListView();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addEmployeesToRms(rms, lastShownList);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(\"listemp\","
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Command.getMessageForEmployeeListShownSummary(expectedList),"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedRms,"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void execute_listmember_successful() throws Exception {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        Member m1 \u003d helper.generateMember(1);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        Member m2 \u003d helper.generateMember(2);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        List\u003cMember\u003e lastShownList \u003d helper.generateMemberList(m1, m2);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        Rms expectedRms \u003d helper.generateRmsMember(lastShownList);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        List\u003c? extends ReadOnlyMember\u003e expectedList \u003d expectedRms.getAllMembers().immutableListView();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        helper.addMembersToRms(rms, lastShownList);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertMemberCommandBehavior(\"listmembers\","
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                Command.getMessageForMemberListShownSummary(expectedList),"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                expectedRms,"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_view_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view \", expectedMessage);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_view_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"view\");"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "     * targeting a single person in the last shown list, using visible index."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandWord to test assuming it targets a single person in the last shown list based on visible index."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInvalidIndexBehaviorForCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(false, true);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "px1099"
        },
        "content": "        assertCommandBehavior(commandWord + \" -1\", expectedMessage, Rms.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "px1099"
        },
        "content": "        assertCommandBehavior(commandWord + \" 0\", expectedMessage, Rms.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "px1099"
        },
        "content": "        assertCommandBehavior(commandWord + \" 3\", expectedMessage, Rms.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * targeting a single employee in the last shown list, using visible index."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param commandWord to test assuming it targets a single employee in the last shown list based on visible index."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private void assertInvalidIndexBehaviorForEmployeeCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e1 \u003d helper.generateEmployee(1);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e2 \u003d helper.generateEmployee(2);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cEmployee\u003e lastShownList \u003d helper.generateEmployeeList(e1, e2);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        logic.setLastShownEmployeeList(lastShownList);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(commandWord + \" -1\", expectedMessage, Rms.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(commandWord + \" 0\", expectedMessage, Rms.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(commandWord + \" 3\", expectedMessage, Rms.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_view_onlyShowsNonPrivate() throws Exception {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(lastShownList);"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, lastShownList);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 1\","
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p1.getAsTextHidePrivate()),"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 2\","
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getAsTextHidePrivate()),"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_tryToViewMissingPerson_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "px1099"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(p2);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        rms.addPerson(p2);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 1\","
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall \", expectedMessage);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //test for MenuViewAll Command testing for valid arguments"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void execute_MenuviewAll_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertMenuCommandBehavior(\"viewallmenu \", expectedMessage);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertMenuCommandBehavior(\"viewallmenu arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"viewall\");"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_alsoShowsPrivate() throws Exception {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(lastShownList);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, lastShownList);"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 1\","
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p1.getAsTextShowAll()),"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 2\","
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getAsTextShowAll()),"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_tryToViewAllPersonMissingInAddressBook_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "px1099"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(p1);"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "        rms.addPerson(p1);"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 2\","
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete \", expectedMessage);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_delemp_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmployeeDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(\"delemp \", expectedMessage);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(\"delemp arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"delete\");"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_delemp_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertInvalidIndexBehaviorForEmployeeCommand(\"delemp\");"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_removesCorrectPerson() throws Exception {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(threePersons);"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.removePerson(p2);"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, threePersons);"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, p2),"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "                threePersons);"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_delemp_removesCorrectEmployee() throws Exception {"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e1 \u003d helper.generateEmployee(1);"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e2 \u003d helper.generateEmployee(2);"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e3 \u003d helper.generateEmployee(3);"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cEmployee\u003e threeEmployees \u003d helper.generateEmployeeList(e1, e2, e3);"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedRms \u003d helper.generateRmsEmployees(threeEmployees);"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        expectedRms.removeEmployee(e2);"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addEmployeesToRms(rms, threeEmployees);"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        logic.setLastShownEmployeeList(threeEmployees);"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(\"delemp 2\","
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                String.format(EmployeeDeleteCommand.MESSAGE_DELETE_EMPLOYEE_SUCCESS, e2),"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedRms,"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                threeEmployees);"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_missingInAddressBook() throws Exception {"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(threePersons);"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.removePerson(p2);"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, threePersons);"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "        rms.removePerson(p2);"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "                threePersons);"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_delemp_missingInRms() throws Exception {"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e1 \u003d helper.generateEmployee(1);"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e2 \u003d helper.generateEmployee(2);"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e3 \u003d helper.generateEmployee(3);"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cEmployee\u003e threeEmployees \u003d helper.generateEmployeeList(e1, e2, e3);"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedRms \u003d helper.generateRmsEmployees(threeEmployees);"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        expectedRms.removeEmployee(e2);"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addEmployeesToRms(rms, threeEmployees);"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        rms.removeEmployee(e2);"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        logic.setLastShownEmployeeList(threeEmployees);"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(\"delemp 2\","
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Messages.MESSAGE_EMPLOYEE_NOT_IN_RMS,"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedRms,"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                threeEmployees);"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find \", expectedMessage);"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_onlyMatchesFullWordsInNames() throws Exception {"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla KEY bla bceofeia\");"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"KE Y\");"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEYKEYKEY sduauo\");"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(fourPersons);"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, fourPersons);"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY\","
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_isCaseSensitive() throws Exception {"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla KEY bla bceofeia\");"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"key key\");"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEy sduauo\");"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(fourPersons);"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, fourPersons);"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY\","
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_matchesIfAnyKeywordPresent() throws Exception {"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla rAnDoM bla bceofeia\");"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"key key\");"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEy sduauo\");"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(fourPersons);"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, fourPersons);"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY rAnDoM\","
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "     * A utility class to generate test data."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "    class TestDataHelper{"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "        Person adam() throws Exception {"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(\"Adam Brown\");"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone privatePhone \u003d new Phone(\"111111\", true);"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d new Email(\"adam@gmail.com\", false);"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "            Address privateAddress \u003d new Address(\"111, alpha street\", true);"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(Arrays.asList(tag1, tag2));"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person(name, privatePhone, email, privateAddress, tags);"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee peter() throws Exception {"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            EmployeeName name \u003d new EmployeeName(\"Peter Lee\");"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            EmployeePhone phone \u003d new EmployeePhone(\"91234567\");"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            EmployeeEmail email \u003d new EmployeeEmail(\"PeterLee89@rms.com\");"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            EmployeeAddress address \u003d new EmployeeAddress(\"Clementi Ave 2, Blk 543 #13-12\");"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            EmployeePosition position \u003d new EmployeePosition(\"Cashier\");"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new Employee(name, phone, email, address, position);"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        Member eve() throws Exception {"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            Name name \u003d new Name(\"Eve\");"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            Points points \u003d new Points();"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new Member(name, points);"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        Menu burger() throws Exception {"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            MenuName name \u003d new MenuName(\"Cheese Burger\");"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            Price price \u003d new Price(\"5\");"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(Arrays.asList(tag1, tag2));"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new Menu(name, price, tags);"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates a valid person using the given seed."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "         * Running this function with the same parameter values guarantees the returned person will have the same state."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "         * Each unique seed will generate a unique Person object."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param seed used to generate the person data field values"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isAllFieldsPrivate determines if private-able fields (phone, email, address) will be private"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "        Person generatePerson(int seed, boolean isAllFieldsPrivate) throws Exception {"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person("
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Name(\"Person \" + seed),"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Phone(\"\" + Math.abs(seed), isAllFieldsPrivate),"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Email(seed + \"@email\", isAllFieldsPrivate),"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"House of \" + seed, isAllFieldsPrivate),"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "                    new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag\" + Math.abs(seed)), new Tag(\"tag\" + Math.abs(seed + 1))))"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "         * Generates a valid employee using the given seed."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "         * Running this function with the same parameter values guarantees the returned employee will have the same state."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "         * Each unique seed will generate a unique Employee object."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "         *"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "         * @param seed used to generate the employee data field values"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "         */"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee generateEmployee(int seed) throws Exception {"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new Employee("
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    new EmployeeName(\"Employee \" + seed),"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    new EmployeePhone(\"\" + Math.abs(seed)),"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    new EmployeeEmail(seed + \"@email\"),"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    new EmployeeAddress(\"House of \" + seed),"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    new EmployeePosition(\"Position \"+ seed)"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            );"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "         * Generates a valid member using the given seed."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "         * Running this function with the same parameter values guarantees the returned employee will have the same state."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "         * Each unique seed will generate a unique Employee object."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "         *"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "         * @param seed used to generate the employee data field values"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        Member generateMember(int seed) throws Exception {"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new Member("
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                    new Name(\"Member \" + seed),"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                    new Points()"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            );"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         * Generates a valid menu item using the given seed."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         * Running this function with the same parameter values guarantees the returned menu item will have the same state."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         * Each unique seed will generate a unique Person object."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         *"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         * @param seed used to generate the person data field values"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         * @param isAllFieldsPrivate determines if private-able fields (phone, email, address) will be private"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         */"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        Menu generateMenuItem(int seed, boolean isAllFieldsPrivate) throws Exception {"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new Menu("
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    new MenuName(\"Person \" + seed),"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    new Price(\"\" + Math.abs(seed)),"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag\" + Math.abs(seed)), new Tag(\"tag\" + Math.abs(seed + 1))))"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            );"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Generates the correct add command based on the person given */"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "        String generateAddCommand(Person p) {"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "            StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add(\"add\");"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add(p.getName().toString());"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add((p.getPhone().isPrivate() ? \"pp/\" : \"p/\") + p.getPhone());"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add((p.getEmail().isPrivate() ? \"pe/\" : \"e/\") + p.getEmail());"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add((p.getAddress().isPrivate() ? \"pa/\" : \"a/\") + p.getAddress());"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d p.getTags();"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "            for(Tag t: tags){"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "                cmd.add(\"t/\" + t.tagName);"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "            return cmd.toString();"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        /** Generates the correct add command based on the person given */"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String generateAddEmpCommand(Employee e) {"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            cmd.add(\"addemp\");"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            cmd.add(e.getName().toString());"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            cmd.add(\"p/\" + e.getPhone().toString());"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            cmd.add(\"e/\" + e.getEmail().toString());"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            cmd.add(\"a/\" + e.getAddress().toString());"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            cmd.add(\"pos/\" + e.getPosition().toString());"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return cmd.toString();"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        /** Generates the correct add member command based on the member given */"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        String generateAddMemberCommand(Member e) {"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            cmd.add(\"addmember\");"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            cmd.add(e.getName().toString());"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return cmd.toString();"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "px1099"
        },
        "content": "         * Generates an Rms with auto-generated persons."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isPrivateStatuses flags to indicate if all contact details of respective persons should be set to"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "         *                          private."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms generateRms(Boolean... isPrivateStatuses) throws Exception{"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "px1099"
        },
        "content": "            Rms rms \u003d new Rms();"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            addToRms(rms, isPrivateStatuses);"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "            return rms;"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "px1099"
        },
        "content": "         * Generates an Rms based on the list of Persons given."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms generateRms(List\u003cPerson\u003e persons) throws Exception{"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            Rms rms \u003d new Rms();"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            addToRms(rms, persons);"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return rms;"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "         * Generates an Rms based on the list of Employees given."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "         */"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms generateRmsEmployees(List\u003cEmployee\u003e employees) throws Exception{"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "px1099"
        },
        "content": "            Rms rms \u003d new Rms();"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            addEmployeesToRms(rms, employees);"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "            return rms;"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "         * Generates an Rms based on the list of Menu given."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms generateRmsMenu(List\u003cMenu\u003e menus) throws Exception{"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            Rms rms \u003d new Rms();"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            addToRmsMenu(rms, menus);"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return rms;"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "         * Generates an Rms based on the list of Menu given."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        Rms generateRmsMember(List\u003cMember\u003e members) throws Exception{"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            Rms rms \u003d new Rms();"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            addMembersToRms(rms, members);"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return rms;"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "px1099"
        },
        "content": "         * Adds auto-generated Person objects to the given Rms"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "px1099"
        },
        "content": "         * @param rms The Rms to which the Persons will be added"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isPrivateStatuses flags to indicate if all contact details of generated persons should be set to"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "         *                          private."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        void addToRms(Rms rms, Boolean... isPrivateStatuses) throws Exception{"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            addToRms(rms, generatePersonList(isPrivateStatuses));"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "px1099"
        },
        "content": "         * Adds the given list of Persons to the given Rms"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        void addToRms(Rms rms, List\u003cPerson\u003e personsToAdd) throws Exception{"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "            for(Person p: personsToAdd){"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "                rms.addPerson(p);"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         * Adds auto-generated Menu objects to the given Rms"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         * @param rms The Rms to which the Menus will be added"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         * @param isPrivateStatuses flags to indicate if details of generated persons should be set to"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         *                          private."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         /*void addToRMS(Rms rms, Boolean... isPrivateStatuses) throws Exception{"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "             addToRMS(rms, generatePersonList(isPrivateStatuses));"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         }*/"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         * Adds the given list of Menus to the given Rms"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        void addToRmsMenu(Rms rms, List\u003cMenu\u003e menusToAdd) throws Exception{"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            for(Menu m: menusToAdd){"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                rms.addMenu(m);"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "         * Adds the given list of Persons to the given Rms"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        void addEmployeesToRms(Rms rms, List\u003cEmployee\u003e employeesToAdd) throws Exception{"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            for(Employee e: employeesToAdd){"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                rms.addEmployee(e);"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "         * Adds the given list of Members to the given Rms"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        void addMembersToRms(Rms rms, List\u003cMember\u003e membersToAdd) throws Exception{"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            for(Member member: membersToAdd){"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                rms.addMember(member);"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "         * Creates a list of Persons based on the give Person objects."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e generatePersonList(Person... persons) throws Exception{"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "            for(Person p: persons){"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "                personList.add(p);"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "            return personList;"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "         * Creates a list of Employees based on the give Employee objects."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cEmployee\u003e generateEmployeeList(Employee... employees) throws Exception{"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            List\u003cEmployee\u003e employeeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            for(Employee e: employees){"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                employeeList.add(e);"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return employeeList;"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "         * Creates a list of Members based on the give Employee objects."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        List\u003cMember\u003e generateMemberList(Member... members) throws Exception{"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            List\u003cMember\u003e memberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            for(Member member: members){"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                memberList.add(member);"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return memberList;"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         * Creates a list of Menu Items based on the give Menu objects."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        List\u003cMenu\u003e generateMenuList(Menu... menus) throws Exception{"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            List\u003cMenu\u003e menuList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            for(Menu m: menus){"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                menuList.add(m);"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return menuList;"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates a list of Persons based on the flags."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isPrivateStatuses flags to indicate if all contact details of respective persons should be set to"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "         *                          private."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e generatePersonList(Boolean... isPrivateStatuses) throws Exception{"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "            for(Boolean p: isPrivateStatuses){"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "                persons.add(generatePerson(i++, p));"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates a Person object with given name. Other fields will have some dummy values."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "        Person generatePersonWithName(String name) throws Exception {"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person("
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Name(name),"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Phone(\"1\", false),"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Email(\"1@email\", false),"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"House of 1\", false),"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "                    Collections.singleton(new Tag(\"tag\"))"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         * Generates a Menu object with given name. Other fields will have some dummy values."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        Menu generateMenuWithName(String name) throws Exception {"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new Menu("
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    new MenuName(name),"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    new Price(\"5\"),"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    Collections.singleton(new Tag(\"tag\"))"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            );"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 137,
      "px1099": 24,
      "kianhong95": 293,
      "-": 565,
      "SalsabilTasnia": 137
    }
  },
  {
    "path": "test/java/seedu/addressbook/parser/ParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.commands.member.MemberListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.menu.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.*;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyInput_returnsIncorrect() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] emptyInputs \u003d { \"\", \"  \", \"\\n  \\n\" };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, emptyInputs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void unknownCommandWord_returnsHelp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"unknowncommandword arguments arguments\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test 0-argument commands"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void helpCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"help\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"clear\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ClearCommand.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void listCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"list\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ListCommand.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenulistCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String input \u003d \"listmenu\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        parseAndAssertCommandType(input, MenuListCommand.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void MemberlistCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final String input \u003d \"listmembers\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        parseAndAssertCommandType(input, MemberListCommand.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void exitCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"exit\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ExitCommand.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Test single index argument commands"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_noArgs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"delete\", \"delete \" };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"delete notAnumber \", \"delete 8*wh12\", \"delete 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"delete \" + testIndex;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final DeleteCommand result \u003d parseAndAssertCommandType(input, DeleteCommand.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_noArgs() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"view\", \"view \" };"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"view notAnumber \", \"view 8*wh12\", \"view 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 2;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"view \" + testIndex;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final ViewCommand result \u003d parseAndAssertCommandType(input, ViewCommand.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_noArgs() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"viewall\", \"viewall \" };"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"viewall notAnumber \", \"viewall 8*wh12\", \"viewall 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 3;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"viewall \" + testIndex;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        final ViewAllCommand result \u003d parseAndAssertCommandType(input, ViewAllCommand.class);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test find persons by keyword in name command"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_invalidArgs() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // no keywords"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                \"find\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                \"find \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_validArgs_parsedCorrectly() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"find \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        final FindCommand result \u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                parseAndAssertCommandType(input, FindCommand.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_duplicateKeys_parsedCorrectly() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // duplicate every keyword"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"find \" + String.join(\" \", keySet) + \" \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        final FindCommand result \u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                parseAndAssertCommandType(input, FindCommand.class);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test add person command"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_invalidArgs() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add \","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add wrong args format\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                // no phone prefix"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(\"add $s $s e/$s a/$s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                // no email prefix"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(\"add $s p/$s $s a/$s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                // no address prefix"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(\"add $s p/$s e/$s $s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_invalidPersonDataInArgs() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidName \u003d \"[]\\\\[;]\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validName \u003d Name.EXAMPLE;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidPhoneArg \u003d \"p/not__numbers\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validPhoneArg \u003d \"p/\" + Phone.EXAMPLE;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidEmailArg \u003d \"e/notAnEmail123\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validEmailArg \u003d \"e/\" + Email.EXAMPLE;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidTagArg \u003d \"t/invalid_-[.tag\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // address can be any string, so no invalid address"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        final String addCommandFormatString \u003d \"add $s $s $s a/\" + Address.EXAMPLE;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // test each incorrect person data field argument individually"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid name"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, invalidName, validPhoneArg, validEmailArg),"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid phone"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, invalidPhoneArg, validEmailArg),"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid email"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, validPhoneArg, invalidEmailArg),"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid tag"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, validPhoneArg, validEmailArg) + \" \" + invalidTagArg"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_validPersonData_parsedCorrectly() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        final Person testPerson \u003d generateTestPerson();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d convertPersonToAddCommandString(testPerson);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        final AddCommand result \u003d parseAndAssertCommandType(input, AddCommand.class);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getPerson(), testPerson);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_duplicateTags_merged() throws IllegalValueException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        final Person testPerson \u003d generateTestPerson();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d convertPersonToAddCommandString(testPerson);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : testPerson.getTags()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            // create duplicates by doubling each tag"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            input +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        final AddCommand result \u003d parseAndAssertCommandType(input, AddCommand.class);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getPerson(), testPerson);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person generateTestPerson() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person("
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                new Name(Name.EXAMPLE),"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(Phone.EXAMPLE, true),"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                new Email(Email.EXAMPLE, false),"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(Address.EXAMPLE, true),"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag1\"), new Tag(\"tag2\"), new Tag(\"tag3\")))"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(\"test person data should be valid by definition\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String convertPersonToAddCommandString(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d \"add \""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                + person.getName().fullName"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                + (person.getPhone().isPrivate() ? \" pp/\" : \" p/\") + person.getPhone().value"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                + (person.getEmail().isPrivate() ? \" pe/\" : \" e/\") + person.getEmail().value"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                + (person.getAddress().isPrivate() ? \" pa/\" : \" a/\") + person.getAddress().value;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : person.getTags()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            addCommand +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Test add menu item command"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //Testing for invalid argument cases in add menu command (invalid if the price prefix is not present)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "   /*"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void addmenuCommand_invalidArgs() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \"addmenu\","
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \"addmenu \","
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \"addmenu wrong args format\","
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                // no price prefix"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                String.format(\"addmenu $s $s\", Name.EXAMPLE, Price.EXAMPLE)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        };"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //Testing for invalid Food Item Data Argument"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void addmenuCommand_invalidFoodItemDataInArgs() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String invalidName \u003d \"[]\\\\[;]\";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String validName \u003d MenuName.EXAMPLE;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String invalidPriceArg \u003d \"p/not__numbers\";"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String validPriceArg \u003d \"p/\" + Price.EXAMPLE;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String invalidTagArg \u003d \"t/invalid_-[.tag\";"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String addmenuCommandFormatString \u003d \"addmenu $s $s\";"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // test each incorrect menu item data field argument individually"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                // invalid item name"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                String.format(addmenuCommandFormatString, invalidName, validPriceArg),"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                // invalid price"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                String.format(addmenuCommandFormatString, validName, invalidPriceArg),"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                // invalid tag"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                String.format(addmenuCommandFormatString, validName, validPriceArg) + \" \" + invalidTagArg"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        };"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //Testing for valid Food Item Data parsed correctly"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void addmenuCommand_validFoodItemData_parsedCorrectly() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Menu testMenu \u003d generateTestMenu();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String input \u003d convertMenuToAddCommandString(testMenu);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final MenuAddCommand result \u003d parseAndAssertCommandType(input, MenuAddCommand.class);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(result.getMenu(), testMenu);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void addmenuCommand_duplicateTags_merged() throws IllegalValueException {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Menu testMenu \u003d generateTestMenu();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        String input \u003d convertMenuToAddCommandString(testMenu);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (Tag tag : testMenu.getTags()) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            // create duplicates by doubling each tag"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            input +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final MenuAddCommand result \u003d parseAndAssertCommandType(input, MenuAddCommand.class);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(result.getMenu(), testMenu);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private static Menu generateTestMenu() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new Menu("
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    new MenuName(MenuName.EXAMPLE),"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    new Price(Price.EXAMPLE),"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag1\"), new Tag(\"tag2\"), new Tag(\"tag3\")))"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            );"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            throw new RuntimeException(\"test menu data should be valid by definition\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private static String convertMenuToAddCommandString(ReadOnlyMenus menu) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        String addmenuCommand \u003d \"addmenu \""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                + menu.getName().fullName"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                + \" p/\" + menu.getPrice().value;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (Tag tag : menu.getTags()) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            addmenuCommand +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return addmenuCommand;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Test add member command"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void MemberAddCommand_invalidMemberDataInArgs() {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final String invalidName \u003d \"[]\\\\[;]\";"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final String validName \u003d Name.EXAMPLE;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        // address can be any string, so no invalid address"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final String MemberAddCommandFormatString \u003d \"addmember p/\";"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        // test each incorrect person data field argument individually"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        // add subsequent tests below when more fields are added..."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                // invalid name"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                String.format(MemberAddCommandFormatString, invalidName)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        };"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "     * Utility methods"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that parsing the given inputs will return IncorrectCommand with the given feedback message."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    private void parseAndAssertIncorrectWithMessage(String feedbackMessage, String... inputs) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "            final IncorrectCommand result \u003d parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(result.feedbackToUser, feedbackMessage);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "     * Utility method for parsing input and asserting the class/type of the returned command object."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input to be parsed"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param expectedCommandClass expected class of returned command"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the parsed command object"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT extends Command\u003e T parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        final Command result \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        return (T) result;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 30,
      "px1099": 2,
      "-": 298,
      "SalsabilTasnia": 105
    }
  },
  {
    "path": "test/java/seedu/addressbook/storage/StorageFileTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.Rms;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile.StorageOperationException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.util.TestUtil.assertTextFilesEqual;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageFileTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d \"test/data/StorageFileTest\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFilePath_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        new StorageFile(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_noTxtExtension_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        new StorageFile(TEST_DATA_FOLDER + \"/\" + \"InvalidfileName\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void load_invalidFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": "        // The file contains valid xml data, but does not match the Rms class"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getStorage(\"InvalidData.txt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.load();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void load_validFormat() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "px1099"
        },
        "content": "        Rms actualAB \u003d getStorage(\"ValidData.txt\").load();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "px1099"
        },
        "content": "        Rms expectedAB \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "px1099"
        },
        "content": "        // ensure loaded Rms is properly constructed with test data"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "px1099"
        },
        "content": "        // overwrite equals method in Rms class and replace with equals method below"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(actualAB.getAllPersons(), expectedAB.getAllPersons());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(actualAB.getAllMenus(), expectedAB.getAllMenus());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullAddressBook_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_validAddressBook() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "px1099"
        },
        "content": "        Rms ab \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidData.txt\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    // getPath() method in StorageFile class is trivial so it is not tested"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the contents of two storage files are the same."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStorageFilesEqual(StorageFile sf1, StorageFile sf2) throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTextFilesEqual(Paths.get(sf1.getPath()), Paths.get(sf2.getPath()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile getStorage(String fileName) throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile(TEST_DATA_FOLDER + \"/\" + fileName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile getTempStorage() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile(testFolder.getRoot().getPath() + \"/\" + \"temp.txt\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private Rms getTestAddressBook() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "px1099"
        },
        "content": "        Rms ab \u003d new Rms();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ab.addPerson(new Person(new Name(\"John Doe\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Phone(\"98765432\", false),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Email(\"johnd@gmail.com\", false),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Address(\"John street, block 123, #01-01\", false),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                                Collections.emptySet()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ab.addPerson(new Person(new Name(\"Betsy Crowe\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Phone(\"1234567\", true),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Email(\"betsycrowe@gmail.com\", false),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Address(\"Newgate Prison\", true),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"friend\"), new Tag(\"criminal\")))));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "       // ab.addMenu(new Menu(new Name(\"Pizza\"), new Price(\"5\"), Collections.emptySet()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 9,
      "-": 102,
      "SalsabilTasnia": 3
    }
  },
  {
    "path": "test/java/seedu/addressbook/util/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts whether the text in the two given files are the same. Ignores any"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * differences in line endings"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertTextFilesEqual(Path path1, Path path2) throws IOException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list1 \u003d Files.readAllLines(path1, Charset.defaultCharset());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list2 \u003d Files.readAllLines(path2, Charset.defaultCharset());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.join(\"\\n\", list1), String.join(\"\\n\", list2));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //assertEquals(String.join(\"\\n\", list1), String.join(\"\\n\", list2));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "SalsabilTasnia": 2
    }
  }
]
