[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:imagesDir: docs/images]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S1-F09-2/main[image:https://travis-ci.org/CS2113-AY1819S1-F09-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/se-edu/addressbook-level3?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level3\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/d4a0954383444a8db8cb26e5f5b7302c[Codacy Badge]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S1-F09-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S1-F09-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "image::homepage.png[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003c\u003cAboutUs#, *ABOUT US*\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "||"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003c\u003cUserGuide#,*USER GUIDE*\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "||"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003c\u003cDeveloperGuide#, *DEVELOPER GUIDE*\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "||"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003c\u003cContactUs#, *CONTACT US*\u003e\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003d\u003d Welcome to RMS Homepage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Restaurant Management System (RMS) promises to increase the quality of your service and enhance your work experience.  The Command Line Interface makes RMS highly efficient as it reduces the number of steps taken to perform a task to just one (or two).  It is your one-stop solution that can be used for serving customers, updating menu as well as storing and tracking important data. In a nutshell, RMS guarantees to be a faster, safer and smarter choice of management for any restaurants and fast food chains."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* This is a Desktop Application for Restaurant Management System. It is making use of Command Line Interface"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* Our primary target audience for RMS are *Restaurants* and *Fast Food Chains*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* RMS contains support for Build Automation using Gradle and for Continuous Integration using Travis CI, with coverage checks using Coveralls."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003d Who we are"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* Restaurant Management System was developed by CS2113-AY1819S1-F09-2 team. We are a team based in the School of Computing, National University of Singapore. For further information, visit \u003c\u003cAboutUs#, ABOUT US\u003e\u003e page."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* Restaurant Management System was developed based on the souce code of an"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "https://github.com/se-edu/addressbook-level4[Address Book] created by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "SE-EDU initiative."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* Some parts of this sample application was inspired by the excellent"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by Marco Jakob"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 4,
      "-": 16,
      "SalsabilTasnia": 18
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "mainClassName \u003d \u0027seedu.addressbook.Main\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027src\u0027]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027src\u0027]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027test/java\u0027]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "px1099"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "px1099"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "px1099": 11,
      "-": 99
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Restaurant Management System was developed by the https://github.com/CS2113-AY1819S1-F09-2/main[CS2113-AY1819S1-F09-2] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d\u003d Tay Kang Ming"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "image::kangmingtay.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "{empty} [https://github.com/kangmingtay[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Role: Team Leader +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Responsibilities: Responsible for overall project coordination."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d\u003d Salsabil Tasnia Ali Nikita MD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::salsabiltasnia.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "{empty}[https://github.com/SalsabilTasnia[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Role: Developer, Documentation Lead +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Responsibilities: Responsible for the menu feature."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d\u003d Pham Quang Minh"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "image::px1099.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "{empty}[https://github.com/px1099[github]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Responsibilities: Responsible for maintaining the code quality \u0026 testing. + Order Feature"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d\u003d Ang Wei Ming"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image::angwm.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "{empty}[https://github.com/AngWM[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Responsibilities: In charge of the Statistics feature"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d\u003d Lim Kian Hong"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "image::kianhong95.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "{empty}[https://github.com/kianhong95[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Responsibilities: In charge of Employee Feature"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 52,
      "px1099": 3,
      "-": 2
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003dContact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level3/issues[issue tracker]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "SalsabilTasnia": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d Restaurant Management System - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AngWM"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-F09-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `CS2113-AY1819S1-F09-2`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "The Restaurant Management System (RMS) provides restaurants with a more efficient way to manage their operations. It has a wide variety of features which cater to different roles in a restaurant. In line with Singapore\u0027s \"Smart Nation\" movement, the RMS aims to digitise the restaurant business and make day-to-day operations smoother and simpler. Jump to \u003c\u003cSetting up\u003e\u003e to get started with the development."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ". Run the `seedu.addressbook.Main` and try a few commands"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "//`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "//* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "* `Messages` : Used by many classes to write user visible message."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "* `Utils` : Contains all the utility methods."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "* `Name` : The parent class to the MemberName and EmployeeName classes."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "The rest of the App consists of four key components."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "* \u003c\u003cDesign-Data,*`Data`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Below contains the description for each of the four key components:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "//.Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "//image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "//[discrete]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "//The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "//.Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "//image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "//Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "//The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "//.Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "//image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "//Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "//The sections below give more details of each component."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "//[[Design-Ui]]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "//.Structure of the UI Component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "//image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "//*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "//The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "//The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "//The `UI` component,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "//* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "//* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "//* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "px1099"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "px1099"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "px1099"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "px1099"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "px1099"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "px1099"
        },
        "content": "link:{repoURL}/src/seedu/addressbook/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "px1099"
        },
        "content": ".  `Logic` uses the `Parser` class to parse the user command."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "px1099"
        },
        "content": ".  This results in a `Command` object which is executed by `Logic`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "px1099"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a new member) and/or raise events."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "px1099"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "px1099"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "px1099"
        },
        "content": "Each of the `CommandResult` class is used as a specific constructor to correctly handle the class of the returned list"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "px1099"
        },
        "content": "of result. +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "px1099"
        },
        "content": "e.g. `OrderCommandResult` constructs a `CommandResult` object that only contains a result message and a list of orders"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "px1099"
        },
        "content": "generated from the ordering commands."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "//Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "//.Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "//image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "//[[Design-Model]]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "//.Structure of the Model Component"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "//image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "//*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "//The `Model`,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "//* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "//* stores the Address Book data."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "//* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "//* does not depend on any of the other three components."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "//As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "// +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "//image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "//[[Design-Storage]]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/seedu/addressbook/storage/StorageFile.java[`StorageFile.java`]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "//[[Design-Commons]]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "//Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "px1099"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d\u003d Adding a new order"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "px1099"
        },
        "content": "To avoid writing a long command line when ordering a long list of dishes, a draft ordering system is implemented."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "px1099"
        },
        "content": "* When the ordering draft is initialized or cleared, the member `draftOrder` in `Rms.txt` is loaded with a new object"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "px1099"
        },
        "content": "of class `Order`. It is initialize with an empty list of dish and a pseudo-empty customer field that is not `null`."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "px1099"
        },
        "content": "* By using the draft order command classes, the ordering draft can be edited (e.g. picking the customer from the member"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "px1099"
        },
        "content": "list if they present their membership card, pick the dish from the menu list one by one before confirming the order)."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "px1099"
        },
        "content": "* Once an order is confirmed, the ordering time is recorded and the total price is calculated to create a new `Order`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "px1099"
        },
        "content": "object that has the same customer and list of dishes fields as the ordering draft to be added to the order list, and"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "px1099"
        },
        "content": "the ordering draft is cleared afterward."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d\u003d Saving and Loading the order list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "px1099"
        },
        "content": "The order list is saved by using an adaptive class that convert the existing data in the objects to a jaxb-friendly"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "px1099"
        },
        "content": "class. This means that the order list stores every information of the owner of an order."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "px1099"
        },
        "content": "However, the loading the order list cannot be implemented by creating a list of new `Order` objects that contains a new"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "px1099"
        },
        "content": "`Member` object in its customer field based on the data stored in the storage file. This is because the created"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "px1099"
        },
        "content": "customer object are not the same object as the original `Member` object in the member list, so any changes made to the"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "px1099"
        },
        "content": "member list will not get reflected in the order (e.g. not showing the changes of address or phone number if these"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "px1099"
        },
        "content": "fields are to be recorded to the membership database)."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "px1099"
        },
        "content": "To solve this problem, the order list will retrieve the correct object in the loaded member list at the start of the"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "px1099"
        },
        "content": "program using the method `retrieveMember()` in `AdaptedOrder.java`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d\u003d [Proposed] Program State Control"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "px1099"
        },
        "content": "As there is multiple functionality in the program, it is proposed that a program state control functionality should be"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "px1099"
        },
        "content": "implemented to assist the user navigate through the program. The command keywords can be simplified and the help"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "px1099"
        },
        "content": "message can be specifically wrote in each states to reduce the burdens of remembering very long line of commands."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "px1099"
        },
        "content": "This can be done by introducing a status variable in the `Logic` module, creating command to change the state variable"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "px1099"
        },
        "content": "and adjusting the returning command in the `Parser` based on that variable."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "//The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "//It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "//Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "//* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "//* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "//These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "//Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "//Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "//image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "//Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "//image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "//Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "//image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "//If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "//Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "//image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "//If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "//The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "//image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "//The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "//If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "//Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "//image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "//Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "//image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "//The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "//image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "//** Pros: Easy to implement."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "//** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "//* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "//** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "//** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "//* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "//** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "//** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "//* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "//** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "//** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "//_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "//We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "//* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "//* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "//* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "//*Logging Levels*"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "//* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "//* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "//* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "//* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "//[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "//Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d Documentation"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "//We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "//We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "//See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "//Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "//See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "//We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "//Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "//.  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "//.  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "//.  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "//.  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "//.Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "//image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "//[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "//The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "//[TIP]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "//Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "//[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "//.List of site-wide attributes"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "//|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "//|`site-name`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "//|The name of the website."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "//If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "//|_not set_"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "//|`site-githuburl`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "//|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "//|_not set_"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "//|`site-seedu`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "//|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "//This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "//|_not set_"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "//[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "//Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "//Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "//[TIP]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "//Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "//[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "//.List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "//|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "//|`site-section`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "//|Site section that the document belongs to."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "//This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "//One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "//_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "//|_not set_"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "//|`no-site-header`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "//|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "//|_not set_"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "//The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "//You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "//The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "//These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "//[WARNING]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "//Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "//You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "//The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "We have 1 type of test:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "//.  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "//.. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "//.. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "e.g. `seedu.addressbook.commons.UtilsTest`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "e.g. `seedu.addressbook.storage.StorageFileTest`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "e.g. `seedu.addressbook.logic.LogicTest`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "//See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "//We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "//We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "//When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "//Here are the steps to create a new release."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "//.  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "//.  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "//.  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "//.  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "//A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "//a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "//b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "//[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "//[appendix]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "//Suggested path for new programmers:"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "//1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "//2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "//[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "//Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "//[discrete]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "//*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "//[TIP]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "//Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "//. Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "//****"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "//* Hints"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "//** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "//** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "//* Solution"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "//** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "//** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "//** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "//** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "//****"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "//[discrete]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "//*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "//[TIP]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "//Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "//. Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "//****"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "//* Hints"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "//** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "//** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "//**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "//* Solution"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "//** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "//** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "//** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "//** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "//****"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "//[discrete]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "//*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "//[TIP]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "//Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "//. Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "//**Before**"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "//image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "//**After**"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "//image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "//****"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "//* Hints"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "//** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "//** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "//** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "//* Solution"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "//** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "//** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "//*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "//****"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "//. Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "//**Before**"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "//image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "//**After**"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "//image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "//****"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "//* Hints"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "//** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "//** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "//* Solution"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "//** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "//** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "//** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "//*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "//*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "//** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "//*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "//****"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "//. Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "//**Before**"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "//image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "//**After**"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "//image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "//****"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "//* Hints"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "//** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "//** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "//* Solution"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "//** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "//** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "//** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "//** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "//** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "//****"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "//[discrete]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "//*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "//[TIP]"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "//Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "//. Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "//+"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "//****"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "//* Hint"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "//** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "//** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "//* Solution"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "//** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "//****"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "//[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "//By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "//*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "//Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "//Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "//Examples:"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "//* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "//Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "//* `remark 1 r/` +"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "//Removes the remark for the first person."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "//Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "//. Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "//. Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "//. Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "//. Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "//Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "//. Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "//. Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "//. Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "//. Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "//. Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "//for `RemarkCommandParser`."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "//. Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "//Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "//. Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "//. Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "//. Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "//We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "//. Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "//. Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "//. Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "//Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "//. Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "//. You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "//. Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "//We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "//. Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "//. Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "//Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "//. Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "//. Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "//Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "//. Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "//. Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "//We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "//**Main:**"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "//. Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "//**Tests:**"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "//. Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "//See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a restaurant with high volume of orders"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage restaurant faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "|`* * *` |Cashier |add , edit and delete orders made |collate the customer’s orders and send it to the kitchen"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "|`* *` |Cashier |view all members of the restaurant |keep track of which customer has a membership at the restaurant"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |Manager |keep track of the restaurant business statistics such as daily revenue |understand if the restaurant is making a loss or not"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |Manager |keep track of employees wages | know how much I have to pay or how much I have paid to restaurant employees"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |Manager |keep track of which menu item are sold the most | know which food is the best seller"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "|`* *` |Manager |add, edit and delete items from the menu |keep my restaurant menu interesting"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "|`* *` |Manager |list employees  |to view the details of the employees working in the restaurant"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "|`* * *` | Manager | add, edit and delete employees from the system |to manage information of the employees working in the restaurant"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "|`* * *` |Chef |view all the orders made  |know which order I need to prepare next"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "|`* * *` |Chef |update the order status  |let the customers know that their orders are ready"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "(For all use cases below, the *System* is the `Restaurant Management System (RMS)`, unless specified otherwise)"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d\u003d Use case: Taking a Customer’s Orders"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "Actor: Manager and Cashier"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User chooses to view the menu list"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "2.  FMS shows the list of items in the menu"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "px1099"
        },
        "content": "3.  User informs the menu item and the quantity they wish to order"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "px1099"
        },
        "content": "4.  FMS put that item and its quantity in the order"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "px1099"
        },
        "content": "5.  Repeat step 1 to 4 until user confirm the order"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "px1099"
        },
        "content": "6.  FMS acknowledge the order and add it to the system"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "px1099"
        },
        "content": "* 1a. If a customer is in the restaurant\u0027s member list, user can record them"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "px1099"
        },
        "content": "in the order so that bonus points can be accumulated when the order is confirmed. +"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "px1099"
        },
        "content": "Return to step 1."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "px1099"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "px1099"
        },
        "content": "* 2a. Menu list too long or does not have what the customer exactly wants +"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "px1099"
        },
        "content": "** 2a1. User enters the find command and searches for the item customer is looking for"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "px1099"
        },
        "content": "2a2. FMS returns the list of items searched by the command the user entered"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "px1099"
        },
        "content": "Return to step 3."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Update Menu"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "Actor: Manager"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User enters the command to update menu"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "2.  FMS displays a message telling user the (three) ways he/she can update the menu"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User wishes to edit an existing item in the menu"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "4.  User enters index of the item that should be updated and edits the details"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "5.  System updates that item in that particular index of the menu list"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. User wishes to delete an item by viewing the existing menu list"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. User chooses to view the menu list"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "3a2. FMS displays the existing menu list"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "3a3. User looks for the INDEX of the particular item to be deleted and deletes the item"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "3a4. FMS deletes the food item from the existing list"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "* 3b. User wishes to delete an item from the menu"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "** 3b1. User searches for the menu item to be deleted"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "3b2. FMS shows the list of items with that menu name"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "3b3. User looks for the INDEX of the particular item to be deleted and deletes the item"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "3b4. FMS deletes the food item from the existing list"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "* 3c. User wishes to add new item to the menu"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "** 3c1. User enters the new item into the menu"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "3c2. FMS adds the entered menu to the existing menu list"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Use case: List employees"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "System: Restaurant Management System (RMS) +"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Use Case: List employees +"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Actor: Restaurant Manager +"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Preconditions: User has started up the system. +"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* List of employees will be displayed."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "1.    User requests to list employees."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "2.    RMS displays a list of the employees."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "+"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: View employee statistics"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "Actor: Manager"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User chooses to view the employee statistics"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "2.  RMS shows overview employee statistics"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: View member statistics"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "Actor: Manager"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User chooses to view the member statistics"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "2.  RMS shows overview member statistics"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: View menu statistics"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "Actor: Manager"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User chooses to view the menu statistics"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "2.  RMS shows overview menu statistics"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: View order statistics"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "Actor: Manager"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User chooses to view the order statistics"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "2.  RMS shows overview order statistics"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* 1a. RMS detects that there are currently no employees recorded."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "** 1a1. RMS shows a message that says there are currently no employees recorded."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "+"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Use case: Add employee"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Actor: Restaurant Manager +"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Preconditions: \"List employee\" use case was used before this use case. +"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* New employee is added to the RMS."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "1.    User requests to add a new employee with the required parameters."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "2.    RMS adds a new employee to the list with the parameters that were specified by the User."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "+"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* 1a. RMS detects that an invalid command format has been entered."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "** 1a1. RMS displays an error that says the command format is invalid."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "** 1a2. RMS displays information on the proper use of the command along with an example."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "+"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* 1b. RMS detects that there is an attempt to add a duplicate employee."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "** 1b1. RMS displays an error that says the employee already exists in Rms."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "+"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Use case: Delete employee"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Actor: Restaurant Manager +"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Preconditions: \"List employee\" use case was used before this use case. +"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* The specified employee will be deleted from the RMS."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "1.    User requests to delete an employee by using the index as shown on the list of employees."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "2.    RMS deletes an employee using the specified index."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "+"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* 1a. RMS detects that an invalid index has been entered."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "** 1a1. RMS displays an error that says the index provided is invalid."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "+"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Use case: Edit employee"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Actor: Restaurant Manager +"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Preconditions: \"List employee\" use case was used before this use case. +"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Details of an employee is edited."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "1.    User requests to edit an existing employee at the specified index with the optional parameters provided."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "2.    RMS edits the employee at the specified index with the optional parameters that were provided."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "+"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* 1a. RMS detects that an invalid command format has been entered."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "** 1a1. RMS displays an error that says the command format is invalid."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "** 1a2. RMS displays information on the proper use of the command along with an example."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "+"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* 1b. RMS detects that an invalid index has been entered."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "** 1b1. RMS displays an error that says the index provided is invalid."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "+"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ". Quality requirement: The system should be efficient enough for restaurants which want to add a management system for their orders. The orders will be processed in less than 5 clicks."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ". Performance requirements: The system should respond within three seconds as speed and efficiency is important for a restaurant."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ". Project scope: The product is not developed for the customers of the restaurants to use."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "//[appendix]"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "//[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "//Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "//[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "//A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "//[appendix]"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "//*Product Name*"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "//Author: ..."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "//Pros:"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "//* ..."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "//* ..."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "//Cons:"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "//* ..."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "//* ..."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "//[appendix]"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "//Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "//These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "//. Initial launch"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "//.. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "//.. Double-click the jar file +"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "//   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "//. Saving window preferences"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "//.. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "//.. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "//   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "//_{ more test cases ... }_"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "//. Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "//.. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "//.. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "//   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "//.. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "//   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "//.. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "//   Expected: Similar to previous."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "//_{ more test cases ... }_"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "//\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "//. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "//.. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "//_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 79,
      "px1099": 83,
      "AngWM": 1,
      "kianhong95": 101,
      "-": 856,
      "SalsabilTasnia": 77
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d Restaurant Management System (RMS) - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-F09-2/main.git"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "By: `CS2113-AY1819S1-F09-2`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "The Restaurant Management System (RMS) provides restaurants with a more efficient way to manage their operations. It has a wide variety of features which cater to different roles in a restaurant. In line with Singapore\u0027s \"Smart Nation\" movement, the RMS aims to digitise the restaurant business and make day-to-day operations smoother and simpler. Jump to \u003c\u003cSetting up\u003e\u003e to get started."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Restaurant Management System."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ".  Import the file into Intellij."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ".  Find the project pane (usually located at the left side)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ".  Open up src/seedu.addressbook folder."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ".  Right Click on `Main`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ".  Click `Run Main.main()`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ".  The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* *`listmenu`* : lists all menu items"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* **`addmember`**`n/John Doe p/98765432 e/johnd@example.com d/10182017` : adds a member named `John Doe` to the Restaurant Management System."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "* *`listorder`* : lists all orders in the order list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "* **`deleteorder`**`3` : deletes the 3rd order shown in the last shown order list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*How It Works*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "When the application is first started, users have to choose"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " which state it wants to enter. There are 5 choices to pick from"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " :"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "1. Menu"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "2. Order"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "3. Customers"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "4. Employees"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "5. Statistics"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Menu"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003d\u003d\u003d List Menu"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Shows a list of all the menu items. +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Each menu item include details of: menu item, price and any relevant tags. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Format: `listmenu`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003d\u003d\u003d View All Menu"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Shows the detail of the a menu item with a particular index. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Format: `viewallmenu INDEX`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* List the current food items in the menu"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003d\u003d\u003d Add Menu Item"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Add a new item to the menu. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Format: `addmenu NAME p/PRICE [t/TAG]`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* Adds the new menu item into the menu list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "add Cheese Fries p/3.50 t/New item +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "System adds Cheese Fries to the existing menu."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//\u003d\u003d\u003d\u003d Edit Menu Item"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//Edit a menu item on the menu +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//Format: `editmenu INDEX [n/NAME] //[p/PRICE] [t/TAG]`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//* Edits the name, price and tag of //food item in that particular index //(User able to edit either one or all //three attributes of the particular //food item)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//Example: +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//edit 3 Cheese Fries with bacon p/5.00 //t/Limited Offer +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//System updates Cheese Fries, which is //in index 3, to Cheese Fries with //bacon and changes the price from //$3.50 to $5.00"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Item"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Delete an item on the menu +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Format: `deletemenu INDEX`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* Deletes the menu item in that particular index"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "view menu +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "delete 1 +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "System deletes food item in index 1 from the menu. +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "find Cheese Fries +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Delete 3 +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "System deletes Cheese Fries in index 3 from the menu."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "\u003d\u003d\u003d\u003d Find Menu"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Finds the menu item(s) related to the keywords typed in by the user. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Format: `findmenu KEYWORD [MORE KEYWORDS]`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* A list of menu items with names related to the keyword(s) will be displayed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* The command is case insensitive."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "* Order of keywords do not matter."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "find Burger COKE fries +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "Returns Double Cheese Burger, Veggie Burger, Coke, Coke Zero, Fries, Curly Fries"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//\u003d\u003d\u003d\u003d Update Menu"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//Shows options that you can use to update the menu. +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//Format: update"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//* Update Menu will show user what he/ she can do to update menu."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//* Menu is updated by adding, editing or deleting food items from menu list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Members"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Add Member"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Add a new member to the RMS +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Format: addmember NAME"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "\u003d\u003d\u003d\u003d List Member"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Shows a list of all the members in the RMS. Displays the NAME and POINTS of each member. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Format: listmembers"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Member"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Edit membership details of a member in the RMS +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: edit NAME [p/PHONE_NUMBER] [e/EMAIL_ADDRESS][d/DATE_JOINED][pt/POINTS]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Delete Member"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Delete membership details of a member in the RMS +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: delete NAME"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Find Member"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Find membership details of a member in the RMS +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: find NAME"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Employees"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d View Employees"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Show a list of all the employees on the RMS. +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: `listemp`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Add Employee"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Adds a new employee to the RMS. +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: `addemp n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS pos/POSITION`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " `addemp Peter Lee p/91234567 e/PeterLee89@rms.com a/Clementi Ave 2, Blk 543 #13-12 pos/Cashier`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Employee"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Edit details of an employee. +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: `editemp INDEX [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [pos/POSITION]`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Edits the employee at the specified `INDEX`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Parameters in square brackets are optional."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* At least one of the optional parameters must be provided."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* The index must be a positive integer `1, 2, 3 ...`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "`edit Joe Bob pos/Cashier` +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Edits the value of Joe Bob to Cashier"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Delete Employee"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Delete and employee. +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: delemp INDEX"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* Deletes the employee at the specified `INDEX`."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* The index refers to the index number shown in the displayed employee list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* The index must be a positive integer `1, 2, 3 ...`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* `listemp` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "* `delemp 1` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Deletes the 1st employee in the employee list."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d Calculate Wages"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Calculates the wage of an employee. +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "`Format calcwage NAME`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "`calcwage Joe Bob`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d\u003d Order"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d\u003d\u003d Add Order"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "px1099"
        },
        "content": "To add new order to the order list, a draft must be completed before adding it to the order list. +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "px1099"
        },
        "content": "To do so, dishes must be added into the draft, and then it can be added into the order list after"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "px1099"
        },
        "content": "the draft is confirmed."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "px1099"
        },
        "content": "Registered customer of the member list can be added into the order draft to accumulate member points"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "px1099"
        },
        "content": "once the order is confirmed."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "px1099"
        },
        "content": "* *Display Draft And List Of Commands For Adding* +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "px1099"
        },
        "content": "Display the current draft and the list of order draft commands used for adding a new order +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "px1099"
        },
        "content": "Format: `addorder`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "px1099"
        },
        "content": "* *Pick A Member As The Customer Of The Draft* +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "px1099"
        },
        "content": "Select a member from the last shown member list to be the customer of the draft order. +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "px1099"
        },
        "content": "The customer is retrieved with the index of last displayed member list. +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "px1099"
        },
        "content": "Format: `draftcustomer INDEX`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "px1099"
        },
        "content": "* *Edit A Dish Item Of The Draft* +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "px1099"
        },
        "content": "By picking a dish from the last shown menu and state the quantity to be added,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "px1099"
        },
        "content": "a dish item can be added, deleted or edited in the draft order. +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "px1099"
        },
        "content": "The dish item is retrieved with the index of last displayed menu. +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "px1099"
        },
        "content": " ** If the quantity is set to 0, then the dish will be removed from the draft. +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "px1099"
        },
        "content": " ** If the quantity of a dish that is currently not in the draft is set to a"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "px1099"
        },
        "content": " positive integer, then the dish and its quantity will be added into the draft."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "px1099"
        },
        "content": "Format: `draftdish INDEX q/QUANTITY`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "px1099"
        },
        "content": "* *Clear Draft* +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "px1099"
        },
        "content": "Clear all details of the draft order. +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "px1099"
        },
        "content": "Format: `cleardraft`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "px1099"
        },
        "content": "* *ConfirmDraft* +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "px1099"
        },
        "content": "Confirm the draft and add it to the order list. +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "px1099"
        },
        "content": "Once it is confirmed, the ordered dish items in the"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "px1099"
        },
        "content": "newly added order can no longer be changed. +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "px1099"
        },
        "content": "+"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "px1099"
        },
        "content": "Format: `confirmdraft`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Order"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "px1099"
        },
        "content": "Delete an order. +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "px1099"
        },
        "content": "The deleted order is specified by the index of that order on the last displayed order list. +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "px1099"
        },
        "content": "Format: `deleteorder INDEX`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d\u003d\u003d Clear Order"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "px1099"
        },
        "content": "Clear the entire order list. +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "px1099"
        },
        "content": "Format: `clearorder`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d\u003d\u003d List Orders"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "px1099"
        },
        "content": "Shows a list of all the current orders. +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "px1099"
        },
        "content": "Each order include details of: customer, ordered time, total price and the list of dish items and quantities ordered +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "px1099"
        },
        "content": "Only the non-private data of customer will be showed. +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "px1099"
        },
        "content": "Format: `listorder`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Statistics"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d View Order Statistics"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Display the order statistics overview +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: vieworderstats"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d\u003d View Member Statistics"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Display the member statistics overview +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "Format: viewmemberstats"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "Data from the Restaurant Management System are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Restaurant Management System folder."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Menu"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "*View Menu* : `viewmenu`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "*Find Menu* : `findmenu KEYWORD [MORE KEYWORDS]`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//*Update Menu* : `update`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "*Add Item* : `addmenu NAME p/PRICE [t/TAG]`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "*Edit Item* : `editmenu INDEX [n/NAME] [p/PRICE] [t/TAG]`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "*Delete Item* : `deletemenu INDEX`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Employees"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*View Employees* : `add n/NAME p/PHONE_NUMBER pos/POSITION`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Add Employee* : `add n/NAME p/PHONE_NUMBER pos/POSITION`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Edit Employee* : `edit NAME [p/PHONE_NUMBER] [pos/POSITION]`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Delete Employee* : `delete NAME`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*Calculate Wages* : `calcwage NAME`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Members"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "*Add Member* : `addmember NAME`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "*List Member* : `listmembers`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "*Edit Member* : `editmember NAME`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "*Delete Member* : `deletemember NAME`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "*Find Member* : `findmember NAME`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "px1099"
        },
        "content": "\u003d\u003d\u003d Order"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "px1099"
        },
        "content": "* *Add Order:*"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "px1099"
        },
        "content": "** *Display Add Order Commands*: `addorder`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "px1099"
        },
        "content": "** *Select Member As Customer Of The Draft*: `draftcustomer INDEX` +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "px1099"
        },
        "content": "e.g. `draftcustomer 2`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "px1099"
        },
        "content": "** *Edit Dishes In The Draft*: `draftdish INDEX q/QUANTITY` +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "px1099"
        },
        "content": "e.g. `draftdish 4 q/1`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "px1099"
        },
        "content": "** *Clear The Draft*: `cleardraft`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "px1099"
        },
        "content": "** *Confirm Draft*: `confirmdraft`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "px1099"
        },
        "content": "* *Delete Order* : `deleteorder INDEX` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "px1099"
        },
        "content": "e.g. `deleteorder 3`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "px1099"
        },
        "content": "* *Clear Order List* : `clearorder`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "px1099"
        },
        "content": "* *List All Orders* : `listorder`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "\u003d\u003d\u003d Statistics"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*View Order Statistics* : `vieworderstats`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "*View Member Statistics* : `viewmemberstats`"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 13,
      "px1099": 99,
      "kianhong95": 165,
      "-": 60,
      "SalsabilTasnia": 63
    }
  },
  {
    "path": "src/seedu/addressbook/Main.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.ui.Gui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.ui.Stoppable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Main entry point to the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application implements Stoppable{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Version info of the program. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String VERSION \u003d \"Restaurant Management System - Version 1.0\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Gui gui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) throws Exception{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        gui \u003d new Gui(new Logic(), VERSION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        gui.start(primaryStage, this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super.stop();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "SalsabilTasnia": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import static seedu.addressbook.ui.Gui.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.Rms;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //protected List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "    protected Rms rms;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    protected List\u003c? extends ReadOnlyMenus\u003e relevantMenus;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    protected List\u003c? extends ReadOnlyMember\u003e relevantMembers;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": "    protected List\u003c? extends ReadOnlyOrder\u003e relevantOrders;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected List\u003c? extends ReadOnlyEmployee\u003e relevantEmployees;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private int targetIndex \u003d -1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param targetIndex last visible listing index of the target person"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command(int targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setTargetIndex(targetIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param personsDisplayed used to generate summary"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return summary message for persons displayed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getMessageForPersonListShownSummary(List\u003c? extends ReadOnlyPerson\u003e personsDisplayed) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, personsDisplayed.size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of employees."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param employeesDisplayed used to generate summary"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @return summary message for employees displayed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static String getMessageForEmployeeListShownSummary(List\u003c? extends ReadOnlyEmployee\u003e employeesDisplayed) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return String.format(Messages.MESSAGE_EMPLOYEES_LISTED_OVERVIEW, employeesDisplayed.size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of menu."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @param menusDisplayed used to generate summary"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @return summary message for menus displayed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static String getMessageForMenuListShownSummary(List\u003c? extends ReadOnlyMenus\u003e menusDisplayed) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return String.format(Messages.MESSAGE_MENUS_LISTED_OVERVIEW, menusDisplayed.size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of members."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @param membersDisplayed used to generate summary"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @return summary message for members displayed"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static String getMessageForMemberListShownSummary(List\u003c? extends ReadOnlyMember\u003e membersDisplayed) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return String.format(Messages.MESSAGE_MEMBERS_LISTED_OVERVIEW, membersDisplayed.size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of orders."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @param ordersDisplayed used to generate summary"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @return summary message for orders displayed"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static String getMessageForOrderListShownSummary(List\u003c? extends ReadOnlyOrder\u003e ordersDisplayed) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return String.format(Messages.MESSAGE_ORDERS_LISTED_OVERVIEW, ordersDisplayed.size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructs a string from the current status of the draft order."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @return draft order details"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "px1099"
        },
        "content": "    protected String getDraftOrderAsString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final ReadOnlyOrder draftOrder \u003d rms.getDraftOrder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return Messages.MESSAGE_DRAFT_ORDER_DETAILS + \"\\n\" + draftOrder.getDraftDetailsAsText();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    //Note: it is better to make the execute() method abstract, by replacing the above method with the line below:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    //public abstract CommandResult execute();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Supplies the data the command will operate on."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void setData(Rms rms,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "px1099"
        },
        "content": "                        List\u003c? extends ReadOnlyPerson\u003e relevantPersons,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "px1099"
        },
        "content": "                        List\u003c? extends ReadOnlyMenus\u003e relevantMenus,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "px1099"
        },
        "content": "                        List\u003c? extends ReadOnlyOrder\u003e relevantOrders,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                        List\u003c? extends ReadOnlyMember\u003e relevantMembers,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                        List\u003c? extends ReadOnlyEmployee\u003e relevantEmployees) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        this.rms \u003d rms;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.relevantMenus \u003d relevantMenus;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.relevantOrders \u003d relevantOrders;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantMembers \u003d relevantMembers;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.relevantEmployees \u003d relevantEmployees;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the the target person in the last shown list from the given arguments."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    protected ReadOnlyPerson getTargetPerson() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return relevantPersons.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Extracts the the target menu item in the last shown menu list from the given arguments."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    protected ReadOnlyMenus getTargetMenu() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return relevantMenus.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Extracts the the target member in the last shown list from the given arguments."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    protected ReadOnlyMember getTargetMember() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return relevantMembers.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Extracts the the target order in the last shown order list from the given arguments."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "px1099"
        },
        "content": "    protected ReadOnlyOrder getTargetOrder() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return relevantOrders.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Extracts the target order in the last shown employee list from the given arguments."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected ReadOnlyEmployee getTargetEmployee() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return relevantEmployees.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getTargetIndex() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTargetIndex(int targetIndex) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 21,
      "px1099": 48,
      "kianhong95": 23,
      "-": 74,
      "SalsabilTasnia": 14
    }
  },
  {
    "path": "src/seedu/addressbook/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Attendance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The feedback message to be shown to the user. Contains a description of the execution result */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The list of persons that was produced by the command */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /** The list of employees that was produced by the command */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final List\u003c? extends ReadOnlyEmployee\u003e relevantEmployees;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /** The list of attendances that was produced by the command */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final List\u003c? extends Attendance\u003e relevantAttendances;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** The menu list produced by the menu command*/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final List\u003c? extends ReadOnlyMenus\u003e relevantMenus;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /** The list of members that was produced by the command */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private final List\u003c? extends ReadOnlyMember\u003e relevantMembers;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** The list of orders that was produced by the order command */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private final List\u003c? extends ReadOnlyOrder\u003e relevantOrders;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** Old AB3 command result constructor for result which do not return person list*/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        relevantPersons \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        relevantMenus \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "        relevantOrders \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        relevantMembers \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        relevantEmployees \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        relevantAttendances \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** Old AB3 command result constructor for result which return person list*/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, List\u003c? extends ReadOnlyPerson\u003e relevantPersons) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.relevantMenus \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.relevantOrders \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.relevantMembers \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.relevantEmployees \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.relevantAttendances \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** Command result constructor used by child classes for Rms commands*/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public CommandResult(String feedbackToUser,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "px1099"
        },
        "content": "                         List\u003c? extends ReadOnlyPerson\u003e relevantPersons,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "px1099"
        },
        "content": "                         List\u003c? extends ReadOnlyMenus\u003e relevantMenus,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "px1099"
        },
        "content": "                         List\u003c? extends ReadOnlyOrder\u003e relevantOrders,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                         List\u003c? extends ReadOnlyMember\u003e relevantMembers,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                         List\u003c? extends ReadOnlyEmployee\u003e relevantEmployees,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                         List\u003c? extends Attendance\u003e relevantAttendances) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.relevantMenus \u003d relevantMenus;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.relevantOrders \u003d relevantOrders;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.relevantMembers \u003d relevantMembers;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.relevantEmployees \u003d relevantEmployees;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.relevantAttendances \u003d relevantAttendances;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Returns list of persons relevant to the command result, if any."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e getRelevantPersons() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.ofNullable(relevantPersons);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Returns list of menu items relevant to the command result, if any."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyMenus\u003e\u003e getRelevantMenus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return Optional.ofNullable(relevantMenus);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AngWM"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Returns list of orders relevant to the command result, if any."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyOrder\u003e\u003e getRelevantOrders() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return Optional.ofNullable(relevantOrders);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Returns list of members relevant to the command result, if any."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyMember\u003e\u003e getRelevantMember() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return Optional.ofNullable(relevantMembers);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Returns list of employees relevant to the command result, if any."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyEmployee\u003e\u003e getRelevantEmployee() { return Optional.ofNullable(relevantEmployees);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Returns list of attendances relevant to the command result, if any."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Optional\u003cList\u003c? extends Attendance\u003e\u003e getRelevantAttendance() { return Optional.ofNullable(relevantAttendances);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 17,
      "px1099": 24,
      "AngWM": 1,
      "kianhong95": 29,
      "-": 40,
      "SalsabilTasnia": 7
    }
  },
  {
    "path": "src/seedu/addressbook/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.member.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.menu.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.order.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.employee.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.statistics.StatsEmployeeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.statistics.StatsMemberCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.statistics.StatsMenuCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.statistics.StatsOrderCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" +\"Shows program usage instructions.\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ALL_USAGES \u003d AddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + DeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + FindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ViewCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ViewAllCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"\\n\" + EmployeeListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"\\n\" + EmployeeAddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + MemberListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \"\\n\" + MemberAddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + MenuAddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"\\n\" + MenuDeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"\\n\" + MenuFindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + MenuListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"\\n\" + MenuShowMainMenuCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + MenuViewAllCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"\\n\" + MenuClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + OrderAddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + OrderDeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + OrderClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + OrderListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + DraftOrderEditCustomerCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + DraftOrderEditDishCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + DraftOrderClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + DraftOrderConfirmCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + StatsEmployeeCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + StatsMenuCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + StatsMemberCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + StatsOrderCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ExitCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 1,
      "px1099": 19,
      "kianhong95": 5,
      "-": 38,
      "SalsabilTasnia": 4
    }
  },
  {
    "path": "src/seedu/addressbook/commands/employee/EmployeeAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Attendance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Employee;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeePhone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeePosition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueEmployeeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Adds a new employee to the Rms."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeeAddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addemp\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Adds an employee to the Rms.\\n\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Parameters: NAME p/PHONE e/EMAIL a/ADDRESS pos/POSITION\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + EmployeeName.EXAMPLE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \" p/\" + EmployeePhone.EXAMPLE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \" e/\" + EmployeeEmail.EXAMPLE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \" a/\" + EmployeeAddress.EXAMPLE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \" pos/\" + EmployeePosition.EXAMPLE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New employee added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EMPLOYEE \u003d \"This employee already exists in the Rms.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final Employee toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final Attendance newAttendance;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeAddCommand(String name,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                              String phone,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                              String email,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                              String address,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                              String position) throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.toAdd \u003d new Employee("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new EmployeeName(name),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new EmployeePhone(phone),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new EmployeeEmail(email),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new EmployeeAddress(address),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new EmployeePosition(position)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.newAttendance \u003d new Attendance(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public ReadOnlyEmployee getEmployee() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            rms.addEmployee(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            rms.addAttendance(newAttendance);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } catch (UniqueEmployeeList.DuplicateEmployeeException dee) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_EMPLOYEE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 3,
      "kianhong95": 71
    }
  },
  {
    "path": "src/seedu/addressbook/commands/employee/EmployeeClockInCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Attendance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Timing;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Clocks in for the specified employee based on the current time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeeClockInCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clockIn\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Clocks in with the current time for the specified employee.\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Parameters: NAME\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + EmployeeName.EXAMPLE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s clocked in on %2$s.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_NOT_YET_CLOCKED_OUT \u003d \"%1$s needs to clock out first in order to clock in.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    SimpleDateFormat timeFormatter \u003d new SimpleDateFormat(\"HH:mm:ss\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Date date \u003d new Date();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final String currentTime \u003d timeFormatter.format(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final String currentDate \u003d dateFormatter.format(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeClockInCommand(String name){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Creates and returns an {@code Attendance} with the details of the current time to clock in."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private Attendance createNewAttendance(Attendance oldAttendance) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String name \u003d oldAttendance.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Set\u003cTiming\u003e updatedTimings \u003d oldAttendance.getTimings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Timing currentTiming \u003d new Timing(this.currentTime, this.currentDate,true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        updatedTimings.add(currentTiming);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Attendance(name, true, updatedTimings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            int index \u003d rms.findAttendanceIndex(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            Attendance oldAttendance \u003d rms.findAttendance(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            boolean isClockedIn \u003d oldAttendance.getClockedIn();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            if(isClockedIn){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_NOT_YET_CLOCKED_OUT, name));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            Attendance newAttendance \u003d createNewAttendance(oldAttendance);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            rms.updateAttendance(oldAttendance, newAttendance);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, name, this.currentDate));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 70
    }
  },
  {
    "path": "src/seedu/addressbook/commands/employee/EmployeeClockOutCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Attendance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Timing;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Clocks out for the specified employee based on the current time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeeClockOutCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clockOut\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Clocks out with the current time for the specified employee.\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Parameters: NAME\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + EmployeeName.EXAMPLE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s clocked out on %2$s.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_NOT_YET_CLOCKED_IN \u003d \"%1$s needs to clock in first in order to clock out.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    SimpleDateFormat timeFormatter \u003d new SimpleDateFormat(\"HH:mm:ss\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Date date \u003d new Date();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final String currentTime \u003d timeFormatter.format(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final String currentDate \u003d dateFormatter.format(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeClockOutCommand(String name){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Creates and returns an {@code Attendance} with the details of the current time to clock out."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private Attendance createNewAttendance(Attendance oldAttendance) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String name \u003d oldAttendance.getName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Set\u003cTiming\u003e updatedTimings \u003d oldAttendance.getTimings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Timing currentTiming \u003d new Timing(this.currentTime, this.currentDate,false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        updatedTimings.add(currentTiming);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Attendance(name, false, updatedTimings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        int index \u003d rms.findAttendanceIndex(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Attendance oldAttendance \u003d rms.findAttendance(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        boolean isClockedIn \u003d oldAttendance.getClockedIn();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if(!isClockedIn){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NOT_YET_CLOCKED_IN, name));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Attendance newAttendance \u003d createNewAttendance(oldAttendance);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        rms.updateAttendance(oldAttendance, newAttendance);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, name, this.currentDate));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 68
    }
  },
  {
    "path": "src/seedu/addressbook/commands/employee/EmployeeCommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents the result of an employee command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeeCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeCommandResult(String feedbackToUser, List\u003c? extends ReadOnlyEmployee\u003e relevantEmployees) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        super(feedbackToUser, null, null, null, null, relevantEmployees, null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 16
    }
  },
  {
    "path": "src/seedu/addressbook/commands/employee/EmployeeDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Attendance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueEmployeeList.EmployeeNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Deletes an employee identified using it\u0027s last displayed index from the Rms."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeeDeleteCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delemp\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Deletes the employee identified by the index number used in the last employee listing.\\n\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_DELETE_EMPLOYEE_SUCCESS \u003d \"Deleted Employee: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeDeleteCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            final ReadOnlyEmployee target \u003d getTargetEmployee();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            rms.removeEmployee(target);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            String name \u003d target.getName().fullName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            int index \u003d rms.findAttendanceIndex(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            Attendance toRemove \u003d rms.findAttendance(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            rms.removeAttendance(toRemove);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, target));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } catch (EmployeeNotFoundException enfe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_EMPLOYEE_NOT_IN_RMS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 51
    }
  },
  {
    "path": "src/seedu/addressbook/commands/employee/EmployeeEditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EditEmployeeDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Employee;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeePhone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeePosition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueEmployeeList.EmployeeNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Edits the details of an existing employee in the Rms."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeeEditCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editemp\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Edits the details of the employee identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"[p/PHONE] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"[e/EMAIL] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"[a/ADDRESS] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"[pos/POSITION]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \" p/\" + EmployeePhone.EXAMPLE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_EDIT_EMPLOYEE_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    // implement check for no field entered"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String EMPTY_EMPLOYEE_PHONE \u003d \"00000000\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String EMPTY_EMPLOYEE_EMAIL \u003d \"noargs@noargs.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String EMPTY_EMPLOYEE_ADDRESS \u003d \"noargs\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String EMPTY_EMPLOYEE_POSITION \u003d \"noargs\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final EditEmployeeDescriptor editEmployeeDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param targetVisibleIndex of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @value editEmployeeDescriptor details to edit the employee with"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeEditCommand(int targetVisibleIndex,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                               String phone,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                               String email,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                               String address,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                               String position) throws IllegalValueException{"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.editEmployeeDescriptor \u003d new EditEmployeeDescriptor(phone, email, address, position);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    // check for any non null parameters should already be done, probably in parser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            final ReadOnlyEmployee employeeToEdit \u003d getTargetEmployee();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            Employee editedEmployee \u003d createEditedEmployee(employeeToEdit, editEmployeeDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            rms.editEmployee(employeeToEdit, editedEmployee);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_EMPLOYEE_SUCCESS, editedEmployee));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } catch (EmployeeNotFoundException enfe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_EMPLOYEE_NOT_IN_RMS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Creates and returns an {@code Employee} with the details of {@code employeeToEdit}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * edited with {@code editEmployeeDescriptor}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private static Employee createEditedEmployee(ReadOnlyEmployee employeeToEdit, EditEmployeeDescriptor editEmployeeDescriptor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        EmployeeName updatedName \u003d employeeToEdit.getName();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        EmployeePhone updatedPhone \u003d checkPhone(editEmployeeDescriptor.getPhone(),employeeToEdit.getPhone());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        EmployeeEmail updatedEmail \u003d checkEmail(editEmployeeDescriptor.getEmail(), employeeToEdit.getEmail());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        EmployeeAddress updatedAddress \u003d checkAddress(editEmployeeDescriptor.getAddress(), employeeToEdit.getAddress());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        EmployeePosition updatedPosition \u003d checkPosition(editEmployeeDescriptor.getPosition(), employeeToEdit.getPosition());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Employee(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedPosition);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    * Check for new phone value."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private static EmployeePhone checkPhone(EmployeePhone newEdit, EmployeePhone oldInfo){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (newEdit.value \u003d\u003d EMPTY_EMPLOYEE_PHONE)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return oldInfo;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return newEdit;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Check for new email value."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private static EmployeeEmail checkEmail(EmployeeEmail newEdit, EmployeeEmail oldInfo){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (newEdit.value \u003d\u003d EMPTY_EMPLOYEE_EMAIL)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return oldInfo;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return newEdit;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Check for new address value."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private static EmployeeAddress checkAddress(EmployeeAddress newEdit, EmployeeAddress oldInfo){"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (newEdit.value \u003d\u003d EMPTY_EMPLOYEE_ADDRESS)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return oldInfo;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return newEdit;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Check for new position value."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private static EmployeePosition checkPosition(EmployeePosition newEdit, EmployeePosition oldInfo){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (newEdit.value \u003d\u003d EMPTY_EMPLOYEE_POSITION)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return oldInfo;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return newEdit;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 127
    }
  },
  {
    "path": "src/seedu/addressbook/commands/employee/EmployeeListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * List all employees."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmployeeListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listemp\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"List all employees. \\n\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Parameters: NIL\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cReadOnlyEmployee\u003e allEmployees \u003d rms.getAllEmployees().immutableListView();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new EmployeeCommandResult(getMessageForEmployeeListShownSummary(allEmployees), allEmployees);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 3,
      "kianhong95": 21,
      "-": 2
    }
  },
  {
    "path": "src/seedu/addressbook/commands/member/MemberAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "package seedu.addressbook.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public class MemberAddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addmember\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a member to the address book. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \"Contact details can be marked private by prepending \u0027p\u0027 to the prefix.\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \"Parameters: NAME \\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \" John Doe \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New member added: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEMBER \u003d \"This member already exists in the address book\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private final Member toAdd;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public MemberAddCommand(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.toAdd \u003d new Member("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                new MemberName(name)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public MemberAddCommand(Member toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public ReadOnlyMember getMember() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            rms.addMember(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        } catch (UniqueMemberList.DuplicateMemberException dpe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 55
    }
  },
  {
    "path": "src/seedu/addressbook/commands/member/MemberCommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * Represents the result of an order command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public class MemberCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public MemberCommandResult(String feedbackToUser, List\u003c? extends ReadOnlyMember\u003e relevantMembers) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        super(feedbackToUser, null, null, null, relevantMembers, null, null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 13,
      "px1099": 2,
      "kianhong95": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/member/MemberDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "package seedu.addressbook.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.UniqueMemberList.MemberNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * Deletes an employee identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public class MemberDeleteCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delmember\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \"Deletes the member identified by the index number used in the last member listing.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_DELETE_MEMBER_SUCCESS \u003d \"Deleted member: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public MemberDeleteCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            final ReadOnlyMember target \u003d getTargetMember();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            rms.removeMember(target);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_MEMBER_SUCCESS, target));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        } catch (MemberNotFoundException enfe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_MEMBER_NOT_IN_RMS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 43
    }
  },
  {
    "path": "src/seedu/addressbook/commands/member/MemberListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class MemberListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listmembers\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \"Displays all members in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyMember\u003e allMembers \u003d rms.getAllMembers().immutableListView();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return new MemberCommandResult(getMessageForMemberListShownSummary(allMembers), allMembers);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 17,
      "px1099": 3,
      "-": 2
    }
  },
  {
    "path": "src/seedu/addressbook/commands/menu/MenuAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Adds a menu item to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class MenuAddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addmenu\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a food item to the Rms. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Parameters: NAME p/PRICE type/TYPE [t/TAG]...\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \" Cheese Burger p/$5.00 type/burger t/newAddition t/hotSeller\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New food item added: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MENU_ITEM \u003d \"This food item already exists in the Rms\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final Menu toAddFoodItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuAddCommand(String name,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                          String price, /*boolean isPricePrivate,*/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                          String type,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                          Set\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.toAddFoodItem \u003d new Menu("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                new MenuName(name),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                new Price(price),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                new Type(type),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                tagSet"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuAddCommand(Menu toAddFoodItem) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.toAddFoodItem \u003d toAddFoodItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public ReadOnlyMenus getMenu() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return toAddFoodItem;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            rms.addMenu(toAddFoodItem);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAddFoodItem));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (UniqueMenuList.DuplicateMenuException dpe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MENU_ITEM);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//test command"
      }
    ],
    "authorContributionMap": {
      "px1099": 5,
      "SalsabilTasnia": 64
    }
  },
  {
    "path": "src/seedu/addressbook/commands/menu/MenuClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "package seedu.addressbook.commands.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class MenuClearCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearmenu\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clears menu items permanently.\\n\\t\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Menu has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        rms.clearMenu();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SalsabilTasnia": 22
    }
  },
  {
    "path": "src/seedu/addressbook/commands/menu/MenuCommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.Menu;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.MenuName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.UniqueMenuList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class MenuCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "   // private final List\u003cMenu\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /** The feedback message to be shown to the user. Contains a description of the execution result */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //public final String feedbackToUser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /*public MenuCommandResult(String feedbackToUser, List\u003c? extends ReadOnlyMenus\u003e relevantMenus) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.relevantMenus \u003d relevantMenus;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Returns list of menu items relevant to the command command result_menu, if any."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public MenuCommandResult(String feedbackToUser, List\u003c? extends ReadOnlyMenus\u003e relevantMenus){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        super(feedbackToUser, null, relevantMenus, null, null, null, null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 2,
      "kianhong95": 1,
      "-": 3,
      "SalsabilTasnia": 36
    }
  },
  {
    "path": "src/seedu/addressbook/commands/menu/MenuDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "package seedu.addressbook.commands.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.Menu;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.UniqueMenuList.MenuNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Deletes a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class MenuDeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletemenu\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Deletes the menu item identified by the index number used in the last menu listing.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_DELETE_MENU_ITEM_SUCCESS \u003d \"Deleted Menu Item: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuDeleteCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            final ReadOnlyMenus Menutarget \u003d getTargetMenu();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            rms.removeMenuItem(Menutarget);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_MENU_ITEM_SUCCESS, Menutarget));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_MENU_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (MenuNotFoundException pnfe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_MENU_ITEM_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SalsabilTasnia": 45
    }
  },
  {
    "path": "src/seedu/addressbook/commands/menu/MenuFindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "package seedu.addressbook.commands.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class MenuFindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findmenu\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Finds all menu items whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" coke cheese burger\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuFindCommand(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Returns copy of keywords in this command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final List\u003cReadOnlyMenus\u003e menusFound \u003d getMenuItemsWithNameContainingAnyKeyword(keywords);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new MenuCommandResult(getMessageForMenuListShownSummary(menusFound), menusFound);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Retrieve all persons in the address book whose names contain some of the specified keywords."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @param keywords for searching"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @return list of persons found"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private List\u003cReadOnlyMenus\u003e getMenuItemsWithNameContainingAnyKeyword(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final List\u003cReadOnlyMenus\u003e matchedMenuItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (ReadOnlyMenus menu : rms.getAllMenus()){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(menu.getName().getWordsInName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            if (!Collections.disjoint(wordsInName, keywords)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                matchedMenuItems.add(menu);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return matchedMenuItems;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SalsabilTasnia": 59
    }
  },
  {
    "path": "src/seedu/addressbook/commands/menu/MenuListByTypeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "package seedu.addressbook.commands.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.Type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.net.Proxy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Lists all food items in the address book to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class MenuListByTypeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listmenutype\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Displays all food item of a specific category in the Rms system as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_ERROR \u003d \"Invalid menu type searched! \" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"\\n\" +\"Only the following types are available: main, sides, beverage, dessert, others, set meals.\" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"\\n\" + \"Only one type search allowed at a time!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final String itemword;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //public static boolean executedMenutype \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuListByTypeCommand(String itemword){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.itemword \u003d itemword;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    final List\u003cReadOnlyMenus\u003e matchedFoodItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /* public String getItemword(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "         return"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     }*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final Set\u003cString\u003e typeSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private List\u003cReadOnlyMenus\u003e getFoodItemsBurger(String itemword) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (ReadOnlyMenus menuItem : rms.getAllMenus()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            //final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(burger.getType().getWordsInTypeName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            final String wordsInItemName \u003d menuItem.getType().value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            typeSet.add(wordsInItemName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            //System.out.println(wordsInItemName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            //boolean exist \u003d wordsInName.contains(itemword);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            if (wordsInItemName.equals(itemword)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                matchedFoodItems.add(menuItem);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                //System.out.println(true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return matchedFoodItems;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /*private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuListBurgerCommand(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    } //required for Parser Test later"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //List\u003cReadOnlyMenus\u003e allMenus \u003d rms.getAllMenus().immutableListView();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private List\u003cReadOnlyMenus\u003e getFoodItemsBurger(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final List\u003cReadOnlyMenus\u003e matchedFoodItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (ReadOnlyMenus burger : rms.getAllMenus()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(burger.getType().getWordsInTypeName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            if (!Collections.disjoint(wordsInName, keywords)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                matchedFoodItems.add(burger);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return matchedFoodItems;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final List\u003cReadOnlyMenus\u003e itemsFound \u003d getFoodItemsBurger(itemword);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if(Type.isValidTypeName(itemword)\u003d\u003dfalse){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new MenuCommandResult(MESSAGE_ERROR);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new MenuCommandResult(getMessageForMenuListShownSummary(itemsFound), itemsFound);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        /*if(MenuListCommand.executeMenu \u003d\u003d true) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            //executedMenutype \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            final List\u003cReadOnlyMenus\u003e itemsFound \u003d getFoodItemsBurger(itemword);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new MenuCommandResult(getMessageForMenuListShownSummary(itemsFound), itemsFound);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new MenuCommandResult(Messages.MESSAGE_INVALID_COMMAND_FORMAT);*/"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SalsabilTasnia": 92
    }
  },
  {
    "path": "src/seedu/addressbook/commands/menu/MenuListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.ConcurrentModificationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Lists all food items in the address book to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class MenuListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listmenu\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Displays all menu items in the Rms system as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static boolean executeMenu;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final Set\u003cString\u003e typeSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        executeMenu \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyMenus\u003e allMenus \u003d rms.getAllMenus().immutableListView();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //return new MenuCommandResult(MAIN_MENU_DISPLAY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new MenuCommandResult(getMessageForMenuListShownSummary(allMenus), allMenus);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 5,
      "-": 6,
      "SalsabilTasnia": 25
    }
  },
  {
    "path": "src/seedu/addressbook/commands/menu/MenuShowMainMenuCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "package seedu.addressbook.commands.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Lists all food items in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class MenuShowMainMenuCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showMainMenu\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Displays all the categories of menu items in the Rms system.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MAIN_MENU_DISPLAY \u003d \"RMS Main Menu\" + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                                   +\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                                   + \"\\n\\n\" + \"Item Category:\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                                   + \"\\n\\n\" +\"-Main : key in \u0027listmenutype main\u0027 to view all Main items\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                                   + \"\\n\" + \" -Sides : key in \u0027listmenutype sides\u0027 to view all Sides\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                                   + \"\\n\" + \" -Beverages : key in \u0027listmenutype beverage\u0027 to view all Beverage\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                                   + \"\\n\" + \" -Dessert : key in \u0027listmenutype dessert\u0027 to view all Dessert\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                                   + \"\\n\" + \" -Others : key in \u0027listmenutype others\u0027 to view all Others\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                                   + \"\\n\" + \" -Set Meals : key in \u0027listmenutype set meals\u0027 to view all Set Meals\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final Set\u003cString\u003e typeSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    final List\u003cReadOnlyMenus\u003e typeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private List\u003cReadOnlyMenus\u003e getFoodItemsBurger() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (ReadOnlyMenus menuItem : rms.getAllMenus()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            //final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(burger.getType().getWordsInTypeName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            final String wordsInItemName \u003d menuItem.getType().value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            typeSet.add(wordsInItemName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            typeList.add(menuItem);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            //System.out.println(wordsInItemName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            //boolean exist \u003d wordsInName.contains(itemword);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for(String type: typeSet){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            System.out.println(type);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return typeList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private List\u003cReadOnlyMenus\u003e getMenuItemsWithNameContainingAnyKeyword() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final List\u003cReadOnlyMenus\u003e matchedMenuItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (ReadOnlyMenus menu : rms.getAllMenus()){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            typeSet.add(menu.getType().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            System.out.println(menu.getType().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return matchedMenuItems;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private String ConstructDisplayMessage(){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        String MainMenuDisplay \u003d \"Main Menu\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (String typeName : typeSet){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "          //  MainMenuDisplay +\u003d \"\\n\" + typeName.toUpperCase() + \":  key in listmenutype\" + typeName + \"to view all\" + typeName + \"items\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            //System.out.println(typeName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return MainMenuDisplay;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        List\u003cReadOnlyMenus\u003e allMenus \u003d rms.getAllMenus().immutableListView();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new MenuCommandResult(MAIN_MENU_DISPLAY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //return new MenuCommandResult(getMessageForMenuListShownSummary(allMenus), allMenus);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SalsabilTasnia": 77
    }
  },
  {
    "path": "src/seedu/addressbook/commands/menu/MenuViewAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Shows all details of the person identified using the last displayed index."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Private contact details are shown."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class MenuViewAllCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewallmenu\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows all details of the food items \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"identified by the index number in the last shown menu listing.\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_VIEW_MENU_ITEM_DETAILS \u003d \"Viewing menu: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public MenuViewAllCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            final ReadOnlyMenus target \u003d getTargetMenu();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!rms.containsMenus(target)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_MENU_ITEM_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEW_MENU_ITEM_DETAILS, target.getAsTextShowAll()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_MENU_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 3,
      "-": 4,
      "SalsabilTasnia": 35
    }
  },
  {
    "path": "src/seedu/addressbook/commands/order/DraftOrderClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Delete all the fields of the draft order."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class DraftOrderClearCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cleardraft\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" +\"Delete all the fields of the draft order.\\n\\t\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The draft order is cleared.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": "        rms.clearDraftOrder();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "        String message \u003d MESSAGE_SUCCESS + \"\\n\" + getDraftOrderAsString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 24
    }
  },
  {
    "path": "src/seedu/addressbook/commands/order/DraftOrderConfirmCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.Order;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.UniqueOrderList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Confirm the order and put it into the order list. Clear the draft order afterward."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class DraftOrderConfirmCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"confirmdraft\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Confirm the order and put it into the order list. Clear the draft order afterward.\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The order has been added.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_DRAFT_INCOMPLETE \u003d \"The draft needs to be completed before confirming.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"This order already exists in the order list\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final ReadOnlyOrder draftOrder \u003d rms.getDraftOrder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": "            String message;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "            if (draftOrder.hasCustomerField()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "                final ReadOnlyMember customerOfOrderToAdd \u003d draftOrder.getCustomer();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "                final Order toAdd \u003d new Order(customerOfOrderToAdd, draftOrder.getDishItems());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "                if (rms.containsMember(customerOfOrderToAdd)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    customerOfOrderToAdd.updatePoints(toAdd.getPrice());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "                rms.addOrder(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "                rms.clearDraftOrder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "                List\u003cReadOnlyOrder\u003e allOrders \u003d rms.getAllOrders().immutableListView();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "                message \u003d MESSAGE_SUCCESS + \"\\n\" + getMessageForOrderListShownSummary(allOrders);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return new OrderCommandResult(message, allOrders);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "                message \u003d MESSAGE_DRAFT_INCOMPLETE + \"\\n\" + getDraftOrderAsString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return new CommandResult(message);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "px1099"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } catch (UniqueOrderList.DuplicateOrderException doe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 51
    }
  },
  {
    "path": "src/seedu/addressbook/commands/order/DraftOrderEditCustomerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Edit the customer field of the draft order."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": " * The customer is retrieved with the index of last displayed member list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class DraftOrderEditCustomerCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"draftcustomer\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Add a customer to the draft order. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"The customer is identified using the index from the last shown menu list. \\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Customer is edited in the draft order.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public DraftOrderEditCustomerCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final ReadOnlyMember target \u003d getTargetMember();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "            if (!rms.containsMember(target)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "            rms.editDraftOrderCustomer(target);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "            String message \u003d MESSAGE_SUCCESS + \"\\n\" + getDraftOrderAsString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new CommandResult(message);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 44
    }
  },
  {
    "path": "src/seedu/addressbook/commands/order/DraftOrderEditDishCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Edit the quantity of a dish item of the draft order."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": " * The dish item is retrieved with the index of last displayed menu."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class DraftOrderEditDishCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"draftdish\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Add a customer to the draft order. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"The customer is identified using the index from the last shown menu list. \\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Parameters: INDEX q/QUANTITY\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3 q/4\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The dish is edited in the draft order.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_INVALID_QUANTITY \u003d \"The quantity entered is invalid.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public DraftOrderEditDishCommand(int targetVisibleIndex, int quantity) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final ReadOnlyMenus target \u003d getTargetMenu();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "            if (!rms.containsMenus(target)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_MENU_ITEM_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "            String message;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": "            if (quantity \u003e\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": "                rms.editDraftOrderDishItem(target, quantity);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "                message \u003d MESSAGE_SUCCESS + \"\\n\" + getDraftOrderAsString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "px1099"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "px1099"
        },
        "content": "                message \u003d MESSAGE_INVALID_QUANTITY + \"\\n\" + getDraftOrderAsString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "px1099"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new CommandResult(message);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_MENU_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 54
    }
  },
  {
    "path": "src/seedu/addressbook/commands/order/OrderAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Display the current draft and the list of order draft commands used for adding a new order"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class OrderAddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addorder\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Shows the details of the current draft order and the new order drafting instructions.\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_ALL_ORDER_DRAFT_COMMANDS \u003d \"List of commands used for drafting a new order:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_ALL_ORDER_DRAFT_COMMANDS_USAGES \u003d OrderAddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + DraftOrderEditCustomerCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + DraftOrderEditDishCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + DraftOrderClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"\\n\" + DraftOrderConfirmCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final ReadOnlyOrder draftOrder \u003d rms.getDraftOrder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "        String message \u003d getDraftOrderAsString()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": "                        + \"\\n\\n\" + MESSAGE_ALL_ORDER_DRAFT_COMMANDS"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "                        + \"\\n\" + MESSAGE_ALL_ORDER_DRAFT_COMMANDS_USAGES;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 36
    }
  },
  {
    "path": "src/seedu/addressbook/commands/order/OrderClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Clears the order list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class OrderClearCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearorder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clears order list permanently.\\n\\t\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Order list has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "        rms.clearOrderList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 22
    }
  },
  {
    "path": "src/seedu/addressbook/commands/order/OrderCommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Represents the result of an order command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class OrderCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public OrderCommandResult(String feedbackToUser, List\u003c? extends ReadOnlyOrder\u003e relevantOrders) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        super(feedbackToUser, null, null, relevantOrders, null, null, null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 15,
      "kianhong95": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/order/OrderDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.UniqueOrderList.OrderNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Deletes an order identified using it\u0027s last displayed index from the order list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class OrderDeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteorder\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Deletes the order identified by the index number used in the last order listing.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_DELETE_ORDER_SUCCESS \u003d \"Deleted Order: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public OrderDeleteCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final ReadOnlyOrder target \u003d getTargetOrder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "            rms.removeOrder(target);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_ORDER_SUCCESS, target));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } catch (OrderNotFoundException pnfe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_ORDER_NOT_IN_ORDER_LIST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 43
    }
  },
  {
    "path": "src/seedu/addressbook/commands/order/OrderListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Lists all orders in the order list to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class OrderListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listorder\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Displays all orders in the order list as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": "        List\u003cReadOnlyOrder\u003e allOrders \u003d rms.getAllOrders().immutableListView();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new OrderCommandResult(getMessageForOrderListShownSummary(allOrders), allOrders);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 26
    }
  },
  {
    "path": "src/seedu/addressbook/common/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_IN_ADDRESSBOOK \u003d \"Person could not be found in address book\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX \u003d \"The employee index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_EMPLOYEE_NOT_IN_RMS \u003d \"Employee could not be found in Rms\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_EMPLOYEES_LISTED_OVERVIEW \u003d \"%1$d employees listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX \u003d \"The employee index provided is invalid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_MEMBER_NOT_IN_RMS \u003d \"Employee could not be found in Rms\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_MEMBERS_LISTED_OVERVIEW \u003d \"%1$d members listed!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_NEGATIVE_POINTS \u003d \"Update points cannot result in negative points.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_INVALID_MENU_ITEM_DISPLAYED_INDEX \u003d \"The menu item index provided is invalid\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_MENU_ITEM_NOT_IN_ADDRESSBOOK \u003d \"Menu item could not be found in Rms\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_MENUS_LISTED_OVERVIEW \u003d \"%1$d food items listed!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER_DISPLAYED_INDEX \u003d \"The order index provided is invalid\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String MESSAGE_DRAFT_ORDER_DETAILS \u003d \"Viewing current draft order: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_ORDER_NOT_IN_ORDER_LIST \u003d \"Order could not be found in order list\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_ORDERS_LISTED_OVERVIEW \u003d \"%1$d orders listed!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_USING_ORDER_LIST_STORAGE_FILE \u003d \"Using order list storage file : %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE \u003d \"Launch command format: \" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \"java seedu.addressbook.Main [STORAGE_FILE_PATH]\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Welcome to Restaurant Management System! \\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"- To access EMPLOYEE DATABASE, key in \u0027employee\u0027\\n\" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"- To access MEMBER DATABASE, key in \u0027customer\u0027\\n\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"- To access MENU, key in \u0027menu\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"- To access ORDER, key in \u0027order\u0027\\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"- To access STATISITCS information, key in \u0027statisitics\u0027\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"- For further assistance, key in \u0027help\u0027\\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            \"----------------------------------------------------------\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USING_STORAGE_FILE \u003d \"Using storage file : %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 4,
      "px1099": 2,
      "kianhong95": 15,
      "-": 15,
      "SalsabilTasnia": 8
    }
  },
  {
    "path": "src/seedu/addressbook/common/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "package seedu.addressbook.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String EXAMPLE \u003d \"John Doe\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Person names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @throws IllegalValueException if given name string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Name(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        if (!isValidName(name)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Returns true if a given string is a valid person name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return Arrays.asList(fullName.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 64
    }
  },
  {
    "path": "src/seedu/addressbook/common/Utils.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Utils {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether any of the given items are null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNull(Object... items) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Object item : items) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            if (item \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if every element in a collection are unique by {@link Object#equals(Object)}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean elementsAreUnique(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cObject\u003e testSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Object item : items) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            final boolean itemAlreadyExists \u003d !testSet.add(item); // see Set documentation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (itemAlreadyExists) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cK, V extends Comparable\u003c? super V\u003e\u003e List\u003cMap.Entry \u003cK, V\u003e\u003e sortByValue(Map\u003cK, V\u003e map) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cMap.Entry\u003cK, V\u003e\u003e list \u003d new ArrayList\u003c\u003e(map.entrySet());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        list.sort(Map.Entry.comparingByValue());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String formatCurrency(double input) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"0.00\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return df.format(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 9,
      "-": 53
    }
  },
  {
    "path": "src/seedu/addressbook/data/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.Menu;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.UniqueMenuList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueEmployeeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.DuplicatePersonException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the entire address book. Contains the data of the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList allPersons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final UniqueEmployeeList allEmployees;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final UniqueMenuList allFoodItems;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook empty() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    // added allEmployees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        allEmployees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        allFoodItems \u003d new UniqueMenuList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an address book with the given data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons external changes to this will not affect this address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    // Construct address book with persons, employees and food items"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AngWM"
        },
        "content": "    public AddressBook(UniquePersonList persons, UniqueMenuList menus, UniqueEmployeeList employees) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allPersons \u003d new UniquePersonList(persons);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.allEmployees \u003d new UniqueEmployeeList(employees);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.allFoodItems \u003d new UniqueMenuList(menus);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person toAdd) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Adds a menu item to the address book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent food item already exists."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void addMenu(Menu toAddFoodItem) throws UniqueMenuList.DuplicateMenuException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        allFoodItems.add(toAddFoodItem);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if an equivalent person exists in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsPerson(ReadOnlyPerson key) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.contains(key);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Checks if an equivalent menu item exists in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public boolean containsMenus(ReadOnlyMenus key1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return allFoodItems.contains(key1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such Person could be found."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(ReadOnlyPerson toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.remove(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Removes the equivalent food item from the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws PersonNotFoundException if no such Person could be found."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void removeMenuItem(ReadOnlyMenus toRemove1) throws UniqueMenuList.MenuNotFoundException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        allFoodItems.remove(toRemove1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons from the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.clear();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Clears all menu items from the address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void clearmenu() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        allFoodItems.clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Defensively copied UniquePersonList of all persons in the address book at the time of the call."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList getAllPersons() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UniquePersonList(allPersons);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    // this is a copy of getAllPersons for employees"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public UniqueEmployeeList getAllEmployees() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new UniqueEmployeeList(allEmployees);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AngWM"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Defensively copied UniqueMenuList of all menu items in the address book at the time of the call."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public UniqueMenuList getAllMenus() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new UniqueMenuList(allFoodItems);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.allPersons.equals(((AddressBook) other).allPersons));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.hashCode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AngWM": 2,
      "kianhong95": 10,
      "-": 87,
      "SalsabilTasnia": 47
    }
  },
  {
    "path": "src/seedu/addressbook/data/Rms.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Attendance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Employee;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueAttendanceList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueEmployeeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueEmployeeList.DuplicateEmployeeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueEmployeeList.EmployeeNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.member.Member;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.member.UniqueMemberList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.member.UniqueMemberList.DuplicateMemberException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.member.UniqueMemberList.MemberNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.Menu;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.Type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.UniqueMenuList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.UniqueMenuList.DuplicateMenuException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.menu.UniqueMenuList.MenuNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.Order;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.order.UniqueOrderList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.UniqueOrderList.DuplicateOrderException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.order.UniqueOrderList.OrderNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.DuplicatePersonException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the entire address book. Contains the data of the address book."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class Rms {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList allPersons;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueEmployeeList allEmployees;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final UniqueMemberList allMembers;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueMenuList allFoodItems;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueOrderList allOrders;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final UniqueAttendanceList allAttendance;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private Order draftOrder \u003d new Order();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static Set\u003cType\u003e TypeSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static Rms empty() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new Rms();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty address book."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Rms() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        allEmployees \u003d new UniqueEmployeeList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        allMembers \u003d new UniqueMemberList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        allFoodItems \u003d new UniqueMenuList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        allOrders \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        allAttendance \u003d new UniqueAttendanceList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an address book with the given data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons external changes to this will not affect this address book"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Rms(UniquePersonList persons,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "px1099"
        },
        "content": "               UniqueMenuList menus,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "px1099"
        },
        "content": "               UniqueEmployeeList employees,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "px1099"
        },
        "content": "               UniqueOrderList orders,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "               UniqueMemberList members,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "               UniqueAttendanceList attendances) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allPersons \u003d new UniquePersonList(persons);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allEmployees \u003d new UniqueEmployeeList(employees);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.allMembers \u003d new UniqueMemberList(members);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allFoodItems \u003d new UniqueMenuList(menus);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allOrders \u003d new UniqueOrderList(orders);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.allAttendance \u003d new UniqueAttendanceList(attendances);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person toAdd) throws DuplicatePersonException { allPersons.add(toAdd); }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Adds an employee to the Rms."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws DuplicateEmployeeException if an equivalent employee already exists."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void addEmployee(Employee toAdd) throws DuplicateEmployeeException { allEmployees.add(toAdd); }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Adds an attendance list with the specified employee to the Rms."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void addAttendance(Attendance toAdd) { allAttendance.add(toAdd); }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Gets index of the specified Attendance object."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int findAttendanceIndex(String toFind) { return allAttendance.getAttendanceIndex(toFind); }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Gets index of the specified Attendance object."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Attendance findAttendance(int toFind) { return allAttendance.getAttendance(toFind); }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Adds an attendance list with the specified employee to the Rms."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void updateAttendance(Attendance oldAttendance, Attendance newAttendance) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        allAttendance.setAttendance(oldAttendance, newAttendance); }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Adds a member to the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws DuplicateMemberException if an equivalent member already exists."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void addMember(Member toAdd) throws DuplicateMemberException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        allMembers.add(toAdd);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Adds a menu item to the menu list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicateMenuException if an equivalent menu item already exists."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addMenu(Menu toAdd) throws DuplicateMenuException { allFoodItems.add(toAdd); }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Adds an order to the order list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws DuplicateOrderException if an equivalent person already exists."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void addOrder(Order toAdd) throws DuplicateOrderException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "px1099"
        },
        "content": "        allOrders.add(toAdd);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if an equivalent person exists in the address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsPerson(ReadOnlyPerson key) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.contains(key);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Checks if an equivalent menu item exists in the address book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsMenus(ReadOnlyMenus key) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return allFoodItems.contains(key);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Checks if an equivalent order exists in the order list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean containsOrder(ReadOnlyOrder key) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return allOrders.contains(key);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if an equivalent member exists in the address book."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsMember(ReadOnlyMember key) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return allMembers.contains(key);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Checks if an equivalent employee exists in the Rms."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean containsEmployee(ReadOnlyEmployee key) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return allEmployees.contains(key);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the address book."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such Person could be found."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(ReadOnlyPerson toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.remove(toRemove);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Removes the equivalent menu item from the menu."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws MenuNotFoundException if no such Order could be found."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void removeMenuItem(ReadOnlyMenus toRemove) throws MenuNotFoundException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        allFoodItems.remove(toRemove);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Removes the equivalent order from the order list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws OrderNotFoundException if no such Order could be found."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void removeOrder(ReadOnlyOrder toRemove) throws OrderNotFoundException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "px1099"
        },
        "content": "        allOrders.remove(toRemove);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent member from the address book."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws MemberNotFoundException if no such Member could be found."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeMember(ReadOnlyMember toRemove) throws MemberNotFoundException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        allMembers.remove(toRemove);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Removes the equivalent employee from the Rms."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws EmployeeNotFoundException if no such Employee could be found."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void removeEmployee(ReadOnlyEmployee toRemove) throws EmployeeNotFoundException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        allEmployees.remove(toRemove);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Removes an attendance list with the specified employee from the Rms."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void removeAttendance(Attendance toRemove){"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        allAttendance.remove(toRemove);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Edits the equivalent employee from Rms"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws EmployeeNotFoundException if no such Employee could be found."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void editEmployee(ReadOnlyEmployee toRemove, Employee toReplace) throws  EmployeeNotFoundException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        allEmployees.edit(toRemove, toReplace);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons from the address book."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.clear();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Clears all members from the address book."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void clearMembers() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        allMembers.clear();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Clears all employees from the Rms."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void clearEmployee() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        allEmployees.clear();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Clears all menu items from the menu."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void clearMenu() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        allFoodItems.clear();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Clears all orders from the order list."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void clearOrderList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        allOrders.clear();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Defensively copied UniquePersonList of all persons in the address book at the time of the call."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList getAllPersons() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UniquePersonList(allPersons);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Defensively copied UniqueMemberList of all members in the member list at the time of the call."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueMemberList getAllMembers() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UniqueMemberList(allMembers);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Defensively copied UniqueEmployeeList of all employees in the employee list at the time of the call."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueEmployeeList getAllEmployees() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UniqueEmployeeList(allEmployees);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Defensively copied UniqueEmployeeList of all employees in the employee list at the time of the call."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public UniqueAttendanceList getAllAttendance() { return new UniqueAttendanceList(allAttendance); }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Defensively copied UniqueMenuList of all menu items in the menu at the time of the call."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueMenuList getAllMenus() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UniqueMenuList(allFoodItems);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Defensively copied UniqueOrderList of all orders in the employee list at the time of the call."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public UniqueOrderList getAllOrders() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new UniqueOrderList(allOrders);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public ReadOnlyOrder getDraftOrder() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return draftOrder;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void editDraftOrderCustomer(ReadOnlyMember customer) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "px1099"
        },
        "content": "        draftOrder.setCustomer(customer);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Adjust the dish and its quantity in the draft order to add, remove or edit dish items in the draft."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void editDraftOrderDishItem(ReadOnlyMenus dish, int quantity) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "px1099"
        },
        "content": "        draftOrder.changeDishQuantity(dish, quantity);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void clearDraftOrder() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "px1099"
        },
        "content": "        draftOrder \u003d new Order();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "px1099"
        },
        "content": "                || (other instanceof Rms // instanceof handles nulls"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "px1099"
        },
        "content": "                \u0026\u0026 this.allPersons.equals(((Rms) other).allPersons));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.hashCode();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 1,
      "px1099": 125,
      "kianhong95": 86,
      "-": 113,
      "SalsabilTasnia": 28
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/Attendance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents an Attendance list in the Rms."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Guarantees: EmployeeName is present, not null and validated"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " *             as this command only works when an employee has been properly created."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class Attendance {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private boolean isClockedIn;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final Set\u003cTiming\u003e timings \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Attendance(){}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Attendance(String name){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.name \u003d name.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Attendance(String name, boolean isClockedIn, Set\u003cTiming\u003e timings){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.isClockedIn \u003d isClockedIn;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.timings.addAll(timings);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Attendance(Attendance source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this(source.getName(), source.getClockedIn(), source.getTimings());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean getClockedIn() {return isClockedIn; }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Set\u003cTiming\u003e getTimings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new LinkedHashSet\u003c\u003e(timings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void setClockedIn(boolean isClockedIn) {this.isClockedIn \u003d isClockedIn; }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return Objects.hash(name, timings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Formats the attendance as text, showing all check in and check out timings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String getAsTextShowAll() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                .append(\"Timings: \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for (Timing timing : getTimings()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            builder.append(timing);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 76
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/EditEmployeeDescriptor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Stores the details to edit the employee with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * corresponding field value of the employee."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EditEmployeeDescriptor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private EmployeeEmail email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private EmployeePhone phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private EmployeeAddress address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private EmployeePosition position;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EditEmployeeDescriptor(){}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EditEmployeeDescriptor(String phone,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                  String email,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                  String address,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                  String position) throws IllegalValueException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.phone \u003d new EmployeePhone(phone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.email \u003d new EmployeeEmail(email);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.address \u003d new EmployeeAddress(address);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.position \u003d new EmployeePosition(position);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EditEmployeeDescriptor(EditEmployeeDescriptor toCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        setEmail(toCopy.email);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        setAddress(toCopy.address);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        setPosition(toCopy.position);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void setPhone(EmployeePhone phone)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeePhone getPhone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void setEmail(EmployeeEmail email) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeEmail getEmail() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void setAddress(EmployeeAddress address) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeAddress getAddress() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void setPosition(EmployeePosition position) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeePosition getPosition() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return position;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!(other instanceof EditEmployeeDescriptor)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        EditEmployeeDescriptor e \u003d (EditEmployeeDescriptor) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 getPosition().equals(e.getPosition());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 90
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/Employee.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents an Employee in the system."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class Employee implements ReadOnlyEmployee {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private EmployeeName name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private EmployeePhone phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private EmployeeEmail email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private EmployeeAddress address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private EmployeePosition position;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Employee(EmployeeName name,EmployeePhone phone, EmployeeEmail email, EmployeeAddress address, EmployeePosition position){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Employee(ReadOnlyEmployee source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(), source.getPosition());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeName getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeePhone getPhone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeEmail getEmail() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeAddress getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeePosition getPosition() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return position;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setName(EmployeeName name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setPhone(EmployeePhone phone){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setEmail(EmployeeEmail email) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setAddress(EmployeeAddress address){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setPosition(EmployeePosition position){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                || (other instanceof ReadOnlyEmployee // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyEmployee) other));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return Objects.hash(name, phone, email, address, position);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return getAsTextShowDetails();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 97
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/EmployeeAddress.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents an Employee\u0027s address in the Rms."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeeAddress {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String EXAMPLE \u003d \"Clementi Ave 2, Blk 543 #13-12\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d \"Employee addresses can be in any format\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \".+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Validates given address."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IllegalValueException if given address string is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeAddress(String address) throws IllegalValueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!isValidAddress(address)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.value \u003d address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Returns true if a given string is a valid Employee email."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                || (other instanceof EmployeeAddress // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 this.value.equals(((EmployeeAddress) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 52
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/EmployeeEmail.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents an Employee\u0027s email in the Rms."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeeEmail {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String EXAMPLE \u003d \"Example2018@rms.com\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            \"Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d \"[\\\\w\\\\.]+@[\\\\w\\\\.]+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Validates given email."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IllegalValueException if given email address string is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeEmail(String email) throws IllegalValueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        email \u003d email.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!isValidEmail(email)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new IllegalValueException(MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.value \u003d email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Checks if a given string is a valid employee email."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                || (other instanceof EmployeeEmail // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 this.value.equals(((EmployeeEmail) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 54
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/EmployeeName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.common.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents an Employee\u0027s name in the Rms."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeeName extends Name{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IllegalValueException if given name string is invalid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeeName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 22
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/EmployeePhone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents an Employee\u0027s phone number in the Rms."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeePhone {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String EXAMPLE \u003d \"91234567\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d \"Employee phone numbers should only contain numbers\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Validates given phone number."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IllegalValueException if given phone string is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeePhone(String phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        phone \u003d phone.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!isValidPhone(phone)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new IllegalValueException(MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Checks if a given string is a valid employee phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                || (other instanceof EmployeePhone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 this.value.equals(((EmployeePhone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 53
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/EmployeePosition.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents an Employee\u0027s position in the Rms."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPosition(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class EmployeePosition {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String EXAMPLE \u003d \"Cashier\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String MESSAGE_POSITION_CONSTRAINTS \u003d \"Employee position should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final String POSITION_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IllegalValueException if given name string is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public EmployeePosition(String value) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        value \u003d value.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!isValidPosition(value)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new IllegalValueException(MESSAGE_POSITION_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Returns true if a given string is a valid employee name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static boolean isValidPosition(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return test.matches(POSITION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return Arrays.asList(value.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                || (other instanceof EmployeePosition // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 this.value.equals(((EmployeePosition) other).value)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode() { return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 63
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/ReadOnlyEmployee.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * A read-only immutable interface for an Employee in the Rms."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public interface ReadOnlyEmployee {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    EmployeeName getName();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    EmployeePhone getPhone();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    EmployeeEmail getEmail();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    EmployeeAddress getAddress();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    EmployeePosition getPosition();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyEmployee other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 other.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 other.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 other.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 other.getPosition().equals(this.getPosition()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    // Deal with this after creating variable classes"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Formats the Employee as text, showing all details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Value of each attribute is trimmed to prevent whitespace errors during tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    default String getAsTextShowDetails() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        builder.append(getName().fullName.trim())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                .append(\" Phone: \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        builder.append(getPhone().value.trim())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                .append(\" Email: \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        builder.append(getEmail().value.trim())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                .append(\" Address: \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        builder.append(getAddress().value.trim())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                .append(\" Position: \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        builder.append(getPosition().value.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 50
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/Timing.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * Represents a Timing field in the Rms."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class Timing {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public final String time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public final boolean isClockIn;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Timing(String time, String date, boolean isClockIn){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.isClockIn \u003d isClockIn;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String getDate() { return date; }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean isClockIn() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return isClockIn;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode(){ return Objects.hash(time, date, isClockIn); }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return \"Date \u003d \" + date + \" Time \u003d \" + time + \" isClockIn \u003d \" + isClockIn;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 35
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/UniqueAttendanceList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * A list of attendance timings. Does not allow null elements."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class UniqueAttendanceList implements Iterable\u003cAttendance\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final List\u003cAttendance\u003e attendanceInternalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Constructs empty attendance list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public UniqueAttendanceList() {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Constructs an attendance list with the given attendance timings."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public UniqueAttendanceList(Attendance... attendances){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final List\u003cAttendance\u003e initialTags \u003d Arrays.asList(attendances);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        attendanceInternalList.addAll(initialTags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param attendances a collection of attendance"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public UniqueAttendanceList(Collection\u003cAttendance\u003e attendances) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        attendanceInternalList.addAll(attendances);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public UniqueAttendanceList(UniqueAttendanceList source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        attendanceInternalList.addAll(source.attendanceInternalList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Adds an attendance to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void add(Attendance toAdd)  {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        attendanceInternalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Removes the equivalent employee from the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void remove(Attendance toRemove){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        attendanceInternalList.remove(toRemove);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Gets index of the specified Attendance object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int getAttendanceIndex(String target){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for (Attendance attendance : attendanceInternalList){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            if(attendance.getName().equals(target)){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                int index \u003d attendanceInternalList.indexOf(attendance);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Gets the Attendance object at target index."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Attendance getAttendance(int target){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return attendanceInternalList.get(target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Adds a time field to the attendance for the specified employee in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void setAttendance(Attendance target, Attendance newAttendance)  {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        int index \u003d attendanceInternalList.indexOf(target);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        attendanceInternalList.set(index, newAttendance);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Iterator\u003cAttendance\u003e iterator() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return attendanceInternalList.iterator();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return attendanceInternalList.hashCode();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 96
    }
  },
  {
    "path": "src/seedu/addressbook/data/employee/UniqueEmployeeList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.data.employee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * A list of employees. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * @see Employee#equals(Object)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class UniqueEmployeeList implements Iterable\u003cEmployee\u003e{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static class DuplicateEmployeeException extends DuplicateDataException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        protected DuplicateEmployeeException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            super(\"Operation would result in duplicate employees\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Signals that an operation targeting a specified employee in the list would fail because"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * there is no such matching employee in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static class EmployeeNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private final List\u003cEmployee\u003e employeeInternalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Constructs empty employee list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public UniqueEmployeeList(){}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Constructs an employee list with the given employees."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public UniqueEmployeeList(Employee... employees) throws DuplicateEmployeeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final List\u003cEmployee\u003e initialTags \u003d Arrays.asList(employees);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new DuplicateEmployeeException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        employeeInternalList.addAll(initialTags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param employees a collection of employees"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws DuplicateEmployeeException if the {@code employees} contains duplicate employees"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public UniqueEmployeeList(Collection\u003cEmployee\u003e employees) throws DuplicateEmployeeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!Utils.elementsAreUnique(employees)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new DuplicateEmployeeException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        employeeInternalList.addAll(employees);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public UniqueEmployeeList(UniqueEmployeeList source) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        employeeInternalList.addAll(source.employeeInternalList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public List\u003cReadOnlyEmployee\u003e immutableListView() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return Collections.unmodifiableList(employeeInternalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Checks if the list contains an equivalent employee as the given argument."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean contains(ReadOnlyEmployee toCheck) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return employeeInternalList.contains(toCheck);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Adds an employee to the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws UniqueEmployeeList.DuplicateEmployeeException if the employee to add is a duplicate of an existing employee in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void add(Employee toAdd) throws UniqueEmployeeList.DuplicateEmployeeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new UniqueEmployeeList.DuplicateEmployeeException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        employeeInternalList.add(toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Removes the equivalent employee from the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws EmployeeNotFoundException if no such employee could be found in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void remove(ReadOnlyEmployee toRemove) throws EmployeeNotFoundException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final boolean employeeFoundAndDeleted \u003d employeeInternalList.remove(toRemove);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!employeeFoundAndDeleted) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new EmployeeNotFoundException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Removes the equivalent employee from the list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws EmployeeNotFoundException if no such employee could be found in the list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void edit(ReadOnlyEmployee toRemove, Employee toReplace) throws EmployeeNotFoundException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final boolean employeeFoundAndDeleted \u003d employeeInternalList.remove(toRemove);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!employeeFoundAndDeleted) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            throw new EmployeeNotFoundException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            employeeInternalList.add(toReplace);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Clears all employees in list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        employeeInternalList.clear();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Iterator\u003cEmployee\u003e iterator() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return employeeInternalList.iterator();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                || (other instanceof UniqueEmployeeList // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \u0026\u0026 this.employeeInternalList.equals("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                ((UniqueEmployeeList) other).employeeInternalList));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return employeeInternalList.hashCode();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 147
    }
  },
  {
    "path": "src/seedu/addressbook/data/member/Member.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "package seedu.addressbook.data.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.awt.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public class Member implements ReadOnlyMember {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private MemberName name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private Points points;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public final String EMPTY_NAME_STRING \u003d \"EMPTY\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Member() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            this.name \u003d new MemberName(EMPTY_NAME_STRING);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        } catch (IllegalValueException ie) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            this.name \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.points \u003d new Points();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.date \u003d new Date();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Member(MemberName name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.points \u003d new Points();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.date \u003d new Date();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Member(MemberName name, Points points, Date date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.points \u003d points;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    public Member(ReadOnlyMember source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        this(source.getName(), source.getPoints());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Member(ReadOnlyMember source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this(source.getName(), source.getPoints(), source.getDate());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public MemberName getName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Points getPoints() { return points; }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Points updatePoints(double price) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return this.points.updatePoints(price);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    protected void setName(MemberName name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                || (other instanceof ReadOnlyMember // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyMember) other));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 86
    }
  },
  {
    "path": "src/seedu/addressbook/data/member/MemberName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "package seedu.addressbook.data.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.common.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * Represents an Employee\u0027s name in the Rms."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public class MemberName extends Name {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @throws IllegalValueException if given name string is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public MemberName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 24
    }
  },
  {
    "path": "src/seedu/addressbook/data/member/Points.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "package seedu.addressbook.data.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.awt.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_NEGATIVE_POINTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public class Points {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private int value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Points(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.value \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Points(int points){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        this.value \u003d points;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    public final String MESSAGE_NEGATIVE_POINTS \u003d \"Update points cannot result in negative points.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Converts the price into points and adds in to the existing points for the member"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @param price of the order being made"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @return updated points"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    protected Points updatePoints(double price) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            this.value +\u003d ((int) price) / 10;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            if(this.value \u003c 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                throw new IllegalValueException(MESSAGE_NEGATIVE_POINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            this.value \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public int getPoints() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                || (other instanceof Points // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                \u0026\u0026 this.toString().equals(((Points) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return toString().hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    public boolean isPrivate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        return isPrivate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 65
    }
  },
  {
    "path": "src/seedu/addressbook/data/member/ReadOnlyMember.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "package seedu.addressbook.data.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.person.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * A read-only immutable interface for a Member in the Restaurant Management System."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public interface ReadOnlyMember {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    MemberName getName();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    Points getPoints();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    Points updatePoints(double price);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    Date getDate();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * The returned {@code Set} is a deep copy of the internal {@code Set},"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * changes on the returned list will not affect the person\u0027s internal tags."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyMember other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName())); // state checks here onwards"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Formats the person as text, showing all contact details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final String detailIsPrivate \u003d \"(private) \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                .append(\" Points: \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        builder.append(getPoints())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                .append(\" Date: \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        builder.append(getDate());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//                .append(\" Phone: \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        if (getPhone().isPrivate()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(detailIsPrivate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        builder.append(getPhone())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//                .append(\" Email: \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        if (getEmail().isPrivate()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(detailIsPrivate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        builder.append(getEmail())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//                .append(\" Address: \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        if (getAddress().isPrivate()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(detailIsPrivate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        builder.append(getAddress())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//                .append(\" Tags: \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(tag);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Formats a person as text, showing only non-private contact details."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    default String getAsTextHidePrivate() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        builder.append(\" Points: \").append(getPoints());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        builder.append(\" Date: \").append(getDate());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        if (!getPhone().isPrivate()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(\" Phone: \").append(getPhone());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        if (!getEmail().isPrivate()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(\" Email: \").append(getEmail());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        if (!getAddress().isPrivate()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(\" Address: \").append(getAddress());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            builder.append(tag);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 90
    }
  },
  {
    "path": "src/seedu/addressbook/data/member/UniqueMemberList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "package seedu.addressbook.data.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.Member;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * A list of members. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * @see Member#equals(Object)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public class UniqueMemberList implements Iterable\u003cMember\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static class DuplicateMemberException extends DuplicateDataException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        protected DuplicateMemberException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            super(\"Operation would result in duplicate members\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Signals that an operation targeting a specified member in the list would fail because"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * there is no such matching member in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static class MemberNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private final List\u003cMember\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Constructs empty person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public UniqueMemberList() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Constructs a person list with the given persons."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public UniqueMemberList(Member... members) throws DuplicateMemberException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final List\u003cMember\u003e initialTags \u003d Arrays.asList(members);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            throw new DuplicateMemberException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @param members a collection of persons"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @throws DuplicateMemberException if the {@code persons} contains duplicate persons"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public UniqueMemberList(Collection\u003cMember\u003e members) throws DuplicateMemberException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        if (!Utils.elementsAreUnique(members)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            throw new DuplicateMemberException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        internalList.addAll(members);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public UniqueMemberList(UniqueMemberList source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyMember}s."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public List\u003cReadOnlyMember\u003e immutableListView() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Checks if the list contains an equivalent member as the given argument."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public boolean contains(ReadOnlyMember toCheck) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Adds a member to the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @throws DuplicateMemberException if the member to add is a duplicate of an existing person in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void add(Member toAdd) throws DuplicateMemberException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            throw new DuplicateMemberException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Removes the equivalent member from the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @throws MemberNotFoundException if no such member could be found in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void remove(ReadOnlyMember toRemove) throws MemberNotFoundException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final boolean memberFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        if (!memberFoundAndDeleted) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            throw new MemberNotFoundException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Clears all members in list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Iterator\u003cMember\u003e iterator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                || (other instanceof UniqueMemberList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                \u0026\u0026 this.internalList.equals("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                        ((UniqueMemberList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 136
    }
  },
  {
    "path": "src/seedu/addressbook/data/menu/Menu.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.Price;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Represents a Menu in the Rms."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Menu implements ReadOnlyMenus, Comparable\u003cMenu\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private MenuName name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private Price price;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private Type type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Menu(MenuName name, Price price, Type type, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Menu(ReadOnlyMenus source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this(source.getName(), source.getPrice(), source.getType(), source.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuName getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Replaces this menu item\u0027s tags with the tags in {@code replacement}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void setTags(Set\u003cTag\u003e replacement) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        tags.addAll(replacement);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                || (other instanceof ReadOnlyMenus // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyMenus) other));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return this.name.fullName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Menu target) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.name.fullName.compareTo(target.name.fullName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "//random comment"
      }
    ],
    "authorContributionMap": {
      "px1099": 1,
      "-": 9,
      "SalsabilTasnia": 82
    }
  },
  {
    "path": "src/seedu/addressbook/data/menu/MenuName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class MenuName {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String EXAMPLE \u003d \"Cheese Burger\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Menu Item names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given name string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public MenuName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidName(name)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.asList(fullName.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                || (other instanceof MenuName // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \u0026\u0026 this.fullName.equals(((MenuName) other).fullName)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "SalsabilTasnia": 6
    }
  },
  {
    "path": "src/seedu/addressbook/data/menu/Price.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Price of a particular menu item in the Restaurant Management System."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String EXAMPLE \u003d \"$4.40\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_PRICE_CONSTRAINTS \u003d \"Price should be in SGD and in dollars and cents\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String PRICE_VALIDATION_REGEX \u003d \"\\\\$[1-9][0-9]*(\\\\.[0-9]{2})?|\\\\$0?\\\\.[0-9]{2}|\\\\$0\";//\"^\\\\$\\\\d+([.][0-9]+)?$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //private boolean isPrivate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Validates given phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws IllegalValueException if given phone string is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Price(String price/*, boolean isPrivate*/) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        price \u003d price.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (!isValidPhone(price)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            throw new IllegalValueException(MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.value \u003d price;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public double convertValueOfPricetoDouble(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        String doublevalue \u003d this.value.substring(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        double priceIndouble \u003d Double.parseDouble(doublevalue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return priceIndouble;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static String convertPricetoString(double priceIndouble){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        String valueAsString \u003d Double.toString(priceIndouble);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        String valueAsPrice \u003d \"$\" + valueAsString;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //ensuring the final answer is always returned in 2 decimal places"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        int decimalIndex \u003d valueAsPrice.indexOf(\".\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if((valueAsPrice.substring(decimalIndex)).length()\u003c3){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            valueAsPrice \u003d valueAsPrice + \"0\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }else if((valueAsPrice.substring(decimalIndex)).length()\u003e\u003d3){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            valueAsPrice.substring(0, decimalIndex+3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return valueAsPrice;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Checks if a given string is a valid menu item price."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return test.matches(PRICE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \u0026\u0026 this.value.equals(((Price) other).value)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "SalsabilTasnia": 79
    }
  },
  {
    "path": "src/seedu/addressbook/data/menu/ReadOnlyMenus.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": " * A read-only immutable interface for a Menu Item in the Rms."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public interface ReadOnlyMenus {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    MenuName getName();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    Price getPrice();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    Type getType();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * The returned {@code Set} is a deep copy of the internal {@code Set},"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * changes on the returned list will not affect the menu item\u0027s internal tags."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyMenus other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Formats the food item as text, showing all relevant details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                .append(\" Price: \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        builder.append(getPrice())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                .append(\" Type: \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        builder.append(getType())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Formats the menu name and price as text, showing all relevant details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    default String getAsTextShowMenuAndPrice() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                .append(\" Price: \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        builder.append(getPrice());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Formats a menu item as text, showing only non-private contact details."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    default String getAsTextHidePrivate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        builder.append(getName()).append(\" Price \").append(getPrice()).append(\" Type: \").append(getType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        /*if (!getPrice().isPrivate()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            builder.append(\" Price: \").append(getPrice());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 1,
      "-": 1,
      "SalsabilTasnia": 73
    }
  },
  {
    "path": "src/seedu/addressbook/data/menu/Type.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "package seedu.addressbook.data.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTypeName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class Type {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String EXAMPLE \u003d \"main\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String MESSAGE_TYPE_CONSTRAINTS \u003d \"Item Type should only be one of the few Category:\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                                           + \"\\n\" + \"main\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                                           + \"\\n\" + \"sides\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                                           + \"\\n\" + \"beverage\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                                           + \"\\n\" + \"dessert\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                                           + \"\\n\" + \"others\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                                           + \"\\n\" + \"set meal\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final String TYPE_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws IllegalValueException if given name string is invalid."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Type(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (!isValidTypeName(name)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        this.value \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Returns true if a given string is a valid person name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static boolean isValidTypeName(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if ((test.equals(\"main\")\u003d\u003dtrue || test.equals(\"sides\")\u003d\u003dtrue || test.equals(\"beverage\")\u003d\u003dtrue || test.equals(\"dessert\")\u003d\u003dtrue || test.equals(\"others\")\u003d\u003dtrue || test.equals(\"set meal\")) \u0026\u0026 test.matches(TYPE_VALIDATION_REGEX)\u003d\u003dtrue){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public List\u003cString\u003e getWordsInTypeName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return Arrays.asList(value.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                || (other instanceof Type // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \u0026\u0026 this.value.equals(((Type) other).value)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SalsabilTasnia": 77
    }
  },
  {
    "path": "src/seedu/addressbook/data/menu/UniqueMenuList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * A list of menus. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * @see Menu#equals(Object)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class UniqueMenuList implements Iterable\u003cMenu\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static class DuplicateMenuException extends DuplicateDataException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        protected DuplicateMenuException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            super(\"Operation would result in duplicate menu items\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Signals that an operation targeting a specified menu item in the list would fail because"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * there is no such matching person in the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static class MenuNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private final List\u003cMenu\u003e internalMenuList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Constructs empty menu list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public UniqueMenuList() {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Constructs a menu list with the given menus."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public UniqueMenuList(Menu... menus) throws DuplicateMenuException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final List\u003cMenu\u003e initialTags \u003d Arrays.asList(menus);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            throw new DuplicateMenuException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        internalMenuList.addAll(initialTags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @param menus a collection of menus"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws DuplicateMenuException if the {@code menus} contains duplicate menus"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public UniqueMenuList(Collection\u003cMenu\u003e menus) throws DuplicateMenuException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (!Utils.elementsAreUnique(menus)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            throw new DuplicateMenuException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        internalMenuList.addAll(menus);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public UniqueMenuList(UniqueMenuList source) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        internalMenuList.addAll(source.internalMenuList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyMenus}s."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public List\u003cReadOnlyMenus\u003e immutableListView() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return Collections.unmodifiableList(internalMenuList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Checks if the list contains an equivalent menu item as the given argument."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public boolean contains(ReadOnlyMenus toCheck) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return internalMenuList.contains(toCheck);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Adds a menu item to the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws DuplicateMenuException if the menu item to add is a duplicate of an existing menu item in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void add(Menu toAdd) throws DuplicateMenuException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            throw new DuplicateMenuException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        internalMenuList.add(toAdd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Removes the equivalent menu item from the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws MenuNotFoundException if no such menu item could be found in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void remove(ReadOnlyMenus toRemove) throws MenuNotFoundException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final boolean menuFoundAndDeleted \u003d internalMenuList.remove(toRemove);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (!menuFoundAndDeleted) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            throw new MenuNotFoundException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Clears all persons in list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        internalMenuList.clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Iterator\u003cMenu\u003e iterator() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return internalMenuList.iterator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                || (other instanceof UniqueMenuList // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \u0026\u0026 this.internalMenuList.equals("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                        ((UniqueMenuList) other).internalMenuList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return internalMenuList.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 1,
      "-": 1,
      "SalsabilTasnia": 133
    }
  },
  {
    "path": "src/seedu/addressbook/data/order/Order.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.data.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.member.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.menu.Menu;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Represents an Order in the ordering list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class Order implements ReadOnlyOrder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private ReadOnlyMember customer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Map with Dishes as keys and quantities as Integer values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Use {@code entrySet()} to create a Set for iteration."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private final Map\u003cReadOnlyMenus, Integer\u003e dishItems \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructor used for drafting new order. Uses empty customer instead of null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Order() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.customer \u003d new Member();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.date \u003d new Date();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.price \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructor for new order to be added to the order list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Order(ReadOnlyMember customer, Map\u003cReadOnlyMenus, Integer\u003e dishItems) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.dishItems.putAll(dishItems);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.price \u003d calculatePrice();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.date \u003d new Date();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructor for edited order to keep the original ordered date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Order(ReadOnlyMember customer, Date date, Map\u003cReadOnlyMenus, Integer\u003e dishItems) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.dishItems.putAll(dishItems);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.price \u003d calculatePrice();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Full constructor."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Order(ReadOnlyMember customer, Date date, double price, Map\u003cReadOnlyMenus, Integer\u003e dishItems) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.dishItems.putAll(dishItems);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Order(ReadOnlyOrder source) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this(source.getCustomer(), source.getDate(), source.getPrice(), source.getDishItems());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public ReadOnlyMember getCustomer() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return customer;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Defensively returning the copy of the order\u0027s date"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new Date(date.getTime());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Map\u003cReadOnlyMenus, Integer\u003e getDishItems() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new HashMap\u003c\u003e(dishItems);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void setCustomer(ReadOnlyMember customer) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Replaces the list of dish items with the dish items in {@code replacement}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void setDishItems(Map\u003cReadOnlyMenus, Integer\u003e replacement) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "px1099"
        },
        "content": "        dishItems.clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "px1099"
        },
        "content": "        dishItems.putAll(replacement);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "px1099"
        },
        "content": "        price \u003d calculatePrice();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Calculate and return the total price of an order."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public double calculatePrice() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "px1099"
        },
        "content": "        double result \u003d 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "px1099"
        },
        "content": "        for (Map.Entry\u003cReadOnlyMenus, Integer\u003e m: getDishItems().entrySet()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "px1099"
        },
        "content": "            double dishPrice \u003d m.getKey().getPrice().convertValueOfPricetoDouble();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "px1099"
        },
        "content": "            int dishQuantity \u003d m.getValue();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "px1099"
        },
        "content": "            result +\u003d (dishPrice * dishQuantity);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Get the number of a certain dish item in an order."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public int getDishQuantity(ReadOnlyMenus dish) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (dishItems.containsKey(dish)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return dishItems.get(dish);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Change the quantity of a dish in an order."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Used to add, remove and edit dishes in an order."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void changeDishQuantity(ReadOnlyMenus readOnlyDish, int quantity) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "px1099"
        },
        "content": "        ReadOnlyMenus dish \u003d new Menu(readOnlyDish);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (quantity \u003d\u003d 0) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "px1099"
        },
        "content": "            dishItems.remove(dish);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } else if (quantity \u003e 0) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "px1099"
        },
        "content": "            dishItems.put(dish, quantity);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean hasCustomerField() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return !(customer.equals(new Member()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean hasDishItems() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return !(dishItems.isEmpty());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "px1099"
        },
        "content": "                || (other instanceof ReadOnlyOrder // instanceof handles nulls"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "px1099"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyOrder) other));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "px1099"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return Objects.hash(customer, date, price, dishItems);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 177
    }
  },
  {
    "path": "src/seedu/addressbook/data/order/ReadOnlyOrder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.data.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.menu.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": " * A read-only immutable interface for an Order in the ordering list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "public interface ReadOnlyOrder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "    ReadOnlyMember getCustomer();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "    Date getDate();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "    double getPrice();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "    Map\u003cReadOnlyMenus, Integer\u003e getDishItems();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "    boolean hasCustomerField();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": "    boolean hasDishItems();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyOrder other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": "                \u0026\u0026 other.getCustomer().equals(this.getCustomer()) // state checks here onwards"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": "                \u0026\u0026 other.getDate().equals(this.getDate())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "                \u0026\u0026 other.getDishItems().equals(this.getDishItems()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Formats an order as text, showing all details of customer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (hasCustomerField()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "            builder.append(\"\\tCustomer: \").append(getCustomer().getAsTextShowAll()).append(\"\\n\\t\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "        builder.append(\"\\tDate: \").append(getDate());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": "        for (Map.Entry\u003cReadOnlyMenus, Integer\u003e m: getDishItems().entrySet()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "px1099"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "px1099"
        },
        "content": "            MenuName dishName \u003d m.getKey().getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "px1099"
        },
        "content": "            Price dishPrice \u003d m.getKey().getPrice();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": "            int quantity \u003d m.getValue();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "px1099"
        },
        "content": "            builder.append(\"\\t\\t\\t\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(i).append(\". \")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(dishName.toString()).append(\"\\t\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(\"($\").append(dishPrice.toString()).append(\") \\t\\t\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(\"x\").append(quantity);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "px1099"
        },
        "content": "        builder.append(\"\\n\\t\\tPrice: $\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "px1099"
        },
        "content": "        builder.append(Price.convertPricetoString(getPrice()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Formats an order as text, showing only non-private details of customer."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "px1099"
        },
        "content": "    default String getAsTextHidePrivate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (hasCustomerField()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "px1099"
        },
        "content": "            builder.append(\"\\tCustomer: \").append(getCustomer().getAsTextHidePrivate()).append(\"\\n\\t\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "px1099"
        },
        "content": "        builder.append(\"\\tDate: \").append(getDate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "px1099"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "px1099"
        },
        "content": "        for (Map.Entry\u003cReadOnlyMenus, Integer\u003e m: getDishItems().entrySet()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "px1099"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "px1099"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "px1099"
        },
        "content": "            MenuName dishName \u003d m.getKey().getName();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "px1099"
        },
        "content": "            Price dishPrice \u003d m.getKey().getPrice();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "px1099"
        },
        "content": "            int quantity \u003d m.getValue();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "px1099"
        },
        "content": "            builder.append(\"\\t\\t\\t\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(i).append(\". \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(dishName.toString()).append(\"\\t\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(\"($\").append(dishPrice.toString()).append(\") \\t\\t\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    .append(\"x\").append(quantity);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "px1099"
        },
        "content": "        builder.append(\"\\n\\t\\tPrice: $\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "px1099"
        },
        "content": "        builder.append(Price.convertPricetoString(getPrice()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Formats an draft order as text. Null fields are shown as empty."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "px1099"
        },
        "content": "    default String getDraftDetailsAsText() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "px1099"
        },
        "content": "        builder.append(\"\\t\\tCustomer: \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (hasCustomerField()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "px1099"
        },
        "content": "            builder.append(getCustomer().getAsTextShowAll());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "px1099"
        },
        "content": "            builder.append(\"\u003cempty\u003e\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "px1099"
        },
        "content": "        builder.append(\"\\n\\t\\tDishes: \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (hasDishItems()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "px1099"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "px1099"
        },
        "content": "            for (Map.Entry\u003cReadOnlyMenus, Integer\u003e m: getDishItems().entrySet()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "px1099"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "px1099"
        },
        "content": "                builder.append(\"\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "px1099"
        },
        "content": "                MenuName dishName \u003d m.getKey().getName();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "px1099"
        },
        "content": "                Price dishPrice \u003d m.getKey().getPrice();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "px1099"
        },
        "content": "                int quantity \u003d m.getValue();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "px1099"
        },
        "content": "                builder.append(\"\\t\\t\\t\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "px1099"
        },
        "content": "                        .append(i).append(\". \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "px1099"
        },
        "content": "                        .append(dishName.toString()).append(\"\\t\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "px1099"
        },
        "content": "                        .append(\"($\").append(dishPrice.toString()).append(\") \\t\\t\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "px1099"
        },
        "content": "                        .append(\"x\").append(quantity);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "px1099"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "px1099"
        },
        "content": "            builder.append(\"\u003cempty\u003e\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 118
    }
  },
  {
    "path": "src/seedu/addressbook/data/order/UniqueOrderList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.data.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": " * A list of orders. Does not allow null element or duplicates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": " * @see Order#equals(Object)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueOrderList implements Iterable\u003cOrder\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static class DuplicateOrderException extends DuplicateDataException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "        protected DuplicateOrderException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "            super(\"Operation would result in duplicate orders\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Signals that an operation targeting a specified order in the list would fail because"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * there is no such matching order in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static class OrderNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private final List\u003cOrder\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructs empty order list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueOrderList() {}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructs an order list with the given orders."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public UniqueOrderList(Order... orders) throws DuplicateOrderException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final List\u003cOrder\u003e initialTags \u003d Arrays.asList(orders);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "px1099"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @param orders a collection of persons"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws DuplicateOrderException if the {@code persons} contains duplicate persons"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public UniqueOrderList(Collection\u003cOrder\u003e orders) throws DuplicateOrderException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (!Utils.elementsAreUnique(orders)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "px1099"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "px1099"
        },
        "content": "        internalList.addAll(orders);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueOrderList(UniqueOrderList source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "px1099"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyOrder}s."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public List\u003cReadOnlyOrder\u003e immutableListView() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Checks if the list contains an equivalent order as the given argument."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean contains(ReadOnlyOrder toCheck) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Adds an order to the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws DuplicateOrderException if the person to add is a duplicate of an existing person in the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void add(Order toAdd) throws DuplicateOrderException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "px1099"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "px1099"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Removes the equivalent order from the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws OrderNotFoundException if no such order could be found in the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void remove(ReadOnlyOrder toRemove) throws OrderNotFoundException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final boolean orderFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (!orderFoundAndDeleted) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "px1099"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Clears all orders in list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "px1099"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Iterator\u003cOrder\u003e iterator() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniqueOrderList // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "px1099"
        },
        "content": "                \u0026\u0026 this.internalList.equals("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                ((UniqueOrderList) other).internalList));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 128,
      "-": 11
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person implements ReadOnlyPerson {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Person(){ }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(ReadOnlyPerson source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(), source.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setName(Name name) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setPhone(Phone phone){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setEmail(Email email) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setAddress(Address address){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces this person\u0027s tags with the tags in {@code replacement}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e replacement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.addAll(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ReadOnlyPerson // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 20,
      "-": 90
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#equals(Object)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class DuplicatePersonException extends DuplicateDataException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        protected DuplicatePersonException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that an operation targeting a specified person in the list would fail because"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * there is no such matching person in the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class PersonNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cPerson\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs empty person list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList() {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a person list with the given persons."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(Person... persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cPerson\u003e initialTags \u003d Arrays.asList(persons);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons a collection of persons"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the {@code persons} contains duplicate persons"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(Collection\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Utils.elementsAreUnique(persons)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(persons);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(UniquePersonList source) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyPerson}s."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e immutableListView() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(ReadOnlyPerson toCheck) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(ReadOnlyPerson toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personFoundAndDeleted) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons in list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.internalList.equals("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                        ((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 134,
      "SalsabilTasnia": 1
    }
  },
  {
    "path": "src/seedu/addressbook/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.menu.MenuCommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Attendance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.Rms;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": " * Represents the main Logic of the Rms."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private Rms rms;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The list of person shown to the user most recently.  */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003c? extends ReadOnlyPerson\u003e lastShownList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /** The list of member shown to the user most recently.  */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private List\u003c? extends ReadOnlyMember\u003e lastShownMemberList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /** The list of menu shown to the user most recently.  */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private List\u003c? extends ReadOnlyMenus\u003e lastShownMenuList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** The list of order shown to the user most recently.  */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private List\u003c? extends ReadOnlyOrder\u003e lastShownOrderList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /** The list of employee shown to the user most recently.  */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private List\u003c? extends ReadOnlyEmployee\u003e lastShownEmployeeList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /** The list of employee shown to the user most recently.  */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private List\u003c? extends Attendance\u003e lastShownAttendanceList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Logic() throws Exception{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        setStorage(initializeStorage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        setRms(storage.load());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "    Logic(StorageFile storageFile, Rms rms){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        setStorage(storageFile);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        setRms(rms);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setStorage(StorageFile storage){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "px1099"
        },
        "content": "    void setRms(Rms rms){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "px1099"
        },
        "content": "        this.rms \u003d rms;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the StorageFile object based on the user specified path (if any) or the default storage path."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageFile.InvalidStorageFilePathException if the target file path is incorrect."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile initializeStorage() throws StorageFile.InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStorageFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getPath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Unmodifiable view of the current last shown list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e getLastShownList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableList(lastShownList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Unmodifiable view of the current last shown member list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public List\u003cReadOnlyMember\u003e getLastShownMemberList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return Collections.unmodifiableList(lastShownMemberList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Unmodifiable view of the current last shown order list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public List\u003cReadOnlyEmployee\u003e getLastShownEmployeeList() { return Collections.unmodifiableList(lastShownEmployeeList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Unmodifiable view of the current last shown order list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public List\u003cAttendance\u003e getLastShownAttendanceList() { return Collections.unmodifiableList(lastShownAttendanceList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Unmodifiable view of the current last shown menu list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public List\u003cReadOnlyMenus\u003e getLastShownMenuList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return Collections.unmodifiableList(lastShownMenuList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Unmodifiable view of the current last shown order list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public List\u003cReadOnlyOrder\u003e getLastShownOrderList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return Collections.unmodifiableList(lastShownOrderList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void setLastShownList(List\u003c? extends ReadOnlyPerson\u003e newList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        lastShownList \u003d newList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void setLastShownMenuList(List\u003c? extends ReadOnlyMenus\u003e newList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        lastShownMenuList \u003d newList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AngWM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AngWM"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "px1099"
        },
        "content": "    protected void setLastShownOrderList(List\u003c? extends ReadOnlyOrder\u003e newList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "px1099"
        },
        "content": "        lastShownOrderList \u003d newList;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "px1099"
        },
        "content": "    protected void setLastShownMemberList(List\u003c? extends ReadOnlyMember\u003e newList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "px1099"
        },
        "content": "        lastShownMemberList \u003d newList;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setLastShownEmployeeList(List\u003c? extends ReadOnlyEmployee\u003e newList) { lastShownEmployeeList \u003d newList; }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    protected void setLastShownAttendanceList(List\u003c? extends Attendance\u003e newList) { lastShownAttendanceList \u003d newList; }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the user command, executes it, and returns the result."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception if there was any problem during command execution."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String userCommandText) throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d new Parser().parseCommand(userCommandText);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d execute(command);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        recordResult(result);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, updates storage, and returns the result."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command user command"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return result of the command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception if there was any problem during command execution."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult execute(Command command) throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        command.setData(rms, lastShownList, lastShownMenuList, lastShownOrderList, lastShownMemberList, lastShownEmployeeList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(rms);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Updates the {@link #lastShownList} if the result contains a list of Persons. */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void recordResult(CommandResult result) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e personList \u003d result.getRelevantPersons();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyMenus\u003e\u003e menuList \u003d result.getRelevantMenus();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyOrder\u003e\u003e orderList \u003d result.getRelevantOrders();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyMember\u003e\u003e memberList \u003d result.getRelevantMember();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyEmployee\u003e\u003e employeeList \u003d result.getRelevantEmployee();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (personList.isPresent()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            lastShownList \u003d personList.get();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (menuList.isPresent()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "px1099"
        },
        "content": "            lastShownMenuList \u003d menuList.get();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (orderList.isPresent()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "px1099"
        },
        "content": "            lastShownOrderList \u003d orderList.get();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "px1099"
        },
        "content": "        if (memberList.isPresent()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "px1099"
        },
        "content": "            lastShownMemberList \u003d memberList.get();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (employeeList.isPresent()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            lastShownEmployeeList \u003d employeeList.get();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AngWM"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 11,
      "px1099": 32,
      "AngWM": 3,
      "kianhong95": 29,
      "-": 97,
      "SalsabilTasnia": 13
    }
  },
  {
    "path": "src/seedu/addressbook/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.employee.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.member.MemberAddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.commands.member.MemberDeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.member.MemberListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.menu.MenuAddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.menu.MenuDeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.menu.MenuFindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.menu.MenuListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.menu.MenuViewAllCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.menu.MenuShowMainMenuCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.menu.MenuListByTypeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.menu.MenuClearCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.order.DraftOrderClearCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.order.DraftOrderConfirmCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.order.DraftOrderEditCustomerCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.order.DraftOrderEditDishCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.order.OrderAddCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.order.OrderClearCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.order.OrderDeleteCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.order.OrderListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.AddCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.ClearCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.DeleteCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.HelpCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.ListCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.ViewCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.statistics.StatsEmployeeCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.statistics.StatsHelpCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.statistics.StatsMemberCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.statistics.StatsMenuCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.statistics.StatsOrderCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AngWM"
        },
        "content": "    public static final Pattern INDEX_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctargetIndex\u003e.+)\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern KEYWORDS_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003ckeywords\u003e\\\\S+(?:\\\\s+\\\\S+)*)\"); // one or more keywords separated by whitespace"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final Pattern ITEMWORD_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctype\u003e[^/]+)\"); //one keyword only"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern PERSON_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisPhonePrivate\u003ep?)p/(?\u003cphone\u003e[^/]+)\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisEmailPrivate\u003ep?)e/(?\u003cemail\u003e[^/]+)\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisAddressPrivate\u003ep?)a/(?\u003caddress\u003e[^/]+)\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final Pattern EMPLOYEE_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    + \"p/(?\u003cphone\u003e[^/]+)\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    + \"e/(?\u003cemail\u003e[^/]+)\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    + \"a/(?\u003caddress\u003e[^/]+)\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    + \"pos/(?\u003cposition\u003e[^/]+)\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final Pattern EMPLOYEE_EDIT_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            Pattern.compile(\"(?\u003ctargetIndex\u003e.+ )\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    + \"((p/(?\u003cphone\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    + \"((e/(?\u003cemail\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    + \"((a/(?\u003caddress\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    + \"((pos/(?\u003cposition\u003e[^/]+))?)\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public static final Pattern CLOCK_IN_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public static final Pattern MEMBER_DATA_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\"); // variable number of tags"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public static final Pattern MENU_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    + \" p/(?\u003cprice\u003e[^/]+)\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    + \"type/(?\u003ctype\u003e[^/]+)\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final Pattern ORDER_DISH_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctargetIndex\u003e.+)\\\\s+q/(?\u003cquantity\u003e.+)\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern STATSMENU_DATE_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(f\\\\/(?\u003cdateFrom\u003e(0[1-9]|[12]\\\\d|3[01])(0[1-9]|1[0-2])[12]\\\\d{3}))? ?(t\\\\/(?\u003cdateTo\u003e(0[1-9]|[12]\\\\d|3[01])(0[1-9]|1[0-2])[12]\\\\d{3}))?\"); // variable number of tags"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that the user input could not be parsed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class ParseException extends Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ParseException(String message) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            case EmployeeAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                return prepareEmployeeAdd(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            case EmployeeDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                return prepareEmployeeDelete(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            case EmployeeEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                return prepareEmployeeEdit(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            case EmployeeListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                return new EmployeeListCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            case EmployeeClockInCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                return prepareClockIn(arguments);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            case EmployeeClockOutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                return prepareClockOut(arguments);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            case MemberListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                return new MemberListCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            case MemberAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                return prepareAddMember(arguments);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            case MemberDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                return prepareMemberDelete(arguments);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            case MenuAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return prepareAddMenu(arguments);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            case MenuListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return new MenuListCommand();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            case MenuShowMainMenuCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return new MenuShowMainMenuCommand();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            case MenuListByTypeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return prepareMenuListByType(arguments);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            case MenuViewAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return prepareViewAllMenu(arguments);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            case MenuDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return prepareMenuDelete(arguments);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            case MenuFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return prepareMenuFind(arguments);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            case MenuClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return new MenuClearCommand();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "px1099"
        },
        "content": "            case OrderAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return new OrderAddCommand();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "px1099"
        },
        "content": "            case OrderDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return prepareOrderDelete(arguments);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "px1099"
        },
        "content": "            case OrderClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return new OrderClearCommand();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "px1099"
        },
        "content": "            case OrderListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return new OrderListCommand();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "px1099"
        },
        "content": "            case DraftOrderEditCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return prepareDraftOrderEditCustomer(arguments);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "px1099"
        },
        "content": "            case DraftOrderEditDishCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return prepareDraftOrderEditDish(arguments);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "px1099"
        },
        "content": "            case DraftOrderClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return new DraftOrderClearCommand();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "px1099"
        },
        "content": "            case DraftOrderConfirmCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return new DraftOrderConfirmCommand();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            case StatsEmployeeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                return new StatsEmployeeCommand();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            case StatsMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                return new StatsMemberCommand();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            case StatsMenuCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareStatsMenu(arguments);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            case StatsOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                return new StatsOrderCommand();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            case StatsHelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                return new StatsHelpCommand();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareAdd(arguments);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareDelete(arguments);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareFind(arguments);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareView(arguments);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            case ViewAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareViewAll(arguments);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            case HelpCommand.COMMAND_WORD: // Fallthrough"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the add person command."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareAdd(String args){"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d PERSON_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand("
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"phone\"),"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isPhonePrivate\")),"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"email\"),"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isEmailPrivate\")),"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"address\"),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isAddressPrivate\")),"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Parses arguments in the context of the add member command."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private Command prepareAddMember(String args){"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final Matcher matcher \u003d MEMBER_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new MemberAddCommand("
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                    matcher.group(\"name\")"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            );"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Parses arguments in the context of the add menu command."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private Command prepareAddMenu(String args){"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final Matcher matcher \u003d MENU_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new MenuAddCommand("
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    matcher.group(\"price\"),"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    //isPrivatePrefixPresent(matcher.group(\"isPricePrivate\")),"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    matcher.group(\"type\"),"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            );"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Parses arguments in the context of the add employee command."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private Command prepareEmployeeAdd(String args){"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final Matcher matcher \u003d EMPLOYEE_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmployeeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new EmployeeAddCommand("
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    matcher.group(\"phone\"),"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    matcher.group(\"email\"),"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    matcher.group(\"address\"),"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    matcher.group(\"position\"));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Parses arguments in the context of the clock in command."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private Command prepareClockIn(String args){"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final Matcher matcher \u003d CLOCK_IN_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmployeeClockInCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new EmployeeClockInCommand(matcher.group(\"name\"));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Parses arguments in the context of the clock out command."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private Command prepareClockOut(String args){"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final Matcher matcher \u003d CLOCK_IN_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmployeeClockOutCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new EmployeeClockOutCommand(matcher.group(\"name\"));"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Parses arguments in the context of the delete employee command."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private Command prepareEmployeeDelete(String args) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new EmployeeDeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmployeeDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Parses arguments in the context of the delete member command."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private Command prepareMemberDelete(String args) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new MemberDeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Parses arguments in the context of the edit employee command."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private Command prepareEmployeeEdit(String args) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final Matcher matcher \u003d EMPLOYEE_EDIT_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmployeeEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new EmployeeEditCommand("
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    targetIndex,"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    prepareEditArg(matcher.group(\"phone\"), \"phone\"),"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    prepareEditArg(matcher.group(\"email\"), \"email\"),"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    prepareEditArg(matcher.group(\"address\"), \"address\"),"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    prepareEditArg(matcher.group(\"position\"), \"position\")"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            );"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmployeeEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Returns new information to be edited if it is not empty,"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * else returns a placeholder string indicating that there is no new information"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private static String prepareEditArg(String toCheck, String argumentType){"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if (toCheck \u003d\u003d null || toCheck.isEmpty()) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            switch(argumentType) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                case \"phone\":"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    toCheck \u003d \"00000000\";"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                case \"email\":"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    toCheck \u003d \"noargs@noargs.com\";"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    toCheck \u003d \"noargs\";"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            return toCheck;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return toCheck;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether the private prefix of a contact detail in the add command\u0027s arguments string is present."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isPrivatePrefixPresent(String matchedPrefix) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        return matchedPrefix.equals(\"p\");"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *      * Extracts the new person\u0027s tags from the add command\u0027s tag arguments string."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *      * Merges duplicate tag strings."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Set\u003cString\u003e getTagsFromArgs(String tagArguments) throws IllegalValueException {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagArguments.isEmpty()) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.emptySet();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "        // replace first delimiter prefix, then split"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "        final Collection\u003cString\u003e tagStrings \u003d Arrays.asList(tagArguments.replaceFirst(\" t/\", \"\").split(\" t/\"));"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(tagStrings);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the delete person command."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareDelete(String args) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Parses arguments in the context of the delete menu item command."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private Command prepareMenuDelete(String args) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new MenuDeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Parses arguments in the context of the delete order command."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private Command prepareOrderDelete(String args) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "px1099"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new OrderDeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the view command."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareView(String args) {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewCommand(targetIndex);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the view all command."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareViewAll(String args) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewAllCommand(targetIndex);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewAllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private Command prepareViewAllMenu(String args) {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "            return new MenuViewAllCommand(targetIndex);"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "                    MenuViewAllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the find person command."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareFind(String args) {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(keywordSet);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Parses arguments in the context of the find menu command."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private Command prepareMenuFind(String args) {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    MenuFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new MenuFindCommand(keywordSet);"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Parses arguments in the context of the edit draft order customer command."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private Command prepareDraftOrderEditCustomer(String args) {"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "px1099"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new DraftOrderEditCustomerCommand(targetIndex);"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    DraftOrderEditCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private Command prepareDraftOrderEditDish(String args) {"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "px1099"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final Matcher matcher \u003d ORDER_DISH_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "px1099"
        },
        "content": "            // Validate arg string format"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "px1099"
        },
        "content": "            if (!matcher.matches()) {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "px1099"
        },
        "content": "                throw new ParseException(\"Could not find index number and quantity to parse\");"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "px1099"
        },
        "content": "            }"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final int targetIndex \u003d Integer.parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final int quantity \u003d Integer.parseInt(matcher.group(\"quantity\"));"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new DraftOrderEditDishCommand(targetIndex, quantity);"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "px1099"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "px1099"
        },
        "content": "                    DraftOrderEditDishCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given arguments string as a single index number."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args arguments string to parse as index number"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the parsed index number"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if no region of the args string could be found for the index"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NumberFormatException the args string region is not a valid number"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "    private int parseArgsAsDisplayedIndex(String args) throws ParseException, NumberFormatException {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final Matcher matcher \u003d INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(\"Could not find index number to parse\");"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the stats menu command."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareStatsMenu(String args) {"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d STATSMENU_DATE_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsMenuCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "            return new StatsMenuCommand("
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"dateFrom\"),"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"dateTo\")"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private Command prepareMenuListByType(String args) {"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Matcher matcher \u003d ITEMWORD_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    MenuListByTypeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //final String itemword \u003d matcher.group(\"itemword\");"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new MenuListByTypeCommand(matcher.group(\"type\"));"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 36,
      "px1099": 70,
      "AngWM": 1,
      "kianhong95": 197,
      "-": 279,
      "SalsabilTasnia": 116
    }
  },
  {
    "path": "src/seedu/addressbook/storage/StorageFile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.Rms;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.storage.jaxb.AdaptedRms;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the file used to store address book data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageFile {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Default file path used if the user doesn\u0027t provide the file name. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"Rms.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Note: Note the use of nested classes below."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * More info https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that the given file path does not fulfill the storage filepath constraints."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class InvalidStorageFilePathException extends IllegalValueException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        public InvalidStorageFilePathException(String message) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Signals that some error has occurred while trying to convert and read/write data between the application"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the storage file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class StorageOperationException extends Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final JAXBContext jaxbContext;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidStorageFilePathException if the default path is invalid"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageFile() throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidStorageFilePathException if the given file path is invalid"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageFile(String filePath) throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "px1099"
        },
        "content": "            jaxbContext \u003d JAXBContext.newInstance(AdaptedRms.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(\"jaxb initialisation error\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidPath(path)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InvalidStorageFilePathException(\"Storage file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the given path is acceptable as a storage file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The file path is considered acceptable if it ends with \u0027.txt\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isValidPath(Path filePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves all data to this storage file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void save(Rms rms) throws StorageOperationException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: Note the \u0027try with resource\u0027 statement below."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * More info: https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try (final Writer fileWriter \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                     new BufferedWriter(new FileWriter(path.toFile()))) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final AdaptedRms toSave \u003d new AdaptedRms(rms);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            final Marshaller marshaller \u003d jaxbContext.createMarshaller();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            marshaller.marshal(toSave, fileWriter);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path + \" error: \" + ioe.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error converting address book into storage format\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads data from this storage file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageOperationException if there were errors reading and/or converting data from file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Rms load() throws StorageOperationException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try (final Reader fileReader \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                     new BufferedReader(new FileReader(path.toFile()))) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            final Unmarshaller unmarshaller \u003d jaxbContext.createUnmarshaller();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final AdaptedRms loaded \u003d (AdaptedRms) unmarshaller.unmarshal(fileReader);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            // manual check for missing elements"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            if (loaded.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new StorageOperationException(\"File data missing some elements\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return loaded.toModelType();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: Here, we are using an exception to create the file if it is missing. However, we should minimize"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * using exceptions to facilitate normal paths of execution. If we consider the missing file as a \u0027normal\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * situation (i.e. not truly exceptional) we should not use an exception to handle it."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // create empty file if not found"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "px1099"
        },
        "content": "            final Rms empty \u003d new Rms();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            save(empty);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return empty;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // other errors"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error parsing file data format\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"File contains illegal data values; data type constraints not met\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 10,
      "-": 138
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedAttendance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Attendance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Timing;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * JAXB-friendly adapted tag data holder class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class AdaptedAttendance {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlAttribute (required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private boolean isClockedIn;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private List\u003cAdaptedTiming\u003e timings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public AdaptedAttendance() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Converts a given Attendance into this class for JAXB use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedAttendance"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public AdaptedAttendance(Attendance source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        isClockedIn \u003d source.getClockedIn();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        timings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for (Timing timing : source.getTimings()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            timings.add(new AdaptedTiming(timing));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for (AdaptedTiming timing : timings) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            if (timing.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return Utils.isAnyNull(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Converts this jaxb-friendly adapted attendance object into the Attendance object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Attendance toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final String name \u003d this.name;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final boolean isClockedIn \u003d this.isClockedIn;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final Set\u003cTiming\u003e timingSet \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for (AdaptedTiming timing : timings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            timingSet.add(timing.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Attendance(name, isClockedIn, timingSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 82
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedEmployee.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Employee;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeePhone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeePosition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class AdaptedEmployee {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private String position;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public AdaptedEmployee() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public AdaptedEmployee(ReadOnlyEmployee source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        phone\u003d source.getPhone().value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        position \u003d source.getPosition().value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Converts this jaxb-friendly adapted employee object into the Employee object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted employee"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Employee toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final EmployeeName name \u003d new EmployeeName(this.name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final EmployeePhone phone \u003d new EmployeePhone(this.phone);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final EmployeeEmail email \u003d new EmployeeEmail(this.email);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final EmployeeAddress address \u003d new EmployeeAddress(this.address);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final EmployeePosition position \u003d new EmployeePosition(this.position);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Employee(name, phone, email, address, position);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 61
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedMember.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.Member;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.MemberName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.Points;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " * JAXB-friendly adapted person data holder class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "public class AdaptedMember {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private static class AdaptedContactDetail {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        @XmlValue"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        public String value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        @XmlAttribute(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        public boolean isPrivate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private String points;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private long date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    private AdaptedContactDetail phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    private AdaptedContactDetail email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    private AdaptedContactDetail address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    private List\u003cAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public AdaptedMember() {}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedPerson"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public AdaptedMember(ReadOnlyMember source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        points \u003d source.getPoints().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        date \u003d source.getDate().getTime();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        phone \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        phone.isPrivate \u003d source.getPhone().isPrivate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        phone.value \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        email \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        email.isPrivate \u003d source.getEmail().isPrivate();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        email.value \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        address \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        address.isPrivate \u003d source.getAddress().isPrivate();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        address.value \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            tagged.add(new AdaptedTag(tag));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            if (tag.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//                return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        // second call only happens if phone/email/address are all not null"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return Utils.isAnyNull(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//                || Utils.isAnyNull(phone.value, email.value, address.value);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the Person object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public Member toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final MemberName name \u003d new MemberName(this.name);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final Points points \u003d new Points(Integer.parseInt(this.points));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final Date date \u003d new Date(this.date);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        final Phone phone \u003d new Phone(this.phone.value, this.phone.isPrivate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        final Email email \u003d new Email(this.email.value, this.email.isPrivate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        final Address address \u003d new Address(this.address.value, this.address.isPrivate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return new Member(name, points, date);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 118
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedMenu.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " * JAXB-friendly adapted person data holder class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "public class AdaptedMenu {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private static class AdaptedMenuItemDetail {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        @XmlValue"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        public String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private AdaptedMenuItemDetail price;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private AdaptedMenuItemDetail type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private List\u003cAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public AdaptedMenu() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedPerson"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public AdaptedMenu(ReadOnlyMenus source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        price \u003d new AdaptedMenuItemDetail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //price.isPrivate \u003d source.getPrice().isPrivate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        price.value \u003d source.getPrice().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        type \u003d new AdaptedMenuItemDetail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        type.value \u003d source.getType().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            tagged.add(new AdaptedTag(tag));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            if (tag.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // second call only happens if phone/email/address are all not null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return Utils.isAnyNull(name, price, type)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                || Utils.isAnyNull(price.value, type.value);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the Person object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Menu toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final MenuName name \u003d new MenuName(this.name);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Price price \u003d new Price(this.price.value/*, this.price.isPrivate*/);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Type type \u003d new Type(this.type.value);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return new Menu(name, price, type, tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "SalsabilTasnia": 97
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedOrder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "px1099"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.member.Member;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.menu.Menu;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "px1099"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class AdaptedOrder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private static class AdaptedDishItem {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "px1099"
        },
        "content": "        @XmlElement"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "px1099"
        },
        "content": "        public AdaptedMenu dish;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "px1099"
        },
        "content": "        @XmlElement"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "px1099"
        },
        "content": "        public int quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private AdaptedMember customer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private long date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "px1099"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private List\u003cAdaptedDishItem\u003e dishItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public AdaptedOrder() {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedOrder"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public AdaptedOrder(ReadOnlyOrder source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "px1099"
        },
        "content": "        customer \u003d new AdaptedMember(source.getCustomer());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "px1099"
        },
        "content": "        date \u003d source.getDate().getTime();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "px1099"
        },
        "content": "        price \u003d source.getPrice();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "px1099"
        },
        "content": "        dishItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "        for (Map.Entry\u003cReadOnlyMenus, Integer\u003e m: source.getDishItems().entrySet()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "            AdaptedDishItem dishItem \u003d new AdaptedDishItem();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "px1099"
        },
        "content": "            dishItem.dish \u003d new AdaptedMenu(m.getKey());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "px1099"
        },
        "content": "            dishItem.quantity \u003d m.getValue();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "px1099"
        },
        "content": "            dishItems.add(dishItem);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "px1099"
        },
        "content": "        for (AdaptedDishItem dishItem : dishItems) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "px1099"
        },
        "content": "            if (dishItem.dish.isAnyRequiredFieldMissing() || Utils.isAnyNull(dishItem.quantity)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "px1099"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return customer.isAnyRequiredFieldMissing() || Utils.isAnyNull(date, price);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Converts this jaxb-friendly adapted order object into the Order object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Order toModelType(List\u003cMember\u003e memberList) throws IllegalValueException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final Map\u003cReadOnlyMenus, Integer\u003e dishItems \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "px1099"
        },
        "content": "        for (AdaptedDishItem dishItem : this.dishItems) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "px1099"
        },
        "content": "            dishItems.put(dishItem.dish.toModelType(), dishItem.quantity);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "px1099"
        },
        "content": "        ReadOnlyMember customerClone \u003d this.customer.toModelType();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final ReadOnlyMember customer \u003d retrieveMember(customerClone, memberList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final Date date \u003d new Date(this.date);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final double price \u003d this.price;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new Order(customer, date, price, dishItems);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *  Checks if a member in another feature is in a list of members"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *  Returns the member if found, else create a new Member using the data from the member in the order"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Member retrieveMember(ReadOnlyMember target, List\u003cMember\u003e memberList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "px1099"
        },
        "content": "        for(Member member : memberList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "px1099"
        },
        "content": "            if(target.isSameStateAs(member)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "px1099"
        },
        "content": "                return member;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "px1099"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new Member(target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "px1099"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 105
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedRms.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.Rms;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.order.Order;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.order.UniqueOrderList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.Menu;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.UniqueMenuList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.Member;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.UniqueMemberList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Attendance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Employee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueAttendanceList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.UniqueEmployeeList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted address book data holder class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "px1099"
        },
        "content": "@XmlRootElement(name \u003d \"Rms\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "px1099"
        },
        "content": "public class AdaptedRms {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(name \u003d \"persons\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(name \u003d \"menus\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private List\u003cAdaptedMenu\u003e menus \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @XmlElement(name \u003d \"members\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private List\u003cAdaptedMember\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AngWM"
        },
        "content": "    @XmlElement(name \u003d \"employees\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private List\u003cAdaptedEmployee\u003e employees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(name \u003d \"orders\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cAdaptedOrder\u003e orders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlElement(name \u003d \"attendance\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private List\u003cAdaptedAttendance\u003e attendances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public AdaptedRms() {}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Converts a given Rms into this class for JAXB use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedRms"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /*public AdaptedRms(Rms source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        source.getAllPersons().forEach(person -\u003e persons.add(new AdaptedPerson(person)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "*/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public AdaptedRms(Rms source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        menus \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        employees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        attendances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getAllPersons().forEach(person -\u003e persons.add(new AdaptedPerson(person)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        source.getAllMenus().forEach(menu -\u003e menus.add(new AdaptedMenu(menu)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        source.getAllEmployees().forEach(employee -\u003e employees.add(new AdaptedEmployee(employee)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        source.getAllMembers().forEach(member -\u003e members.add(new AdaptedMember(member)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getAllOrders().forEach(order -\u003e orders.add(new AdaptedOrder(order)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        source.getAllAttendance().forEach(attendance -\u003e attendances.add(new AdaptedAttendance(attendance)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.stream().anyMatch(AdaptedPerson::isAnyRequiredFieldMissing);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public boolean isAnyRequiredFieldMissingMenu() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return menus.stream().anyMatch(AdaptedMenu::isAnyRequiredFieldMissing);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Converts this jaxb-friendly {@code AdaptedRms} object into the corresponding(@code Rms} object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public Rms toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final List\u003cMenu\u003e menuList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AngWM"
        },
        "content": "        final List\u003cEmployee\u003e employeeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final List\u003cMember\u003e memberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cOrder\u003e orderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final List\u003cAttendance\u003e attendanceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AdaptedPerson person : persons) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            personList.add(person.toModelType());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for (AdaptedEmployee employee : employees) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            employeeList.add(employee.toModelType());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AngWM"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (AdaptedMenu menu : menus) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            menuList.add(menu.toModelType());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        for (AdaptedMember member : members) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            memberList.add(member.toModelType());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AdaptedOrder order : orders) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "px1099"
        },
        "content": "            orderList.add(order.toModelType(memberList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for (AdaptedAttendance attendance : attendances) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            attendanceList.add(attendance.toModelType());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return new Rms("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "px1099"
        },
        "content": "                new UniquePersonList(personList),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "px1099"
        },
        "content": "                new UniqueMenuList(menuList),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "px1099"
        },
        "content": "                new UniqueEmployeeList(employeeList),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "px1099"
        },
        "content": "                new UniqueOrderList(orderList),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new UniqueMemberList(memberList),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new UniqueAttendanceList(attendanceList)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "px1099"
        },
        "content": "        );"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 10,
      "px1099": 17,
      "AngWM": 3,
      "kianhong95": 24,
      "-": 64,
      "SalsabilTasnia": 16
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedTiming.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Timing;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * JAXB-friendly adapted tag data holder class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "public class AdaptedTiming {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlAttribute"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @XmlAttribute"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean isClockIn;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public AdaptedTiming() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Converts a given Timing into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedTag"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public AdaptedTiming(Timing source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        time \u003d source.time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        date \u003d source.date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        isClockIn \u003d source.isClockIn;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return Utils.isAnyNull(time, date, isClockIn);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the Tag object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public Timing toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Timing(time, date, isClockIn);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 60
    }
  },
  {
    "path": "src/seedu/addressbook/ui/Formatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Used for formatting text for display. e.g. for adding text decorations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Formatter {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** A decorative prefix added to the beginning of lines printed by Rms */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LINE_PREFIX \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Format of indexed list item */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INDEXED_LIST_ITEM \u003d \"\\t%1$d. %2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats the given strings for displaying to the user. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String format(String... messages) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String m : messages) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(LINE_PREFIX + m.replace(\"\\n\", LS + LINE_PREFIX) + LS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats the given list of persons for displaying to the user. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String format(List\u003c? extends ReadOnlyPerson\u003e persons) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cString\u003e formattedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyPerson person : persons) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedPersons.add(person.getAsTextHidePrivate());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return format(asIndexedList(formattedPersons));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** Formats the given list of menus for displaying to the user. */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public String formatMenuResult(List\u003c? extends ReadOnlyMenus\u003e menus) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final List\u003cString\u003e formattedMenus \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (ReadOnlyMenus menu : menus) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            formattedMenus.add(menu.getAsTextHidePrivate());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return format(asIndexedList(formattedMenus));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AngWM"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /** Formats the given list of orders for displaying to the user. */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public String formatOrderResult(List\u003c? extends ReadOnlyOrder\u003e orders) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final List\u003cString\u003e formattedOrders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "px1099"
        },
        "content": "        for (ReadOnlyOrder order : orders) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "px1099"
        },
        "content": "            formattedOrders.add(order.getAsTextHidePrivate());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "px1099"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "px1099"
        },
        "content": "        return format(asIndexedList(formattedOrders));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /** Formats the given list of members for displaying to the user. */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public String formatMemberResult(List\u003c? extends ReadOnlyMember\u003e members) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final List\u003cString\u003e formattedMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        for (ReadOnlyMember member : members) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            formattedMembers.add(member.getAsTextHidePrivate());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return format(asIndexedList(formattedMembers));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /** Formats the given list of employees for displaying to the user. */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public String formatEmployeeResult(List\u003c? extends ReadOnlyEmployee\u003e employees) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final List\u003cString\u003e formattedOrders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for (ReadOnlyEmployee employee : employees) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            formattedOrders.add(employee.getAsTextShowDetails());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return format(asIndexedList(formattedOrders));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats a list of strings as an indexed list. */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String asIndexedList(List\u003cString\u003e listItems) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder formatted \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        int displayIndex \u003d 0 + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String listItem : listItems) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            formatted.append(getIndexedListItem(displayIndex, listItem)).append(\"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return formatted.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats a string as an indexed list item."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param visibleIndex index for this listing"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getIndexedListItem(int visibleIndex, String listItem) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_INDEXED_LIST_ITEM, visibleIndex, listItem);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 10,
      "px1099": 11,
      "AngWM": 1,
      "kianhong95": 10,
      "-": 67,
      "SalsabilTasnia": 7
    }
  },
  {
    "path": "src/seedu/addressbook/ui/Gui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.Main;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The GUI of the App"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Gui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int INITIAL_WINDOW_WIDTH \u003d 900;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int INITIAL_WINDOW_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private String version;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public Gui(Logic logic_rms, String version) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic_rms;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.version \u003d version;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage, Stoppable mainApp) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AngWM"
        },
        "content": "      // ADD DISPLAY OF STORAGE FILE PATH"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow \u003d createMainWindow(stage, mainApp);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "px1099"
        },
        "content": "        mainWindow.displayRmsWelcomeMessage(version, logic.getStorageFilePath());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AngWM"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow createMainWindow(Stage stage, Stoppable mainApp) throws IOException{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: When calling getResource(), use \u0027/\u0027, instead of File.separator or \u0027\\\\\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More info: http://docs.oracle.com/javase/8/docs/technotes/guides/lang/resources.html#res_name_context"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loader.setLocation(Main.class.getResource(\"ui/mainwindow.fxml\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setTitle(version);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(new Scene(loader.load(), INITIAL_WINDOW_WIDTH, INITIAL_WINDOW_HEIGHT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        MainWindow mainWindow_rms \u003d loader.getController();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow_rms.setLogic(logic);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        mainWindow_rms.setMainApp(mainApp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return mainWindow_rms;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 1,
      "AngWM": 2,
      "-": 48,
      "SalsabilTasnia": 5
    }
  },
  {
    "path": "src/seedu/addressbook/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.menu.ReadOnlyMenus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.order.ReadOnlyOrder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.ReadOnlyEmployee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.*;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Main Window of the GUI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stoppable mainApp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogic(Logic logic){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setMainApp(Stoppable mainApp){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mainApp \u003d mainApp;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea outputConsole;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandInput;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void onCommand(ActionEvent event) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String userCommandText \u003d commandInput.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(userCommandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if(isExitCommand(result)){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                exitApp();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            displayResult(result);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            clearCommandInput();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            display(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void exitApp() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        mainApp.stop();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns true of the result given is the result of an exit command */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isExitCommand(CommandResult result) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return result.feedbackToUser.equals(ExitCommand.MESSAGE_EXIT_ACKNOWEDGEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears the command input box */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void clearCommandInput() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        commandInput.setText(\"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears the output display area */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearOutputConsole(){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Displays the result of a command execution to the user. */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayResult(CommandResult result) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        clearOutputConsole();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e resultPersons \u003d result.getRelevantPersons();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyMenus\u003e\u003e resultMenus \u003d result.getRelevantMenus();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "px1099"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyOrder\u003e\u003e resultOrders \u003d result.getRelevantOrders();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyMember\u003e\u003e resultMembers \u003d result.getRelevantMember();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyEmployee\u003e\u003e resultEmployees \u003d result.getRelevantEmployee();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if(resultPersons.isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            display(resultPersons.get());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "px1099"
        },
        "content": "        } else if (resultOrders.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "px1099"
        },
        "content": "            displayOrderResult(resultOrders.get());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AngWM"
        },
        "content": "        } else if(resultMenus.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AngWM"
        },
        "content": "            displayMenuResult(resultMenus.get());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        } else if(resultMembers.isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            displayMemberResult(resultMembers.get());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        } else if(resultEmployees.isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            displayEmployeeResult(resultEmployees.get());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        display(result.feedbackToUser);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "px1099"
        },
        "content": "    public void displayRmsWelcomeMessage(String version, String orderListStorageFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "px1099"
        },
        "content": "        String orderListStorageFileInfo \u003d String.format(MESSAGE_USING_ORDER_LIST_STORAGE_FILE,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "px1099"
        },
        "content": "                orderListStorageFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        display(MESSAGE_WELCOME, version, MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE, orderListStorageFileInfo);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the list of persons in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Private contact details are hidden."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void display(List\u003c? extends ReadOnlyPerson\u003e persons) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        display(new Formatter().format(persons));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Displays the list of members in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Private contact details are hidden."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private void displayMemberResult(List\u003c? extends ReadOnlyMember\u003e members) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        display(new Formatter().formatMemberResult(members));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Displays the list of orders in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Private contact details are hidden."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private void displayOrderResult(List\u003c? extends ReadOnlyOrder\u003e orders) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "px1099"
        },
        "content": "        display(new Formatter().formatOrderResult(orders));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "px1099"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * Displays the menu list in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "px1099"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private void displayMenuResult(List\u003c? extends ReadOnlyMenus\u003e menus) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "px1099"
        },
        "content": "        display(new Formatter().formatMenuResult(menus));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "px1099"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "px1099"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Displays the employee list in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private void displayEmployeeResult(List\u003c? extends ReadOnlyEmployee\u003e employees) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        display(new Formatter().formatEmployeeResult(employees));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the given messages on the output display area, after formatting appropriately."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void display(String... messages) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.setText(outputConsole.getText() + new Formatter().format(messages));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 13,
      "px1099": 22,
      "AngWM": 2,
      "kianhong95": 11,
      "-": 107,
      "SalsabilTasnia": 3
    }
  },
  {
    "path": "test/java/seedu/addressbook/logic/LogicTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.employee.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.member.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.commands.statistics.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.commands.menu.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.Rms;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.member.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.*;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * See https://github.com/junit-team/junit4/wiki/rules#temporaryfolder-rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile saveFile;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private Rms rms;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFile \u003d new StorageFile(saveFolder.newFile(\"testSaveFile.txt\").getPath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "px1099"
        },
        "content": "        rms \u003d new Rms();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFile.save(rms);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new Logic(saveFile, rms);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Constructor is called in the setup() method which executes before every test, no need to call it here again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the last shown list is empty"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastShownList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastShownMenuList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastShownEmployeeList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastShownMemberList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalid() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"       \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(invalidCommand,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that the result message is correct."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Both the \u0027address book\u0027 and the \u0027last shown list\u0027 are expected to be empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "px1099"
        },
        "content": "     * @see #assertCommandBehavior(String, String, Rms, boolean, List)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "px1099"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedMessage, Rms.empty(),false, Collections.emptyList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *      - the internal address book data are same as those in the {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "px1099"
        },
        "content": "     *      - the storage file content matches data in {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                                       String expectedMessage,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "px1099"
        },
        "content": "                                       Rms expectedRms,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                                       boolean isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                                       List\u003c? extends ReadOnlyPerson\u003e lastShownList) throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(r.getRelevantPersons().isPresent(), isRelevantPersonsExpected);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if(isRelevantPersonsExpected){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(lastShownList, r.getRelevantPersons().get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "px1099"
        },
        "content": "        assertEquals(expectedRms, rms);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(lastShownList, logic.getLastShownList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(rms, saveFile.load());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Executes the Employee command and confirms that the result message is correct."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Both the \u0027address book\u0027 and the \u0027last shown list\u0027 are expected to be empty."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @see #assertEmployeeCommandBehavior(String, String, Rms, boolean, List)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private void assertEmployeeCommandBehavior(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(inputCommand, expectedMessage, Rms.empty(),false, Collections.emptyList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *      - the internal Rms data are same as those in the {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *      - the storage file content matches data in {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private void assertEmployeeCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                               String expectedMessage,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                               Rms expectedRms,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                               boolean isRelevantEmployeesExpected,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                               List\u003c? extends ReadOnlyEmployee\u003e lastShownList) throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(r.getRelevantEmployee().isPresent(), isRelevantEmployeesExpected);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if(isRelevantEmployeesExpected){"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            assertEquals(lastShownList, r.getRelevantEmployee().get());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(expectedRms, rms);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(lastShownList, logic.getLastShownEmployeeList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(rms, saveFile.load());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *      - the internal Rms data are same as those in the {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *      - the storage file content matches data in {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private void assertEmployeeAttendanceCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                               String expectedMessage,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                               Rms expectedRms,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                               boolean isRelevantEmployeesExpected,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                               boolean isRelevantAttendancesExpected,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                               List\u003c? extends ReadOnlyEmployee\u003e lastShownEmployeeList,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                                                         List\u003c? extends Attendance\u003e lastShownAttendanceList) throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(r.getRelevantEmployee().isPresent(), isRelevantEmployeesExpected);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(r.getRelevantAttendance().isPresent(), isRelevantAttendancesExpected);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if(isRelevantEmployeesExpected){"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            assertEquals(lastShownEmployeeList, r.getRelevantEmployee().get());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        if(isRelevantAttendancesExpected){"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            assertEquals(lastShownAttendanceList, r.getRelevantAttendance().get());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(expectedRms, rms);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(lastShownEmployeeList, logic.getLastShownEmployeeList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(lastShownAttendanceList, logic.getLastShownAttendanceList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(rms, saveFile.load());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Executes the Member command and confirms that the result message is correct."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Both the \u0027address book\u0027 and the \u0027last shown list\u0027 are expected to be empty."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @see #assertMemberCommandBehavior(String, String, Rms, boolean, List)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private void assertMemberCommandBehavior(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMemberCommandBehavior(inputCommand, expectedMessage, Rms.empty(),false, Collections.emptyList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *      - the internal address book data are same as those in the {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     *      - the storage file content matches data in {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private void assertMemberCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                                             String expectedMessage,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                                             Rms expectedRms,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                                             boolean isRelevantMemberExpected,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                                             List\u003c? extends ReadOnlyMember\u003e lastShownList) throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertEquals(r.getRelevantMember().isPresent(), isRelevantMemberExpected);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        if(isRelevantMemberExpected){"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            assertEquals(lastShownList, r.getRelevantMember().get());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertEquals(expectedRms, rms);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertEquals(lastShownList, logic.getLastShownMemberList());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertEquals(rms, saveFile.load());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * targeting a single member in the last shown list, using visible index."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param commandWord to test assuming it targets a single employee in the last shown list based on visible index."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private void assertInvalidIndexBehaviorForMemberCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Member m1 \u003d helper.generateMember(1);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Member m2 \u003d helper.generateMember(2);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cMember\u003e lastShownList \u003d helper.generateMemberList(m1, m2);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        logic.setLastShownMemberList(lastShownList);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMemberCommandBehavior(commandWord + \" -1\", expectedMessage, Rms.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMemberCommandBehavior(commandWord + \" 0\", expectedMessage, Rms.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMemberCommandBehavior(commandWord + \" 3\", expectedMessage, Rms.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Executes the menu command and confirms that the result message is correct."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Both the \u0027address book\u0027 and the \u0027last shown menu list\u0027 are expected to be empty."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @see #assertMenuCommandBehavior(String, String, Rms, boolean, List)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private void assertMenuCommandBehavior(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior(inputCommand, expectedMessage, Rms.empty(), false, Collections.emptyList());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Executes the menu command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *      - the internal address book data are same as those in the {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *      - the internal \u0027last shown menu list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     *      - the storage file content matches data in {@code expectedRms} \u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private void assertMenuCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                           String expectedMessage,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                           Rms expectedRms,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                           boolean isRelevantMenuItemsExpected,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                                           List\u003c? extends ReadOnlyMenus\u003e lastShownMenuList) throws Exception {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(r.getRelevantMenus().isPresent(), isRelevantMenuItemsExpected);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        if(isRelevantMenuItemsExpected){"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            assertEquals(lastShownMenuList, r.getRelevantMenus().get());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(expectedRms, rms);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(lastShownMenuList, logic.getLastShownMenuList());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(rms, saveFile.load());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the stats command and confirms that the result message is correct\u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatsCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                                           Rms expectedRms) throws Exception {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedRms, rms);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(rms, saveFile.load());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_unknownCommandWord() throws Exception {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        String unknownCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(unknownCommand, HelpCommand.MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help() throws Exception {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"help\", HelpCommand.MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit() throws Exception {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"exit\", ExitCommand.MESSAGE_EXIT_ACKNOWEDGEMENT);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_clear() throws Exception {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        rms.addPerson(helper.generatePerson(1, true));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        rms.addPerson(helper.generatePerson(2, true));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        rms.addPerson(helper.generatePerson(3, true));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "px1099"
        },
        "content": "        assertCommandBehavior(\"clear\", ClearCommand.MESSAGE_SUCCESS, Rms.empty(), false, Collections.emptyList());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add wrong args wrong args\", expectedMessage);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name 12345 e/valid@email.butNoPhonePrefix a/valid, address\", expectedMessage);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 valid@email.butNoPrefix a/valid, address\", expectedMessage);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 e/valid@email.butNoAddressPrefix valid, address\", expectedMessage);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_invalidPersonData() throws Exception {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add []\\\\[;] p/12345 e/valid@e.mail a/valid, address\", Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/not_numbers e/valid@e.mail a/valid, address\", Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 e/notAnEmail a/valid, address\", Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 e/valid@e.mail a/valid, address t/invalid_-[.tag\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_successful() throws Exception {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toBeAdded \u003d helper.adam();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "px1099"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, toBeAdded),"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_addDuplicate_notAllowed() throws Exception {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toBeAdded \u003d helper.adam();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        rms.addPerson(toBeAdded); // person already in internal address book"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "                helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_list_showsAllPersons() throws Exception {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(false, true);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e expectedList \u003d expectedAB.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, false, true);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"list\","
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_view_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view \", expectedMessage);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_view_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"view\");"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "     * targeting a single person in the last shown list, using visible index."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandWord to test assuming it targets a single person in the last shown list based on visible index."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInvalidIndexBehaviorForCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(false, true);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertCommandBehavior(commandWord + \" -1\", expectedMessage, Rms.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertCommandBehavior(commandWord + \" 0\", expectedMessage, Rms.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertCommandBehavior(commandWord + \" 3\", expectedMessage, Rms.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_view_onlyShowsNonPrivate() throws Exception {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(lastShownList);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, lastShownList);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 1\","
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p1.getAsTextHidePrivate()),"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 2\","
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getAsTextHidePrivate()),"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_tryToViewMissingPerson_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(p2);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        rms.addPerson(p2);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 1\","
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall \", expectedMessage);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"viewall\");"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_alsoShowsPrivate() throws Exception {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(lastShownList);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, lastShownList);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 1\","
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p1.getAsTextShowAll()),"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 2\","
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getAsTextShowAll()),"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_tryToViewAllPersonMissingInAddressBook_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(p1);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        rms.addPerson(p1);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 2\","
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete \", expectedMessage);"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"delete\");"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_removesCorrectPerson() throws Exception {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(threePersons);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.removePerson(p2);"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, threePersons);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, p2),"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                threePersons);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_missingInAddressBook() throws Exception {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(threePersons);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.removePerson(p2);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, threePersons);"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        rms.removePerson(p2);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                threePersons);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find \", expectedMessage);"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_onlyMatchesFullWordsInNames() throws Exception {"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla KEY bla bceofeia\");"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"KE Y\");"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEYKEYKEY sduauo\");"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(fourPersons);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, fourPersons);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY\","
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_isCaseSensitive() throws Exception {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla KEY bla bceofeia\");"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"key key\");"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEy sduauo\");"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(fourPersons);"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, fourPersons);"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY\","
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_matchesIfAnyKeywordPresent() throws Exception {"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla rAnDoM bla bceofeia\");"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"key key\");"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEy sduauo\");"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRms(fourPersons);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRms(rms, fourPersons);"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY rAnDoM\","
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addemp_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmployeeAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp wrong args wrong args\", expectedMessage);"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp Valid Name 12345 e/valid@email.butNoPhonePrefix a/valid, address pos/validPos\", expectedMessage);"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp Valid Name p/12345 valid@email.butNoPrefix a/valid, address pos/validPos\", expectedMessage);"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp Valid Name p/12345 e/valid@email.butNoAddressPrefix valid, address pos/validPos\", expectedMessage);"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp Valid Name p/12345 e/valid@email a/butNoAddressPrefix valid, address butNoPositionPrefix\", expectedMessage);"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addemp_invalidPersonData() throws Exception {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp []\\\\[;] p/12345 e/valid@e.mail a/valid, address pos/validPos\", EmployeeName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp Valid Name p/not_numbers e/valid@e.mail a/valid, address pos/validPos\", EmployeePhone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp Valid Name p/12345 e/notAnEmail a/valid, address pos/validPos\", EmployeeEmail.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addemp Valid Name p/12345 e/valid@e.mail a/valid, address pos/@#%\u0026%\", EmployeePosition.MESSAGE_POSITION_CONSTRAINTS);"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addemp_successful() throws Exception {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee toBeAdded \u003d helper.peter();"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        expectedAB.addEmployee(toBeAdded);"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(helper.generateAddEmpCommand(toBeAdded),"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                String.format(EmployeeAddCommand.MESSAGE_SUCCESS, toBeAdded),"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_statsmenu_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsMenuCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior("
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"statsmenu InvalidDate\", expectedMessage);"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior("
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"statsmenu f/00192048 t/99022018\", expectedMessage);"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior("
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"statsmenu f/062017 t/2018\", expectedMessage);"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//    public void invalidMemberInOrder() throws Exception {"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//        Member m1 \u003d helper.generateMember(1);"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//        Member toBeAdded \u003d helper.eve();"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//        expectedAB.addMember(toBeAdded);"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//        expectedAB.findMemberInOrder(m1);"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//    public void validMemberInOrder() throws Exception {"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//        Member m1 \u003d helper.generateMember(1);"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//        expectedAB.addMember(m1);"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//        expectedAB.findMemberInOrder(m1);"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addempDuplicate_notAllowed() throws Exception {"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee toBeAdded \u003d helper.peter();"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        expectedAB.addEmployee(toBeAdded);"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        logic.execute(helper.generateAddEmpCommand(toBeAdded)); //employee already in Rms"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior("
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                helper.generateAddEmpCommand(toBeAdded),"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                EmployeeAddCommand.MESSAGE_DUPLICATE_EMPLOYEE,"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_listemp_successful() throws Exception {"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e1 \u003d helper.generateEmployee(1);"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e2 \u003d helper.generateEmployee(2);"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cEmployee\u003e lastShownList \u003d helper.generateEmployeeList(e1, e2);"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedRms \u003d helper.generateRmsEmployees(lastShownList);"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003c? extends ReadOnlyEmployee\u003e expectedList \u003d expectedRms.getAllEmployees().immutableListView();"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addEmployeesToRms(rms, lastShownList);"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(\"listemp\","
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Command.getMessageForEmployeeListShownSummary(expectedList),"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedRms,"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * targeting a single employee in the last shown list, using visible index."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param commandWord to test assuming it targets a single employee in the last shown list based on visible index."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private void assertInvalidIndexBehaviorForEmployeeCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e1 \u003d helper.generateEmployee(1);"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e2 \u003d helper.generateEmployee(2);"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cEmployee\u003e lastShownList \u003d helper.generateEmployeeList(e1, e2);"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        logic.setLastShownEmployeeList(lastShownList);"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(commandWord + \" -1\", expectedMessage, Rms.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(commandWord + \" 0\", expectedMessage, Rms.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(commandWord + \" 3\", expectedMessage, Rms.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_delemp_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmployeeDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(\"delemp \", expectedMessage);"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(\"delemp arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_delemp_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertInvalidIndexBehaviorForEmployeeCommand(\"delemp\");"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_delemp_removesCorrectEmployee() throws Exception {"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e1 \u003d helper.generateEmployee(1);"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e2 \u003d helper.generateEmployee(2);"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e3 \u003d helper.generateEmployee(3);"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Attendance a1 \u003d helper.generateAttendnace(1);"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Attendance a2 \u003d helper.generateAttendnace(2);"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Attendance a3 \u003d helper.generateAttendnace(3);"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cEmployee\u003e lastShowEmployeeList \u003d helper.generateEmployeeList(e1, e2, e3);"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cAttendance\u003e lastShownAttendanceList \u003d helper.generateAttendanceList(a1, a2, a3);"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedRms \u003d helper.generateRmsEmployeesAndAttendances(lastShowEmployeeList, lastShownAttendanceList);"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        expectedRms.removeEmployee(e2);"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addEmployeesToRms(rms, lastShowEmployeeList);"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addAttendancesToRms(rms, lastShownAttendanceList);"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        logic.setLastShownEmployeeList(lastShowEmployeeList);"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        logic.setLastShownAttendanceList(lastShownAttendanceList);"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeAttendanceCommandBehavior(\"delemp 2\","
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                String.format(EmployeeDeleteCommand.MESSAGE_DELETE_EMPLOYEE_SUCCESS, e2),"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedRms,"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                lastShowEmployeeList,"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                lastShownAttendanceList);"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_delemp_missingInRms() throws Exception {"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e1 \u003d helper.generateEmployee(1);"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e2 \u003d helper.generateEmployee(2);"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Employee e3 \u003d helper.generateEmployee(3);"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cEmployee\u003e threeEmployees \u003d helper.generateEmployeeList(e1, e2, e3);"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedRms \u003d helper.generateRmsEmployees(threeEmployees);"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        expectedRms.removeEmployee(e2);"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addEmployeesToRms(rms, threeEmployees);"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        rms.removeEmployee(e2);"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        logic.setLastShownEmployeeList(threeEmployees);"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEmployeeCommandBehavior(\"delemp 2\","
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Messages.MESSAGE_EMPLOYEE_NOT_IN_RMS,"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedRms,"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                threeEmployees);"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addmember_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMemberCommandBehavior("
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addmember Valid Name p/\", expectedMessage);"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addmember_invalidMemberData() throws Exception {"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMemberCommandBehavior("
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addmember []\\\\[;]\", MemberName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addmember_successful() throws Exception {"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Member toAdd \u003d helper.eve();"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        expectedAB.addMember(toAdd);"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMemberCommandBehavior(helper.generateAddMemberCommand(toAdd),"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                String.format(MemberAddCommand.MESSAGE_SUCCESS, toAdd),"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addmemberDuplicate_notAllowed() throws Exception {"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Member toBeAdded \u003d helper.eve();"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "px1099"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        expectedAB.addMember(toBeAdded);"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        logic.execute(helper.generateAddMemberCommand(toBeAdded)); //member already in Rms"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMemberCommandBehavior("
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                helper.generateAddMemberCommand(toBeAdded),"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                MemberAddCommand.MESSAGE_DUPLICATE_MEMBER,"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_listmember_successful() throws Exception {"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Member m1 \u003d helper.generateMember(1);"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Member m2 \u003d helper.generateMember(2);"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cMember\u003e lastShownList \u003d helper.generateMemberList(m1, m2);"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedRms \u003d helper.generateRmsMember(lastShownList);"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003c? extends ReadOnlyMember\u003e expectedList \u003d expectedRms.getAllMembers().immutableListView();"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addMembersToRms(rms, lastShownList);"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMemberCommandBehavior(\"listmembers\","
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Command.getMessageForMemberListShownSummary(expectedList),"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedRms,"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void execute_delmember_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemberDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertMemberCommandBehavior(\"delmember \", expectedMessage);"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertMemberCommandBehavior(\"delmember arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void execute_delmember_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertInvalidIndexBehaviorForMemberCommand(\"delmember\");"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_delmember_removesCorrectMember() throws Exception {"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Member m1 \u003d helper.generateMember(1);"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Member m2 \u003d helper.generateMember(2);"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Member m3 \u003d helper.generateMember(3);"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cMember\u003e threeMembers \u003d helper.generateMemberList(m1, m2, m3);"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedRms \u003d helper.generateRmsMember(threeMembers);"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        expectedRms.removeMember(m2);"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addMembersToRms(rms, threeMembers);"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        logic.setLastShownMemberList(threeMembers);"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMemberCommandBehavior(\"delmember 2\","
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                String.format(MemberDeleteCommand.MESSAGE_DELETE_MEMBER_SUCCESS, m2),"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedRms,"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                threeMembers);"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_delmember_missingInRms() throws Exception {"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        Member m1 \u003d helper.generateMember(1);"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        Member m2 \u003d helper.generateMember(2);"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        Member m3 \u003d helper.generateMember(3);"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        List\u003cMember\u003e threeMembers \u003d helper.generateMemberList(m1, m2, m3);"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        Rms expectedRms \u003d helper.generateRmsMember(threeMembers);"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        expectedRms.removeMember(m2);"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        helper.addMembersToRms(rms, threeMembers);"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        rms.removeMember(m2);"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        logic.setLastShownMemberList(threeMembers);"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertMemberCommandBehavior(\"delmember 2\","
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Messages.MESSAGE_MEMBER_NOT_IN_RMS,"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                expectedRms,"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                threeMembers);"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void updateMemberPoints() throws Exception {"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Points expectedPoints \u003d new Points();"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Member m1 \u003d helper.eve();"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        m1.updatePoints(-50);"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Points actualPoints \u003d m1.getPoints();"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertEquals(expectedPoints.getPoints(), actualPoints.getPoints());"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addmenu_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior("
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addmenu wrong args wrong args\", expectedMessage);"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior("
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addmenu Valid Name $12345\", expectedMessage);"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior("
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addmenu Valid Name p/$12345 butNoTypePrefix\", expectedMessage);"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addmenu_invalidMenuData() throws Exception {"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior("
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addmenu []\\\\[;] p/$12345 type/valid, type\", MenuName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior("
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addmenu Valid Name p/not_numbers type/valid, type\", Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior("
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addmenu Valid Name p/$12345 type/@#%\u0026\", Type.MESSAGE_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior("
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                \"addmenu Valid Name p/$12345 type/valid, type t/invalid_-[.tag\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addmenu_successful() throws Exception {"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu toBeAdded \u003d helper.burger();"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        expectedAB.addMenu(toBeAdded);"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior(helper.generateMenuAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                String.format(MenuAddCommand.MESSAGE_SUCCESS, toBeAdded),"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_addmenuDuplicate_notAllowed() throws Exception {"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu toBeAdded \u003d helper.burger();"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        expectedAB.addMenu(toBeAdded);"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        rms.addMenu(toBeAdded); // menu already in internal RMS"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior("
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                helper.generateMenuAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                MenuAddCommand.MESSAGE_DUPLICATE_MENU_ITEM,"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    //test for MenuListCommand"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_listmenu_showsAllMenuItems() throws Exception {"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedRMS \u003d new Rms();"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003c? extends ReadOnlyMenus\u003e expectedRMSList \u003d expectedRMS.getAllMenus().immutableListView();"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        //helper.addToRMS(rms, expectedRMSList);"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior(\"listmenu\","
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Command.getMessageForMenuListShownSummary(expectedRMSList),"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedRMS,"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                expectedRMSList);"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_menulistByTpe_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuListByTypeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior(\"listmenutype \", expectedMessage);"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_menulistByType_successful_MatchesTheSpecifiedCategory() throws Exception {"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu mTarget1 \u003d helper.generateMenuWithGivenNameAndType(\"Cheese Burger\",\"main\");"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu mTarget2 \u003d helper.generateMenuWithGivenNameAndType(\"Chicken Burger\", \"main\");"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu m1 \u003d helper.generateMenuWithGivenNameAndType(\"Salad\", \"sides\");"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu m2 \u003d helper.generateMenuWithGivenNameAndType(\"Sprite\", \"beverage\");"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cMenu\u003e fourMenus \u003d helper.generateMenuList(m1, mTarget1, m2, mTarget2);"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRmsMenu(fourMenus);"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cMenu\u003e expectedList \u003d helper.generateMenuList(mTarget1, mTarget2);"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRmsMenu(rms, fourMenus);"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior(\"listmenutype main\","
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Command.getMessageForMenuListShownSummary(expectedList),"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_menulistByType_moreThanOneTypeSearchNotAllowed() throws Exception {"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu mTarget1 \u003d helper.generateMenuWithGivenNameAndType(\"Cheese Burger\",\"main\");"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu mTarget2 \u003d helper.generateMenuWithGivenNameAndType(\"Chicken Burger\", \"main\");"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu m1 \u003d helper.generateMenuWithGivenNameAndType(\"Salad\", \"sides\");"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu m2 \u003d helper.generateMenuWithGivenNameAndType(\"Sprite\", \"beverage\");"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cMenu\u003e fourMenus \u003d helper.generateMenuList(m1, mTarget1, m2, mTarget2);"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRmsMenu(fourMenus);"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cMenu\u003e expectedList \u003d helper.generateMenuList();"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRmsMenu(rms, fourMenus);"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior(\"listmenutype main sides\","
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                MenuListByTypeCommand.MESSAGE_ERROR,"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Test case to check if the argument entered is one of the following or not: main, sides, beverage, dessert, others, set meals"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * If the arguments are not one of the following, then the argument is Invalid"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_menulistByType_invalidArgs() throws Exception {"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu mTarget1 \u003d helper.generateMenuWithGivenNameAndType(\"Cheese Burger\",\"main\");"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu mTarget2 \u003d helper.generateMenuWithGivenNameAndType(\"Chicken Burger\", \"main\");"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu m1 \u003d helper.generateMenuWithGivenNameAndType(\"Salad\", \"sides\");"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu m2 \u003d helper.generateMenuWithGivenNameAndType(\"Sprite\", \"beverage\");"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cMenu\u003e fourMenus \u003d helper.generateMenuList(m1, mTarget1, m2, mTarget2);"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms expectedAB \u003d helper.generateRmsMenu(fourMenus);"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cMenu\u003e expectedList \u003d helper.generateMenuList();"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        helper.addToRmsMenu(rms, fourMenus);"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior(\"listmenutype burger\","
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                MenuListByTypeCommand.MESSAGE_ERROR,"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " //   /**"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "  //   * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "   //  * targeting a single menu item in the last shown menu list, using visible index."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    // * @param commandWord to test assuming it targets a single menu item in the last shown menu list based on visible index."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     //*/"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    private void assertInvalidIndexBehaviorForMenuCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_MENU_ITEM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu e1 \u003d helper.generateMenuItem(1);"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Menu e2 \u003d helper.generateMenuItem(2);"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cMenu\u003e lastShownMenuList \u003d helper.generateMenuList(e1, e2);"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        logic.setLastShownMenuList(lastShownMenuList);"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior(commandWord + \" -1\", expectedMessage, Rms.empty(), false, lastShownMenuList);"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior(commandWord + \" 0\", expectedMessage, Rms.empty(), false, lastShownMenuList);"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior(commandWord + \" 3\", expectedMessage, Rms.empty(), false, lastShownMenuList);"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    */"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    //test for MenuViewAll Command testing for valid arguments"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_MenuviewAll_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior(\"viewallmenu \", expectedMessage);"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior(\"viewallmenu arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_deletemenu_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior(\"deletemenu \", expectedMessage);"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertMenuCommandBehavior(\"deletemenu arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    public void execute_deletemenu_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        assertInvalidIndexBehaviorForMenuCommand(\"deletemenu\");"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    public void invalidMemberInOrder() throws Exception {"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        Member m1 \u003d helper.generateMember(1);"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        Member toBeAdded \u003d helper.eve();"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        expectedAB.addMember(toBeAdded);"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        expectedAB.findMemberInOrder(m1);"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    public void validMemberInOrder() throws Exception {"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        Member m1 \u003d helper.generateMember(1);"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        Rms expectedAB \u003d new Rms();"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        expectedAB.addMember(m1);"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//        expectedAB.findMemberInOrder(m1);"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 102,
      "px1099": 11,
      "kianhong95": 572,
      "-": 483,
      "SalsabilTasnia": 51
    }
  },
  {
    "path": "test/java/seedu/addressbook/logic/TestDataHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Attendance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.Employee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeAddress;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeEmail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeeName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeePhone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.employee.EmployeePosition;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.member.Member;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.member.MemberName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.menu.Menu;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.menu.MenuName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.menu.Price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.menu.Type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.Rms;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " * A utility class to generate test data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kianhong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "class TestDataHelper{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Person adam() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Name name \u003d new Name(\"Adam Brown\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Phone privatePhone \u003d new Phone(\"111111\", true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Email email \u003d new Email(\"adam@gmail.com\", false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Address privateAddress \u003d new Address(\"111, alpha street\", true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(Arrays.asList(tag1, tag2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Person(name, privatePhone, email, privateAddress, tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Employee peter() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        EmployeeName name \u003d new EmployeeName(\"Peter Lee\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        EmployeePhone phone \u003d new EmployeePhone(\"91234567\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        EmployeeEmail email \u003d new EmployeeEmail(\"PeterLee89@rms.com\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        EmployeeAddress address \u003d new EmployeeAddress(\"Clementi Ave 2, Blk 543 #13-12\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        EmployeePosition position \u003d new EmployeePosition(\"Cashier\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Employee(name, phone, email, address, position);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Member eve() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        MemberName name \u003d new MemberName(\"Eve\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Member(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Menu burger() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        MenuName name \u003d new MenuName(\"Cheese Burger\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Price price \u003d new Price(\"$5.00\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Type type \u003d new Type(\"main\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(Arrays.asList(tag1, tag2));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Menu(name, price, type, tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates a valid person using the given seed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Running this function with the same parameter values guarantees the returned person will have the same state."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Each unique seed will generate a unique Person object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param seed used to generate the person data field values"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param isAllFieldsPrivate determines if private-able fields (phone, email, address) will be private"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Person generatePerson(int seed, boolean isAllFieldsPrivate) throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new Name(\"Person \" + seed),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new Phone(\"\" + Math.abs(seed), isAllFieldsPrivate),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new Email(seed + \"@email\", isAllFieldsPrivate),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new Address(\"House of \" + seed, isAllFieldsPrivate),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag\" + Math.abs(seed)), new Tag(\"tag\" + Math.abs(seed + 1))))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates a valid employee using the given seed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Running this function with the same parameter values guarantees the returned employee will have the same state."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Each unique seed will generate a unique Employee object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param seed used to generate the employee data field values"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Employee generateEmployee(int seed) throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Employee("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new EmployeeName(\"Employee \" + seed),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new EmployeePhone(\"\" + Math.abs(seed)),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new EmployeeEmail(seed + \"@email\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new EmployeeAddress(\"House of \" + seed),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new EmployeePosition(\"Position \"+ seed)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates a valid attendance using the given seed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Running this function with the same parameter values guarantees the returned attendance will have the same state."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Each unique seed will generate a unique Attendance object."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param seed used to generate the attendnace data field values"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Attendance generateAttendnace(int seed) throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Attendance(\"Employee \" + seed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates a valid member using the given seed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Running this function with the same parameter values guarantees the returned employee will have the same state."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Each unique seed will generate a unique Employee object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param seed used to generate the employee data field values"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Member generateMember(int seed) throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Member("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new MemberName(\"Member \" + seed)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates a valid menu item using the given seed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Running this function with the same parameter values guarantees the returned menu item will have the same state."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Each unique seed will generate a unique Person object."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param seed used to generate the menu item data field values"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Menu generateMenuItem(int seed) throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Menu("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new MenuName(\"Person \" + seed),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new Price(\"\" + Math.abs(seed)),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new Type((\"Type \" + seed)),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag\" + Math.abs(seed)), new Tag(\"tag\" + Math.abs(seed + 1))))"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /** Generates the correct add command based on the person given */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    String generateAddCommand(Person p) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add(\"add\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add(p.getName().toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add((p.getPhone().isPrivate() ? \"pp/\" : \"p/\") + p.getPhone());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add((p.getEmail().isPrivate() ? \"pe/\" : \"e/\") + p.getEmail());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add((p.getAddress().isPrivate() ? \"pa/\" : \"a/\") + p.getAddress());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Set\u003cTag\u003e tags \u003d p.getTags();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for(Tag t: tags){"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            cmd.add(\"t/\" + t.tagName);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return cmd.toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /** Generates the correct add command based on the person given */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    String generateAddEmpCommand(Employee e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add(\"addemp\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add(e.getName().toString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add(\"p/\" + e.getPhone().toString());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add(\"e/\" + e.getEmail().toString());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add(\"a/\" + e.getAddress().toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add(\"pos/\" + e.getPosition().toString());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return cmd.toString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /** Generates the correct add member command based on the member given */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    String generateAddMemberCommand(Member e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add(\"addmember\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add(e.getName().toString());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return cmd.toString();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /** Generates the correct add menu command based on the menu item given */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    String generateMenuAddCommand(Menu m) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add(\"addmenu\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add(m.getName().toString());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add((\"p/\") + m.getPrice());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        cmd.add((\"type/\") + m.getType());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Set\u003cTag\u003e tags \u003d m.getTags();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for(Tag t: tags){"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            cmd.add(\"t/\" + t.tagName);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return cmd.toString();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates an Rms with auto-generated persons."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if all contact details of respective persons should be set to"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Rms generateRms(Boolean... isPrivateStatuses) throws Exception{"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms rms \u003d new Rms();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        addToRms(rms, isPrivateStatuses);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return rms;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates an Rms based on the list of Persons given."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Rms generateRms(List\u003cPerson\u003e persons) throws Exception{"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms rms \u003d new Rms();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        addToRms(rms, persons);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return rms;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates an Rms based on the list of Employees given."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Rms generateRmsEmployees(List\u003cEmployee\u003e employees) throws Exception{"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms rms \u003d new Rms();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        addEmployeesToRms(rms, employees);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return rms;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates an Rms based on the list of Employees and Attendances given."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Rms generateRmsEmployeesAndAttendances(List\u003cEmployee\u003e employees, List\u003cAttendance\u003e attendances) throws Exception{"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms rms \u003d new Rms();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        addEmployeesToRms(rms, employees);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        addAttendancesToRms(rms, attendances);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return rms;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates an Rms based on the list of Menu given."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Rms generateRmsMenu(List\u003cMenu\u003e menus) throws Exception{"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms rms \u003d new Rms();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        addToRmsMenu(rms, menus);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return rms;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates an Rms based on the list of Member given."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Rms generateRmsMember(List\u003cMember\u003e members) throws Exception{"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        Rms rms \u003d new Rms();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        addMembersToRms(rms, members);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return rms;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Adds auto-generated Person objects to the given Rms"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param rms The Rms to which the Persons will be added"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if all contact details of generated persons should be set to"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    void addToRms(Rms rms, Boolean... isPrivateStatuses) throws Exception{"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        addToRms(rms, generatePersonList(isPrivateStatuses));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Adds the given list of Persons to the given Rms"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    void addToRms(Rms rms, List\u003cPerson\u003e personsToAdd) throws Exception{"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for(Person p: personsToAdd){"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            rms.addPerson(p);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Adds auto-generated Menu objects to the given Rms"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param rms The Rms to which the Menus will be added"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if details of generated persons should be set to"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "         /*void addToRMS(Rms rms, Boolean... isPrivateStatuses) throws Exception{"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "             addToRMS(rms, generatePersonList(isPrivateStatuses));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "         }*/"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Adds the given list of Menus to the given Rms"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    void addToRmsMenu(Rms rms, List\u003cMenu\u003e menusToAdd) throws Exception{"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for(Menu m: menusToAdd){"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            rms.addMenu(m);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Adds the given list of Employeees to the given Rms."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    void addEmployeesToRms(Rms rms, List\u003cEmployee\u003e employeesToAdd) throws Exception{"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for(Employee e: employeesToAdd){"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            rms.addEmployee(e);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Adds the given list of Employeees to the given Rms."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    void addAttendancesToRms(Rms rms, List\u003cAttendance\u003e attendancesToAdd) throws Exception{"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for(Attendance a: attendancesToAdd){"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            rms.addAttendance(a);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Adds the given list of Members to the given Rms"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    void addMembersToRms(Rms rms, List\u003cMember\u003e membersToAdd) throws Exception{"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for(Member member: membersToAdd){"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            rms.addMember(member);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Creates a list of Persons based on the give Person objects."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    List\u003cPerson\u003e generatePersonList(Person... persons) throws Exception{"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for(Person p: persons){"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            personList.add(p);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return personList;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Creates a list of Employees based on the give Employee objects."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    List\u003cEmployee\u003e generateEmployeeList(Employee... employees) throws Exception{"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cEmployee\u003e employeeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for(Employee e: employees){"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            employeeList.add(e);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return employeeList;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Creates a list of Attendances based on the give Attendance objects."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    List\u003cAttendance\u003e generateAttendanceList(Attendance... attendances) throws Exception{"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cAttendance\u003e attendanceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for(Attendance a: attendances){"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            attendanceList.add(a);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return attendanceList;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Creates a list of Members based on the give Member objects."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    List\u003cMember\u003e generateMemberList(Member... members) throws Exception{"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cMember\u003e memberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for(Member member: members){"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            memberList.add(member);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return memberList;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Creates a list of Menu Items based on the give Menu objects."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    List\u003cMenu\u003e generateMenuList(Menu... menus) throws Exception{"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cMenu\u003e menuList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for(Menu m: menus){"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            menuList.add(m);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return menuList;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates a list of Persons based on the flags."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if all contact details of respective persons should be set to"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    List\u003cPerson\u003e generatePersonList(Boolean... isPrivateStatuses) throws Exception{"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        List\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        for(Boolean p: isPrivateStatuses){"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "            persons.add(generatePerson(i++, p));"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates a Person object with given name. Other fields will have some dummy values."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Person generatePersonWithName(String name) throws Exception {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new Name(name),"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new Phone(\"1\", false),"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new Email(\"1@email\", false),"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new Address(\"House of 1\", false),"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Collections.singleton(new Tag(\"tag\"))"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates a Member object with given name. Other fields will have some dummy values."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Member generateMemberWithName(String name) throws Exception {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Member("
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new MemberName(name)"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates a Menu object with given name. Other fields will have some dummy values."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Menu generateMenuWithName(String name) throws Exception {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Menu("
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new MenuName(name),"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new Price(\"$5.00\"),"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new Type(\"main\"),"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Collections.singleton(new Tag(\"tag\"))"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kianhong95"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     * Generates a Menu object with given name. Other fields will have some dummy values."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    Menu generateMenuWithGivenNameAndType(String name, String type) throws Exception {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        return new Menu("
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new MenuName(name),"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new Price(\"$5.00\"),"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                new Type(type),"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "                Collections.singleton(new Tag(\"tag\"))"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kianhong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kianhong95": 447
    }
  },
  {
    "path": "test/java/seedu/addressbook/parser/ParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.commands.member.MemberAddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.commands.member.MemberListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.commands.menu.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.statistics.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.Member;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.MemberName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "import seedu.addressbook.data.member.ReadOnlyMember;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "import seedu.addressbook.data.menu.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.*;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyInput_returnsIncorrect() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] emptyInputs \u003d { \"\", \"  \", \"\\n  \\n\" };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, emptyInputs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void unknownCommandWord_returnsHelp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"unknowncommandword arguments arguments\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test 0-argument commands"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void helpCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"help\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"clear\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ClearCommand.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenuclearCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String input \u003d \"clearmenu\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        parseAndAssertCommandType(input, MenuClearCommand.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void listCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"list\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ListCommand.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenulistCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String input \u003d \"listmenu\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        parseAndAssertCommandType(input, MenuListCommand.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void StatsEmployeeCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"statsemp\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, StatsEmployeeCommand.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void StatsMemberCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"statsmember\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, StatsMemberCommand.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void StatsMenuCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"statsmenu\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, StatsMenuCommand.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void StatsOrderCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"statsorder\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, StatsOrderCommand.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void MemberlistCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final String input \u003d \"listmembers\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        parseAndAssertCommandType(input, MemberListCommand.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void exitCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"exit\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ExitCommand.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Test single index argument commands"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_noArgs() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"delete\", \"delete \" };"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenudeleteCommand_noArgs() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String[] inputs \u003d { \"deletemenu\", \"deletemenu \" };"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"delete notAnumber \", \"delete 8*wh12\", \"delete 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenudeleteCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String[] inputs \u003d { \"deletemenu notAnumber \", \"deletemenu 8*wh12\", \"deletemenu 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"delete \" + testIndex;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        final DeleteCommand result \u003d parseAndAssertCommandType(input, DeleteCommand.class);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenudeleteCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final int testIndex \u003d 1;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String input \u003d \"deletemenu \" + testIndex;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final MenuDeleteCommand result \u003d parseAndAssertCommandType(input, MenuDeleteCommand.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_noArgs() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"view\", \"view \" };"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"view notAnumber \", \"view 8*wh12\", \"view 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 2;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"view \" + testIndex;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        final ViewCommand result \u003d parseAndAssertCommandType(input, ViewCommand.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_noArgs() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"viewall\", \"viewall \" };"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenuviewAllCommand_noArgs() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String[] inputs \u003d { \"viewallmenu\", \"viewallmenu \" };"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"viewall notAnumber \", \"viewall 8*wh12\", \"viewall 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenuviewAllCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String[] inputs \u003d { \"viewallmenu notAnumber \", \"viewallmenu 8*wh12\", \"viewallmenu 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 3;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"viewall \" + testIndex;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        final ViewAllCommand result \u003d parseAndAssertCommandType(input, ViewAllCommand.class);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenuviewAllCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final int testIndex \u003d 3;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String input \u003d \"viewallmenu \" + testIndex;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final MenuViewAllCommand result \u003d parseAndAssertCommandType(input, MenuViewAllCommand.class);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test find persons by keyword in name command"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_invalidArgs() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // no keywords"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                \"find\","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                \"find \""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenufindCommand_invalidArgs() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // no keywords"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \"findmenu\","
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \"findmenu \""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        };"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuFindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_validArgs_parsedCorrectly() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"find \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        final FindCommand result \u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                parseAndAssertCommandType(input, FindCommand.class);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenufindCommand_validArgs_parsedCorrectly() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String input \u003d \"findmenu \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final MenuFindCommand result \u003d"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                parseAndAssertCommandType(input, MenuFindCommand.class);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_duplicateKeys_parsedCorrectly() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        // duplicate every keyword"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"find \" + String.join(\" \", keySet) + \" \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        final FindCommand result \u003d"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "                parseAndAssertCommandType(input, FindCommand.class);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenufindCommand_duplicateKeys_parsedCorrectly() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // duplicate every keyword"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String input \u003d \"findmenu \" + String.join(\" \", keySet) + \" \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final MenuFindCommand result \u003d"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                parseAndAssertCommandType(input, MenuFindCommand.class);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test add person command"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_invalidArgs() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add \","
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add wrong args format\","
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                // no phone prefix"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(\"add $s $s e/$s a/$s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE),"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                // no email prefix"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(\"add $s p/$s $s a/$s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE),"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "                // no address prefix"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(\"add $s p/$s e/$s $s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_invalidPersonDataInArgs() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidName \u003d \"[]\\\\[;]\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validName \u003d Name.EXAMPLE;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidPhoneArg \u003d \"p/not__numbers\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validPhoneArg \u003d \"p/\" + Phone.EXAMPLE;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidEmailArg \u003d \"e/notAnEmail123\";"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validEmailArg \u003d \"e/\" + Email.EXAMPLE;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidTagArg \u003d \"t/invalid_-[.tag\";"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        // address can be any string, so no invalid address"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        final String addCommandFormatString \u003d \"add $s $s $s a/\" + Address.EXAMPLE;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        // test each incorrect person data field argument individually"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid name"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, invalidName, validPhoneArg, validEmailArg),"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid phone"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, invalidPhoneArg, validEmailArg),"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid email"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, validPhoneArg, invalidEmailArg),"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid tag"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, validPhoneArg, validEmailArg) + \" \" + invalidTagArg"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_validPersonData_parsedCorrectly() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        final Person testPerson \u003d generateTestPerson();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d convertPersonToAddCommandString(testPerson);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        final AddCommand result \u003d parseAndAssertCommandType(input, AddCommand.class);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getPerson(), testPerson);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_duplicateTags_merged() throws IllegalValueException {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        final Person testPerson \u003d generateTestPerson();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d convertPersonToAddCommandString(testPerson);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : testPerson.getTags()) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "            // create duplicates by doubling each tag"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            input +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        final AddCommand result \u003d parseAndAssertCommandType(input, AddCommand.class);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getPerson(), testPerson);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person generateTestPerson() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person("
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "                new Name(Name.EXAMPLE),"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(Phone.EXAMPLE, true),"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "                new Email(Email.EXAMPLE, false),"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(Address.EXAMPLE, true),"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag1\"), new Tag(\"tag2\"), new Tag(\"tag3\")))"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(\"test person data should be valid by definition\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String convertPersonToAddCommandString(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d \"add \""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "                + person.getName().fullName"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "                + (person.getPhone().isPrivate() ? \" pp/\" : \" p/\") + person.getPhone().value"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "                + (person.getEmail().isPrivate() ? \" pe/\" : \" e/\") + person.getEmail().value"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "                + (person.getAddress().isPrivate() ? \" pa/\" : \" a/\") + person.getAddress().value;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : person.getTags()) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            addCommand +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     * Test add menu item command"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //Testing for invalid argument cases in add menu command (invalid if the price prefix is not present)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenuaddCommand_invalidArgs() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \"addmenu\","
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \"addmenu \","
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                \"addmenu wrong args format\","
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                // no price prefix"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                String.format(\"addmenu $s $s type/$s\", MenuName.EXAMPLE, Price.EXAMPLE, Type.EXAMPLE),"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                // no type prefix"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                String.format(\"addmenu $s p/$s $s\", MenuName.EXAMPLE, Price.EXAMPLE, Type.EXAMPLE)"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        };"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MenuAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenuaddCommand_invalidMenuDataInArgs() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String invalidMenuName \u003d \"[]\\\\[;]\";"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String validMenuName \u003d MenuName.EXAMPLE;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String invalidPriceArg \u003d \"p/not__numbers\";"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String validPriceArg \u003d \"p/\" + Phone.EXAMPLE;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String invalidTypeArg \u003d \"type/notType\";"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String validTypeArg \u003d \"type/\" + Type.EXAMPLE;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String invalidTagArg \u003d \"t/invalid_-[.tag\";"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String addMenuCommandFormatString \u003d \"addmenu $s $s $s\";"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        // test each incorrect person data field argument individually"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                // invalid menu name"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                String.format(addMenuCommandFormatString, invalidMenuName, validPriceArg, validTypeArg),"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                // invalid pricee"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                String.format(addMenuCommandFormatString, validMenuName, invalidPriceArg, validTypeArg),"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                // invalid typa"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                String.format(addMenuCommandFormatString, validMenuName, validPriceArg, invalidTypeArg),"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                // invalid tag"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                String.format(addMenuCommandFormatString, validMenuName, validPriceArg, validTypeArg) + \" \" + invalidTagArg"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        };"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //Testing for invalid Food Item Data Argument"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    //Testing for valid Food Item Data parsed correctly"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenuaddCommand_validFoodItemData_parsedCorrectly() {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Menu testMenu \u003d generateTestMenu();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final String input \u003d convertMenuToAddCommandString(testMenu);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final MenuAddCommand result \u003d parseAndAssertCommandType(input, MenuAddCommand.class);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(result.getMenu(), testMenu);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    public void MenuaddCommand_duplicateTags_merged() throws IllegalValueException {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final Menu testMenu \u003d generateTestMenu();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        String input \u003d convertMenuToAddCommandString(testMenu);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (Tag tag : testMenu.getTags()) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            // create duplicates by doubling each tag"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            input +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        final MenuAddCommand result \u003d parseAndAssertCommandType(input, MenuAddCommand.class);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(result.getMenu(), testMenu);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private static Menu generateTestMenu() {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            return new Menu("
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    new MenuName(MenuName.EXAMPLE),"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    new Price(Price.EXAMPLE),"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    new Type(Type.EXAMPLE),"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                    new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag1\"), new Tag(\"tag2\"), new Tag(\"tag3\")))"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            );"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            throw new RuntimeException(\"test menu data should be valid by definition\");"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    private static String convertMenuToAddCommandString(ReadOnlyMenus menu) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        String addmenuCommand \u003d \"addmenu \""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                + menu.getName().fullName"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                + \" p/\" + menu.getPrice().value"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "                + \" type/\" + menu.getType().value;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        for (Tag tag : menu.getTags()) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "            addmenuCommand +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        return addmenuCommand;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     * Test add member command"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void MemberAddCommand_invalidMemberDataInArgs() {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final String invalidName \u003d \"[]\\\\[;]\";"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final String validName \u003d MemberName.EXAMPLE;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        // address can be any string, so no invalid address"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final String MemberAddCommandFormatString \u003d \"addmember p/\";"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        // test each incorrect person data field argument individually"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        // add subsequent tests below when more fields are added..."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                // invalid name"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                String.format(MemberAddCommandFormatString, invalidName)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        };"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void MemberAddCommand_validEmptyMemberData_parsedCorrectly() {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final Member testMember \u003d generateTestEmptyMember();"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final String input \u003d convertMemberToAddCommandString(testMember);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final MemberAddCommand result \u003d parseAndAssertCommandType(input, MemberAddCommand.class);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertEquals(result.getMember(), testMember);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    public void MemberAddCommand_validMemberData_parsedCorrectly() {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final Member testMember \u003d generateTestMember();"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final String input \u003d convertMemberToAddCommandString(testMember);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        final MemberAddCommand result \u003d parseAndAssertCommandType(input, MemberAddCommand.class);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        assertEquals(result.getMember(), testMember);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private static Member generateTestEmptyMember() {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new Member();"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        } catch (Exception ive) {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            throw new RuntimeException(\"test empty member data should be valid by definition\");"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private static Member generateTestMember() {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            return new Member(new MemberName(MemberName.EXAMPLE));"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        } catch (IllegalValueException ie) {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "            throw new RuntimeException(\"test member data should be valid by definition\");"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    private static String convertMemberToAddCommandString(ReadOnlyMember member) {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        String addCommand \u003d \"addmember \""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "                + member.getName().fullName;"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "kangmingtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test statsmenu with arg command"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "    public void statsMenuCommand_validArgs_parsedCorrectly() {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "                \"statsmenu f/01022018\","
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "                \"statsmenu t/04112018\","
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "                \"statsmenu f/01102017 t/04112018\""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String input: inputs) {"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "            parseAndAssertCommandType(input, StatsMenuCommand.class);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "    public void statsMenuCommand_invalidArgs() {"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "                // No from prefix"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "                \"statsmenu 0102018\","
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "                // Invalid date"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "                \"statsmenu t/00012018\","
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "                // No to prefix"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "                \"statsmenu f/01102017 /04112018\","
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "                // Duplicate prefix"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "                \"statsmenu f/01102017 f/04112018\""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsMenuCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "     * Utility methods"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that parsing the given inputs will return IncorrectCommand with the given feedback message."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "    private void parseAndAssertIncorrectWithMessage(String feedbackMessage, String... inputs) {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "            final IncorrectCommand result \u003d parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(result.feedbackToUser, feedbackMessage);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "     * Utility method for parsing input and asserting the class/type of the returned command object."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input to be parsed"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param expectedCommandClass expected class of returned command"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the parsed command object"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT extends Command\u003e T parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass) {"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "        final Command result \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "        return (T) result;"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangmingtay": 75,
      "px1099": 2,
      "-": 356,
      "SalsabilTasnia": 196
    }
  },
  {
    "path": "test/java/seedu/addressbook/storage/StorageFileTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "px1099"
        },
        "content": "import seedu.addressbook.data.Rms;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile.StorageOperationException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.util.TestUtil.assertTextFilesEqual;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageFileTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d \"test/data/StorageFileTest\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFilePath_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        new StorageFile(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_noTxtExtension_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        new StorageFile(TEST_DATA_FOLDER + \"/\" + \"InvalidfileName\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void load_invalidFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "px1099"
        },
        "content": "        // The file contains valid xml data, but does not match the Rms class"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getStorage(\"InvalidData.txt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.load();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void load_validFormat() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "px1099"
        },
        "content": "        Rms actualAB \u003d getStorage(\"ValidData.txt\").load();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "px1099"
        },
        "content": "        Rms expectedAB \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "px1099"
        },
        "content": "        // ensure loaded Rms is properly constructed with test data"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "px1099"
        },
        "content": "        // overwrite equals method in Rms class and replace with equals method below"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(actualAB.getAllPersons(), expectedAB.getAllPersons());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        assertEquals(actualAB.getAllMenus(), expectedAB.getAllMenus());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullAddressBook_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_validAddressBook() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "px1099"
        },
        "content": "        Rms ab \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidData.txt\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    // getPath() method in StorageFile class is trivial so it is not tested"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the contents of two storage files are the same."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStorageFilesEqual(StorageFile sf1, StorageFile sf2) throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTextFilesEqual(Paths.get(sf1.getPath()), Paths.get(sf2.getPath()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile getStorage(String fileName) throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile(TEST_DATA_FOLDER + \"/\" + fileName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile getTempStorage() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile(testFolder.getRoot().getPath() + \"/\" + \"temp.txt\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "px1099"
        },
        "content": "    private Rms getTestAddressBook() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "px1099"
        },
        "content": "        Rms ab \u003d new Rms();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ab.addPerson(new Person(new Name(\"John Doe\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Phone(\"98765432\", false),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Email(\"johnd@gmail.com\", false),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Address(\"John street, block 123, #01-01\", false),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                                Collections.emptySet()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ab.addPerson(new Person(new Name(\"Betsy Crowe\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Phone(\"1234567\", true),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Email(\"betsycrowe@gmail.com\", false),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Address(\"Newgate Prison\", true),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"friend\"), new Tag(\"criminal\")))));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "       // ab.addMenu(new Menu(new Name(\"Pizza\"), new Price(\"5\"), Collections.emptySet()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "px1099": 9,
      "-": 102,
      "SalsabilTasnia": 3
    }
  },
  {
    "path": "test/java/seedu/addressbook/util/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts whether the text in the two given files are the same. Ignores any"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * differences in line endings"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertTextFilesEqual(Path path1, Path path2) throws IOException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list1 \u003d Files.readAllLines(path1, Charset.defaultCharset());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list2 \u003d Files.readAllLines(path2, Charset.defaultCharset());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.join(\"\\n\", list1), String.join(\"\\n\", list2));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": "        //assertEquals(String.join(\"\\n\", list1), String.join(\"\\n\", list2));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalsabilTasnia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "SalsabilTasnia": 2
    }
  }
]
