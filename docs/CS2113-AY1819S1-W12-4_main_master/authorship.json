[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d Drink I/O"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "https://https://travis-ci.org/CS2113-AY1819S1-W12-4[image:https://travis-ci.org/CS2113-AY1819S1-W12-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "// https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "// https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "// https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "// https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "image::images/drink_io_logo.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d About App"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*[blue]#_Drink I/O_#* is a comprehensive inventory management system targeted at small-scale drink distribution companies that  typically use Microsoft Excel or paper to keep track of their stocks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "This system will enable employees and managers to keep track of the stocks of various drinks, as well as the profit / revenue earned over time periods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "This will enable them to stock up on goods in a timely manner and make it easier for them to track their finances."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* https://cs2113-ay1819s1-w12-4.github.io/main/AccountantUserGuide.html[Accountant user guide]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* https://cs2113-ay1819s1-w12-4.github.io/main/ManagerUserGuide.html[Manager user guide]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* https://cs2113-ay1819s1-w12-4.github.io/main/StockTakerUserGuide.html[Stock taker user guide]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* https://cs2113-ay1819s1-w12-4.github.io/main/AdminUserGuide.html[Admin user guide]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* Original source of code: Addressbook-Level4 project created by SE-EDU initiative at [https://github.com/se-edu]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 13,
      "-": 33
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \"githubId\": \"bluein-green\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \"displayName\": \"JIN...JIA\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \"authorNames\": [\"bluein-green\", \"Jin Minjia\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \"githubId\": \"scottljw\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \"displayName\": \"LI ...WEI\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \"authorNames\": [\"scottljw\", \"Li Jiawei\", \"Scott Lee\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \"githubId\": \"Lunastryke\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \"displayName\": \"LIM...HAO\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \"authorNames\": [\"Lunastryke\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \"githubId\": \"liu-tianhang\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \"displayName\": \"LIU...ANG\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \"authorNames\": [\"liu-tianhang\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 25
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "//jar {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "//    manifest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "//        attributes("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "//                \u0027Main-Class\u0027: \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "//        )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "//}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027DrinkIO.jar\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \u0027site-name\u0027: \u0027Drink I/O\u0027,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://cs2113-ay1819s1-w12-4.github.io/main/\u0027,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \u0027site-seedu\u0027: false,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 3,
      "-": 250
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*[blue]#_Drink I/O_#* was developed by Team CS2113-AY1819S1-W12-4. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Jin Minjia"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "image::bluein-green.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scottljw"
        },
        "content": "{empty}[http://github.com/bluein-green[github]] [\u003c\u003cbluein-green#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Li Jiawei"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "image::scottljw.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scottljw"
        },
        "content": "{empty}[http://github.com/scottljw[github]] [\u003c\u003cscottljw#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Lim Xuan Hao"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "image::lunastryke.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "{empty}[http://github.com/Lunastryke[github]] [\u003c\u003clunastryke#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Role:  Developer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Responsibilities: Documentation, Git Expert"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Liu Tianhang"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "image::liu-tianhang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/LIU-TIANHANG[github]] [\u003c\u003cliu-tianhang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Logic, Security"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 7,
      "scottljw": 2,
      "Lunastryke": 11,
      "-": 31
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d Drink I/O - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "By: `CS2113T-W12-4`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "image::LogicClassDiagram_new.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "// tag::ui[]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `InventoryListPanel`, `BatchListPanel`, `StatusBarFooter`, `DrinkDetailPane` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "// end::ui[]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "image::ModelClassDiagram_new.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* stores the InventoryList data."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cDrink\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* stores the TransactionList data."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTransaction\u003e` that can be observed"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "scottljw"
        },
        "content": "// tag::storage[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "image::StorageClassDiagram_new.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* can save `UserPref` objects in json format and read them back."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* can save the `LoginInfo` objects in json format and read them back."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* can save the Inventory List data in xml format and read it back."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* can save the Transaction List data in xml format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "scottljw"
        },
        "content": "// end::storage[]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "// tag::analyses[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Analyses of costs, revenue and profit in the company over periods of time"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To facilitate the analyses of total profit, revenue and costs of the company over various periods of time,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "transactions (sales and purchases) are logged using `Transaction` s."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "They will be logged when the drink stock increases due to a purchase (`TransactionType` is `PURCHASE`),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "or when they decrease due to a sale (`TransactionType` is `SALE`)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "These transactions are stored into a list of transactions, in `TransactionList`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Analyses are conducted in `AnalysisManager`, with the API exposed in `Analysis`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "The following operations are implemented for the analyses of profit, revenue and costs:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `Analysis#analyseCost(AnalysisPeriodType period)`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `Analysis#analyseRevenue(AnalysisPeriodType period)`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `Analysis#analyseProfit(AnalysisPeriodType period)`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "The implementation of these operations are elaborated in the below sub-sections."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d Indicating the analysis period with `AnalysisPeriodType`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "`AnalysisPeriodType` is an enum class that denotes the period for analysis:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* in the current day"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* within the past 7 days (including the current day)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* within the past 30 days (including the current day)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "These are indicated respectively as:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `AnalysisPeriodType.DAY`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `AnalysisPeriodType.WEEK`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `AnalysisPeriodType.MONTH`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "A user may enter an analysis command with additional time period parameters."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "For the period of a day, no parameter is indicated."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "For the period of 7 days, `-w` is appended to the command. (e.g. `costs -w`)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "For the period of 30 days, `-m` is appended to the command. (e.g. `costs -m`)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "The following is the sequence of steps when the user enters an analysis command with a time period:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step 1.* User enters an analysis command (e.g. `costs -m`)."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step 2.* The appropriate parser (e.g. `AnalyseCostsCommandParser`) parses the time period parameter,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "and retrieves the `AnalysisPeriodType` value corresponding to the time period."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step 3.* The relevant `TransactionPeriodPredicate` for the `AnalysisPeriodType` value is retrieved. It is assigned to an Analysis Command (e.g. `AnalyseCostsCommand`)."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "The available `TransactionPeriodPredicate` s corresponding to each `AnalysisPeriodType` are:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `DAY`: `TransactionInADayPredicate`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `WEEK`: `TransactionInSevenDaysPredicate`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `MONTH`: `TransactionInThirtyDaysPredicate`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "These are retrieved using `AnalysisPeriodType#getPeriodFilterPredicate()`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step 4.* The analysis command is executed, and the `TransactionPeriodPredicate` predicate is passed to the appropriate `ModelManager`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "This is done through the `analyseCosts()` method in the appropriate `ModelManager`."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step 5.* In the appropriate `ModelManager` (Accountant or Manager), the predicate is passed to the filtered transaction list."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "This is in order to filter the transactions by their dates such that"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "the filtered transaction list only contains transactions with dates within the relevant period."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "`FilteredList\u003cTransaction\u003e` handles the filtering using the given predicate."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "The following sequence diagram shows how the first part of the `AnalyseCostCommand` works, as described above:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "image::AnalyseCostsSequenceDiagram_p1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of `Analysis#analyseCost()`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "The actual analysis of costs continues from the the filtering of the filtered transaction list."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "This section focuses on the actual computation of the costs incurred by the company."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step 1.* In addition to passing the analysis period Predicate, a `PurchaseTransactionPredicate` is"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "also passed to the filtered transaction list simultaneously. +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "This filters the list further, leaving only the `TransactionType.PURCHASE` transactions, which contribute"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "to the costs of the company. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Overall, the filtered transaction list will also be updated in the UI."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step 2.* `ModelManager` passes control to the `AnalysisManager`."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step 3.* In `AnalysisManager`, the helper method `AnalysisManager#calculateTotalCost()` is called"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "to compute the total costs of the filtered transactions."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "It iterates through the filtered transaction list, and checks the `Transaction` \u0027s `TransactionType`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "as a precuation. If the `TransactionType` is `PURCHASE`, the `amountMoney` transacted is obtained and"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "added to a sum of costs. The sum of costs is then wrapped in a `Price` object and returned to the calling function."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "// insert diagram!"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of `Analysis#analyseRevenue()`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "The implementation of the analysis of revenue is similar to that of costs. However, a `SaleTransactionPredicate`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "is passed to the filtered transaction list instead."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "In *Step 3*, the helper method `AnalysisManager#calculateTotalRevenue()` is called. It iterates"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "through the filtered transaction list, and checks if the `Transaction` \u0027s `TransactionType` is"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "`SALE`. If so, the `amountMoney` transacted is added to the sum of revenues. The sum of revenues"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "is then wrapped in a `Price` object and returned to the calling function."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of `Analysis#analyseProfit()`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "The analysis of profit continues from the filtering of the filtered transaction list by period."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "This section focuses on the actual computation of the profit earned by the company."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step 1.* `ModelManager` passes control to the `AnalysisManager`. No additional filtering is done. +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step 2.* In `AnalysisManager`, the helper method `AnalysisManager#calculateTotalProfit()` is called"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "to compute the total profit of the filtered transactions."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "It iterates through the filtered transaction list, and checks the `Transaction` \u0027s `TransactionType`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* If the `TransactionType` is `PURCHASE`, the `amountMoney` transacted is obtained and added to a sum of costs."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* If the `TransactionType` is `SALE`, the `amountMoney` transacted is obtained and added to a sum of revenues."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step 3.* Total profit is calculated using the formula: \"profit \u003d revenue - cost\"."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "This total profit value is checked to determine whether it is negative."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* If total profit is positive or zero, it is wrapped in a `Price` object and returned to the calling function."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* If the total profit is negative, the absolute value is taken, and a special `NegativePrice` object is used to wrap the value."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "It is then returned to the calling function."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** `NegativePrice` is a sub-class of `Price`, and is used only when calculating profit."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** The `value` of the `NegativePrice` object is the absolute value of the profit."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Aspect: Filtering the transactions by date"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* *Current implementation:* Pass predicates to the filtered transaction list, before performing analyses using that list"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*** Extensible as more Predicates can be created and passed to the filtered transaction list to filter"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "the transactions by different facets."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*** Enhances reusability especially of the `updateFilteredTransactionList(Predicate predicate)` method."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*** Allows the transaction list panel in the UI to be updated automatically."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** Cons: We must ensure that the implementation of each Predicate is correct."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* *Alternative:* Loop through all transactions in the `TransactionList`, and check if the transaction date"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "is within the desired time period"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** Cons: May have time performance issues if there are many transactions."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "// end::analyses[]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "//tag::commandPartition[]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Command partition"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "The command partition is an implementation of the role system."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "The `model` contain all the"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "API that is common for every user. `StockTakerModel` contains API for for stockTaker. Similar"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "idea applied to `AccountantModel` and `ManagerModel`. However, `AdminModel` extends all three models."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "As such, `adminModel` will contains all APIs."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ".Class diagram for Login related model"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "image::LoginUMLDiagram/Logic-UML-design-Login.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "After login, `logicManager` will assign a particular role to user according to their"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "`authenticationLevel`. As such, it will prevent one role from accessing other role\u0027s"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "command."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "//end::commandPartition[]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//tag::login[]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "\u003d\u003d\u003d Login/logout feature"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "The login feature is a standalone feature that enable security check on user. It has a fxml page that name `LoginPage.fxml` at `main\\resources\\view`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "The controller of the fxml page named `LoginController` at `seedu.address\\controller`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "The model of is at `loginInfo` which storage the format in JSON with the help of `JsonUtils`."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "Also, there is a `loginInfoManager` which include all the API for `loginInfo`."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "As such, this is a design that fulfil the Model-View-Controller pattern."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is a class diagram for login function. LoginUtils has attributes of `LoginInfoModel`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": " `userName` and `Password`. It also use `passwordUtils` to hashed verify the password with `LoginInfoModel`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ".Class diagram for Login related Utils"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "image::LoginUMLDiagram/Login_Class_Diagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how login mechanism behave at each step."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "image::LoginUMLDiagram/Login_sequence_diagram.png[width\u003d\"600\" height \u003d\"400\"]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "The `LoginController` will check for username and password will the `LoginUtils`."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "image::LoginUMLDiagram/LoginUtils_Sequence_Diagram.png[width\u003d\"600\" height \u003d\"400\"]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Save information about user account"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is a structure of `Model` components that is related to login feature."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "The model stores loginInfo of the user."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "image::LoginUMLDiagram/Logic_LoginInfo_Model.png[width\u003d\"800\" height \"200\"]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the interactions within the logic components for the execuion of `createAccount` command."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "image::LoginUMLDiagram/createAccountSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an sequence diagram of access login information for `loginInfoList.json` during initiation of the application."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "The program also save the the login information to `loginInfoList.json` when `logout` or `exit`."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "image::LoginUMLDiagram/Logic-UML-design-ReadLoginInfoList.png[width\u003d\"800\" height \u003d\"400\"]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to store the data"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "* **Alternative 1 (current choice):** Saves the login detail in a json file called `loginInfoList.json`."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "** Pros: Have a systematic and elegant way to store data."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "** Cons: Hard to implement"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "* **Alternative 2:** Store the data in enum."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "** Pros: Easy to implement"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "** Cons: Fixed database. Cannot add /modify/delete accounts. (suitable for very small project)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data format for store data"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "* **Alternative 1 (current choice):** Store in Json file."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Json is popular and have many support online."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "** Pros :JSON is relatively easier to implement compared to XML"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "** Cons: Have to write serialized method for JSON file."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "* **Alternative 2:** Store in XML file"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "** Pros: Classic and matured product"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "** Pros: Have serialized code in original ab4."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: It has many rules to set before implementation."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "//end::login[]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "// tag::inventory[]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d Inventory Management"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "In Drink I/O, inventory is managed in the model, through the use of Drink Objects with the attributes `name` , `price` , `quantity` , `tags` , `UniqueBatchList` . In Drink I/O, drink purchases are stored in `Batch` objects which are made unique by their `BatchDate` attribute."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "These `Batch` objects contain a `BatchId` , a `BatchQuantity` and a `BatchDate` attribute and are stored in the `UniqueBatchList` of the relevant drink."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d Buying a drink with `buy n/DRINK_NAME q/QUANTITY`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "A user may enter a buy command with the above parameters to record a purchase of drinks."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "The following is the sequence of steps when the user enters an buy command with specified name and quantity:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 1. User enters a buy command (i.e. `buy` `n/Coca cola` `q/400`)."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 2. The appropriate parser parses the name and quantity parameters and assigns the `name` and `quantity` variables to the `buy` command."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 3. The buy command is executed, and a new `Transaction` object is created with the `name` , `quantity` and a `transactionType` variable. This `Transaction` object is then passed to the StockTakerModelManager."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 4. In the StockTakerModelManager, `recordTransaction(Transaction)` is used to record the transaction and  `increaseDrinkQuantity(Name, Quantity)` is called to update the change in quantity in the inventory list."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 5. The inventory list then passes the `name` and `quantity` variables down to the `UniqueDrinkList` which calls the `increaseQuantity(Quantity)` method in the relevant `Drink` object."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 6. In the `Drink` object, a new `Batch` object is created with the `name` and `quantity` variables and passed to the Drink\u0027s  `UniqueBatchList` through the `addBatch` method."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 7. In the `UniqueBatchList` , the `Batch` that was passed down would be checked against the other `Batch` objects in the list for uniqueness based on its date. If it has a unique date, a new `Batch` would be created and stored in the `UniqueBatchList`, else the currently existing `Batch` object in the `UniqueBatchList` with the same date will have its `Quantity` attribute incremented by the `quantity` value of the `Batch` object added."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 8. The `totalQuantity` attribute of the `UniqueBatchList` is then updated by looping through the batches in the list, and is handed up to the `Drink` object which updates its `Quantity` attribute with the value of the `totalQuantity` attribute."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d Selling a drink"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "To facilitate sales of drinks from the stock of the company, sales of drinks from the inventory are conducted with the command `sell` `n/DRINK_NAME` `q/QUANTITY`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "A user may enter a buy command with the above parameters to record a purchase of drinks."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "The following is the sequence of steps when the user enters an buy command with specified name and quantity:"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 1. User enters a sell command (i.e. `sell` `n/Coca cola` `q/400`)."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 2. The appropriate parser parses the name and quantity parameters and assigns the `name` and `quantity` variables to the `sell` command."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 3. The sell command is executed, and a new `Transaction` object is created with the `name` , `quantity` and a `transactionType` variable. This `Transaction` object is then passed to the StockTakerModelManager."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 4. In the StockTakerModelManager, `recordTransaction(Transaction)` is used to record the transaction and  `decreaseQuantity(Name, Quantity)` is called to update the change in quantity in the inventory list."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 5. The inventory list then passes the `name` and `quantity` variables down to the `UniqueDrinkList` which calls the `decreaseQuantity(Quantity)` method in the relevant `Drink` object."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 6. In the `Drink` object, `updateBatchTransaction(Quantity)` is called and the `quantity` variable is passed down to the `UniqueBatchList`."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 7. In the `UniqueBatchList` , `quantity` passed down will be checked against the `totalQuantity` variable. If `quantity` is more than `totalQuantity`, a InsufficientQuantityException will be thrown which would be handled in the `SellDrinkCommand` class. Else, the `updateBatchTransaction` would loop through the `UniqueBatchList` and decrement the quantity of the individual batches starting from the one with the oldest date."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Step 8. The `totalQuantity` attribute of the `UniqueBatchList` is then updated by looping through the batches in the list, and is handed up to the `Drink` object which updates its `Quantity` attribute with the value of the `totalQuantity` attribute."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ".Sequence Diagram of SellCommand to StockTakerModelManager"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "image::SellCommandSequenceDiagram1.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ".Sequence Diagram of StockTakerModelManager to Batch"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "image::SellCommandSequenceDiagram2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Aspect: Facilitating the Buy and Sell Commands"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* Current Implementation: Sorting the `UniqueBatchList` by `BatchDate` using a Custom Comparator."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "*** Makes implementation of methods such as `addBatch` , `updateBatchTransaction` , `getEarliestBatchDate` , `getOldestBatchDate` much easier as `Batch` objects are already in `date` order."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "*** Easy to modify, allowing users to sort batches based on `quantity` by just editing the Custom Comparator."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "*** Allows batches shown in the BatchListPanel to be easily ordered based on date."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "*** When users replace the Custom Comparator with another comparator, methods such as `getEarliestBatchDate` will have to be edited as they  depend on the `UniqueBatchList` being in date-sorted order."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* Alternative: Loop through all batches in the `UniqueBatchList` for all methods."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** Pros: When the `UniqueBatchList` is sorted differently, methods do not have to be rewritten."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** Cons: May have time performance issues if there are many batches."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "// end::inventory[]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* has the need to manage a small drinks distribution company"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Value proposition*: Manage a distribution company more conveniently than using paper or Excel,"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " with the incorporation of inventory management and accounting tools in one app."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* * *` |Manager |add a new drink item |keep list of offerings updated"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* * *` |Manager |delete a drink item |keep list of offerings updated"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* * *` |Manager |modify the price of a drink item |maintain a good profit margin"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* * *` |Manager |see drink batches that have been imported before a certain date|take action to clear old inventory stocks"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* *` |Manager |see which drinks are selling well and the converse |take action to manage stocks better"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* *` |Manager |view actions done by employees |track work done and monitor for fraud"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* * *` |Stock Taker |add new batches of drinks |keep inventory updated"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* * *` |Stock Taker |update the stocks of drinks |keep inventory updated"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* * *` |Stock Taker |view the stock numbers of drinks |know when to restock them"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* * *` |Stock Taker |view import dates of drink batches |sell the batches that have been in the inventory for longer"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* * *` |Accountant |update the cost price of drinks |ensure that the total costs and profits of the company are updated"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* *` |Accountant |keep track of the quantities of drinks sold over a certain period |report on the trends on drink sales"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* *` |Accountant |keep track of total profit over a period of time |report on the status and progress of the company"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* * *` |user |type commands easily |perform actions easily"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* * *` |user |login security feature |secure important data"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* * *` |user |view list of available commands |know which actions i can take"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* *` |user |confirmation for actions |reduce mistakes due to carelessness"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`* *` |user |see the pictures of drinks |easily identify the drink that i am looking at"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|`*` |experienced user |have shortcuts for commands |perform actions efficiently"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "(For all use cases below, the *System* is the `DrinkIO` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d Use case: Add Transaction"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "1.  User requests to add specific item to sales list"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "2.  System requests for confirmation"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "3.  User confirms"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "4.  System responds with successful add message"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* 2a. User enters a non-existing item."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "+"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "**   2a1. System responds that the item does not exist and requests for next command."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "+"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* 2b. User enters a item that is already sold out"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "+"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "**\t2b1. System responds that the item is sold out and requests for the next command."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* 2c. User specified a quantity that is larger than the available stock"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "+"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "**\t2c1. System prompts user to enter a valid sales number"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "+"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Use case resumes from 1."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* 3a. User cancels procedure."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: Shows the GUI with a set of sample drinks and transactions. The window size may not be optimum."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "////"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "////"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Add a drink"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Adding a drink into the inventory, using the `Manager` or `Admin` account"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `add n/Coca Cola Original2 p/20.00 cp/10.00 t/SoftDrink` +"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected:  Message displayed - \"New drink added: Drink name: Coca Cola Original2 Cost price: 10.00 Selling price: 20.00, Tags: [SoftDrink]\""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `add n/Coca Cola Original2 p/20.00 cp/10.00 t/SoftDrink`  (repetitive test) +"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected:  Message displayed - \"This drink already exists in the inventory list\""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Delete a drink"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Deleting a drink from the inventory, using the `Manager` or `Admin` account"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Prerequisites: There must be at least one drink in the inventory"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: Message displayed - \"Deleted Drink:\", followed by deleted drink\u0027s details (name, cost price, selling price and tags)"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `delete 100000` +"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: Message displayed - \"The drink index provided is invalid\""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: Message displayed - \"Invalid command format!\""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Edit details of a drink"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Editing a drink\u0027s selling price, cost price or tags, using the `Manager` or `Admin` account"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Prerequisites: There must be at least one drink in the inventory"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `edit 1 cp/400` +"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: Message displayed - \"Edited Drink:\", followed by edited drink\u0027s details (name, cost price, selling price and tags)"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `edit 1 p/1` +"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: Message displayed - \"Edited Drink:\", followed by edited drink\u0027s details (name, cost price, selling price and tags)"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `edit 1 t/PROMO` +"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: Message displayed - \"Edited Drink:\", followed by edited drink\u0027s details (name, cost price, selling price and tags)"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `edit 1 cp/40 p/80` +"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: Message displayed - \"Edited Drink:\", followed by edited drink\u0027s details (name, cost price, selling price and tags)"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `edit 1 cp/40 t/TAG1 t/TAG2` +"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: Message displayed - \"Edited Drink:\", followed by edited drink\u0027s details (name, cost price, selling price and tags)"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `edit 1 cp/bla` +"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: Message displayed - \"Price should contain only numbers and at most 1 decimal point. It must be least 1 digit long with a maximum of 2 digits after the decimal point\""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `edit 1 t/PROMO_TOO`"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: Message displayed - \"Tags names should be alphanumeric\""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Buying a drink"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Buy a certain quantity of a  drink using the `buy` command, using a `Stock Taker` or `Admin` account"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Prerequisites: There must be at least one drink in the inventory, with one drink by the name of NAME."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `buy n/NAME q/12` +"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: The drink by the name of NAME (case-sensitive) has its quantity increased by 12. The message that \"Purchase transaction recorded!\" is shown in the results panel."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `buy n/NAME q/12`, where NAME is the name of a drink that is not in the inventory +"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: The message \"The drink entered does not exist in the inventory list\" is displayed."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Selling a drink"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Sell a certain quantity of a drink using the `sell` command, using a `Stock Taker` or `Admin` account"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Prerequisites: There must be at least one drink in the inventory, with one drink by the name of NAME."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `sell n/NAME q/12`, where NAME is the name of a drink that is in the inventory, and its quantity is 12 or more. +"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: The drink by the name of NAME (case-sensitive) has its quantity decreased by 12. The message that \"Sale transaction recorded!\" is shown in the results panel."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `sell n/NAME q/12`, where NAME is the name of a drink that is not in the inventory +"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: The message \"The drink entered does not exist in the inventory list\" is displayed."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `sell n/NAME q/12`, where NAME is the name of a drink that is in the inventory, and its quantity is less than 12. +"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: The message \"Insufficient quantity in stock to perform operation\" is displayed."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Analysing costs"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Analyse costs over a period of a day, using an `Accountant` or `Admin` account"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Prerequisites: There must be at least one transaction in the transaction list."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `costs` +"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: The total cost incurred *in a day* is calculated and shown. The `PURCHASE` transactions are listed in the transaction list."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Analyse costs over a period of 7 days (including current day)"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Prerequisites: There must be at least one transaction in the transaction list."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `costs -w` +"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: The total cost incurred *in 7 days* is calculated and shown. The `PURCHASE` transactions are listed in the transaction list."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Analyse costs over a period of 30 days (including current day)"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Prerequisites: There must be at least one transaction in the transaction list."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `costs -m` +"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: The total cost incurred *in 30 days* is calculated and shown. The `PURCHASE` transactions are listed in the transaction list."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Analysing revenue"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Analyse revenue over a period of a day, using an `Accountant` or `Admin` account"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Prerequisites: There must be at least one transaction in the transaction list."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `revenue` +"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: The total revenue earned *in a day* is calculated and shown. The `SALE` transactions are listed in the transaction list."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Analyse revenue over a period of 7 days (including current day)"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Prerequisites: There must be at least one transaction in the transaction list."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `revenue -w` +"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: The total revenue earned *in 7 days* is calculated and shown. The `SALE` transactions are listed in the transaction list."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Analyse revenue over a period of 30 days (including current day)"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Prerequisites: There must be at least one transaction in the transaction list."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `revenue -m` +"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: The total revenue earned *in 30 days* is calculated and shown. The `SALE` transactions are listed in the transaction list."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Analysing profit"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Analyse profit over a period of a day, using an `Accountant` or `Admin` account"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Prerequisites: There must be at least one transaction in the transaction list."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `profit` +"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: The total profit earned *in a day* is calculated and shown. The `SALE` and `PURCHASE` transactions within the time period are listed in the transaction list."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Analyse profit over a period of 7 days (including current day)"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Prerequisites: There must be at least one transaction in the transaction list."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `profit -w` +"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: The total profit earned *in 7 days* is calculated and shown. The `SALE` and `PURCHASE` transactions within the time period are listed in the transaction list."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Analyse profit over a period of 30 days (including current day)"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Prerequisites: There must be at least one transaction in the transaction list."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `profit -m` +"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected: The total profit earned *in 30 days* is calculated and shown. The `SALE` and `PURCHASE` transactions within the time period are listed in the transaction list."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Changing password"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Changing the password using `changePassword`"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `changePassword o/123 n/1234` (assuming 123 is the default old password) +"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected:  Password has successfully changed to: 1234"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `changePassword o/123xyz n/1234` (assuming 123 is the default old password) +"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected:  The old password is wrong"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Deleting account"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Deleting an account, using the `Manager` or `Admin` account"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `deleteAccount u/manager` +"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected:The account has been deleted"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".. Test case: `deleteAccount u/unknownAccount` +"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "   Expected:  This account does not exist"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bluein-green": 231,
      "scottljw": 2,
      "Lunastryke": 112,
      "liu-tianhang": 31,
      "-": 696
    }
  },
  {
    "path": "docs/DummySearchPage.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmeta charset\u003d\"utf-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ctitle\u003eDummy Search Page\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscript type\u003d\"text/javascript\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    function getJsonFromUrl() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      var query \u003d location.search.substr(1);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      var result \u003d {};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      query.split(\"\u0026\").forEach(function(part) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        var item \u003d part.split(\"\u003d\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        result[item[0]] \u003d decodeURIComponent(item[1]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      return result;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    document.addEventListener(\"DOMContentLoaded\", function(event) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      document.getElementById(\"name\").innerHTML\u003dgetJsonFromUrl().name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      document.getElementById(\"sellingPrice\").innerHTML\u003dgetJsonFromUrl().sellingPrice;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      document.getElementById(\"costPrice\").innerHTML\u003dgetJsonFromUrl().costPrice;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      document.getElementById(\"stock\").innerHTML\u003dgetJsonFromUrl().stock;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      document.getElementById(\"earliestBatchDate\").innerHTML\u003dgetJsonFromUrl().earliestBatchDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/script\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "  \u003ch1\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    \u003cfont face \u003d \"Verdana\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003cspan id\u003d\"name\"\u003e\u003c/span\u003e\u003cbr /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "  \u003c/h1\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "  \u003cp\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    \u003cfont face \u003d \"Verdana\", size \u003d \"2\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003cimg src\u003d\"https://raw.githubusercontent.com/CS2113-AY1819S1-W12-4/main/master/docs/images/placeholder.png\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "           align\u003d\"right\" width\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      Selling Price: $ \u003cspan id\u003d\"sellingPrice\"\u003e\u003c/span\u003e\u003cbr /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      Cost Price: $ \u003cspan id\u003d\"costPrice\"\u003e\u003c/span\u003e\u003cbr /\u003e\u003cbr /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      In Stock: \u003cspan id\u003d\"stock\"\u003e\u003c/span\u003e\u003cbr /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      Batches in Inventory: To be filled once morphed\u003cbr /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      Earliest Batch Import Date: \u003cspan id\u003d\"earliestBatchDate\"\u003e\u003c/span\u003e\u003cbr /\u003e\u003cbr /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      Last Batch Imported Date: To be filled once morphed\u003cbr /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      Next Delivery Date: To be filled once morphed\u003cbr /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    \u003c/font\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "  \u003c/p\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 23,
      "-": 24
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ":product_name : Drink I/O"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d Drink I/O -  User Guide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-W12-4/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "By: `CS2113T-W12-4`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "// Use sentence case for long titles e.g. \"Updating item details\". capitalise first letter if it is a short title ////"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "image::drink_io_logo.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "*[blue]#_Drink I/O_#* is a desktop application that helps you to manage your drink distribution company."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You can use *[blue]#_Drink I/O_#* to keep track of your inventory and analyse your company\u0027s sales performance."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*[blue]#_Drink I/O_#* is optimised for Command Line Interface (CLI), allowing you to manage your company"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "faster than traditional Graphical User Interface (GUI) apps, while retaining the benefits of a GUI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "This user guide provides comprehensive documentation on the *[blue]#_Drink I/O_#* setup process, the features you can"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "access and the commands you can use. Choose a topic from the Table of Contents above to find answers,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "get instructions and learn to improve your workflow with Drink I/O."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d How to use this guide"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*General Command Format*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* Words in UPPER_CASE are the parameters supplied by users"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* Use underscore for spaces for fields other than `NAME`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* Parameters can be supplied in any order as tags are specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** *e.g.* `p/\u0027 for selling price, `n/` for name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* Parameters in square brackets are optional"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d How to navigate Drink I/O\u0027s interface"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "image::uiguide.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ".  Download the latest `DrinkIO.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003clogin\u003e\u003e to login the product."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "image::login_page_main.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". After login in, the main window will appear as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".  Some example commands you can try: +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003cto be added\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "////"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* *`viewall`* : Shows a list of all the drinks stocked in the inventory, together with their prices."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* **`add` **`Coca Cola, Green Tea [2]` : Adds a transaction of 1 Coca Cola and 2 Green Tea."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* **`stock` **`Coca Cola 10` : Increases the stock quantity Coca Cola by 10 cans"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* *`exit`* : Exits the app"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "////"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Getting Started"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::login[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "[[login]]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging in"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Upon entering starting up the application, you will be met by the login page below:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "image::login_page_main.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "To login, you can use either the CLI or GUI to input your `USERNAME` and `PASSWORD`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "*GUI Login*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". Enter your `USERNAME` and `PASSWORD` into the respective username and password fields"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". Click on the kbd:[LOGIN] button"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "*CLI Login*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". Enter your `USERNAME` and `PASSWORD` into the terminal in this format"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ".. Format: `USERNAME` `PASSWORD`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". Press the kbd:[ENTER] key"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* User name and password are seperated with a single space when using CLI input"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* Both username and password are single words. No spaces are allowed in username or password."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "[.example]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "[example-title]#Examples for CLI input:#"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".Table List of user accounts at first launch or upon reset"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "|User Name |Password |Authentication Level"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "|tester"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "|123"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "|ADMIN"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "|manager"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "|123"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "|MANAGER"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "|stocktaker"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "|123"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "|STOCKTAKER"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "|accountant"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "|123"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "|ACCOUNTANT"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "The example provided is a default login account for admins. This account is created only for testing purposes."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "After successfully logging in, a confirmation message would be shown indicating your authentication level:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::login_confirmation.PNG[width\u003d\"\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging out"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Logging out of the application will bring you back to the login screen."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". To log out, enter the following command into the command bar"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ".. Command format: `logout`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". Press the kbd:[ENTER] key"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "//end::login[]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of Users"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "In small-scale drink distribution companies, there are generally 3 critical roles and responsibilities to"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "keep the company running:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Stock taker"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Accountant"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Manager"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "This is taken into account in *[blue]#_Drink I/O_#*. Each role has a different type of *[blue]#_Drink I/O_#*"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "account, and in a specific role, you can work with functions that are tailored to your role."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Stock Taker"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "As the stock taker is primarily in charge of updating inventory, the *Stock Taker* account has tailored"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "access to the inventory manager."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Accountant"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "The accountant has access to *[blue]#_Drink I/O_#*\u0027s financial analysis tools in the *Accountant* account."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Manager"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "A manager has access to adding, deleting and editing drinks, as well as creating accounts for other employees using the *Manager* account."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "//tag::account[]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Your {product_name} Account"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "*[blue]#_Drink I/O_#* has a login feature. This ensure that every user has to have an account before using the application."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Hence, it would increase the security of the application."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Confirmation of Command"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "When you enter command that will change the data storage, you will be prompted with a message as shown below:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "image::Command_confirmation.PNG[width\u003d\"400\"]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "If you have confirmed the command, key in y or Y to confirm."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Changing your password"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "When you receive an account from manager, you want to change the password to increase security."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `changePassword o/[OLD_PASSWORD] n/[NEW_PASSWORD]`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[.example]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "[example-title]#Examples for changePassword:#"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* [example]#`changePassword o/123 n/1234`#"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "If password changes is successful, a message will be shown:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "image::password_change_successful.PNG[width\u003d\"300\"]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Create additional account"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "As a [red]#manager# or [red]#administrator#, you want to create new account for new employee."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `createAccount u/USER_NAME p/PASSWORD a/AUTHENTICATION_LEVEL`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "`AUTHENTICATION_LEVEL` must be one of:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* `ADMIN`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* `MANAGER`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* `STOCKTAKER`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* `ACCOUNTANT`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "[.example]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "[example-title]#Examples for create new account:#"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [example]#`createAccount u/tester2 p/myPassword a/ADMIN`#"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "If create account is successful, a message will be shown:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "image::create_new_account_successful.PNG[width\u003d\"300\"]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Delete account"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "As a [red]#manager# or [red]#administrator#, you might want to delete a account when it is no longer used."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deleteAccount u/USER_NAME`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "[.example]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "[example-title]#Examples for delete old account:#"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* [example]#`deleteAccount u/tester`#"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If delete account is successful, a message will be shown:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "image::deleteAccount_successful.PNG[width\u003d\"300\"]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "//end::account[]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "scottljw"
        },
        "content": "//tag::manage[]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Your Inventory"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "The core feature of *[blue]#_Drink I/O_#* is to manage your company\u0027s inventory."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "This includes the adding of drinks into the inventory, deleting, viewing their details"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "and updating these details."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "In *[blue]#_Drink I/O_#*, each drink has a _unique_ name, a selling price, a cost price,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "stock count and tags that allow you to classify the drink (e.g. soft drink, tea) and enter"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "any other information."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Adding new drinks"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You can add new drinks into your inventory to let *[blue]#_Drink I/O_#* track them."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*_Summary_* +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Command format*:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "`add n/NAME p/SELLING_PRICE cp/COST_PRICE [t/TAG]...`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `NAME` is the name of the drink you wish to record"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** This name must be unique among the drinks recorded in *[blue]#_Drink I/O_#*"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** Names are case-sensitive, and must contain only alphanumeric characters and spaces"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `SELLING_PRICE` is the default selling price of 1 carton of the drink"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `COST_PRICE` is the default cost price of 1 carton of the drink"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** Prices must not be negative values, and should have at most 2 decimal places"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `TAG` is optional, and must contain only alphanumeric characters"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** You can add any number of tags, including 0"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step-by-Step Instructions* +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To enter a new drink into *[blue]#_Drink I/O_#*,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Enter `add` into the command box"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Key in `n/`, followed by name of drink (`NAME`)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Key in `p/`, followed by default selling price of 1 carton of the drink (`SELLING_PRICE`)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Key in `cp/`, followed by default cost price of 1 carton of the drink (`COST_PRICE`)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Confirm the command by entering `y` or `Y`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Check whether the drink has been recorded successfully in the system"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*  If you see the message \"New drink added\", followed by the drink\u0027s details that you entered,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " the drink has been successfully entered into *[blue]#_Drink I/O_#* +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** The drink will also appear at the bottom of the inventory list panel"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*  If not, follow the instructions displayed in the message display pane, and re-enter the command +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "- The new drink you want to add must be have a unique name among the drinks in *[blue]#_Drink I/O_#*."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "- The adding of the drink will fail if `SELLING_PRICE` or `COST_PRICE` are negative values."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "scottljw"
        },
        "content": "//end::manage[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d Searching for specific drink(s)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Finds drinks which meet specific criteria depending on the input prefix."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "*_Summary_* +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "*Command format*: +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " `find n/` `KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " `find q/` `QUANTITY` +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " `find d/` `DATE`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d Searching by drink name"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "You can search for specific drinks by name using this search function"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Finds all drinks which names contain any of the given keywords. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Format: `find n/KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* The search is case insensitive. e.g `coke` will match `Coke`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* The order of the keywords does not matter. e.g. `Tea Green` will match `Green Tea`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* Only the drink name is searched."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* Only full words will be matched e.g. `Cok` will not match `Coke`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* Drinks matching at least one keyword will be returned (i.e. `OR` search). e.g. `Tea` will return `Green Tea`, `Milk Tea`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* `find n/Tea` +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Returns `Milk Tea` and `Green Tea`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* `find n/Tea Milk Coke` +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Returns any drink having `Tea`, `Milk`, or `Coke` in their names"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d Searching by drink quantity"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "To find out which drinks in your drink company are in need of restocking, you can utilise this search function which will return the drinks with quantity less than or equal to the quantity input. +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Finds all drinks which have quantity less than or equal to the given quantity. +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Format: `find q/QUANTITY`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* Only numbers are allowed in the Quantity field"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* `find q/400` +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Returns `Coke` and `Green Tea` which have a quantity less than 400"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d Searching by batch import date"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "To find out which drinks have been in the warehouse for a long period of time you can utilise this search function which will return the drinks that have batches older than or have the same date as the date input. +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Find drinks which have batches that are older or have the same date as the given date. +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Format `find d/DATE`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* Date must be in either of the following formats:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** `DD/MM/YYYY`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** `D/MM/YYYY`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* Date must be an existing date in the calendar"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** i.e. 30/02/2018 is a nonexistent date"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* Even if a drink has only 1 batch that meets the requirements, it will be shown"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* `find d/02/11/2018` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Returns all drinks which have batches imported on or before 2nd November 2018"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* `find d/9/11/2018` +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Returns all drinks which have batches imported on or before 9th November 2018"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d Viewing all drinks in inventory"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To show the full list of drinks in the inventory list, use `list`."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "This is especially useful after using a `find` command. +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*_Summary_* +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Command format*: `list`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step-by-Step Instructions* +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To view all drinks in *[blue]#_Drink I/O_#*,"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Enter `list` into the command box"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". You will see all the drinks listed in the inventory panel on the left of the interface."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "// tag::viewDrinkDetails[]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d Viewing drink details"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "To view further details of the drink such as its batches that are not displayed on the drink card panel, you can simply click on the relevant drink card to select it or use the select command."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Selects the drink identified by the index number used in the displayed drink list. +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* Selects the drink and loads the Drink detail page and the batch list page of the drink at the specified `INDEX`."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* The index refers to the numbered bullet shown in the displayed drink list."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "// end::viewDrinkDetails[]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Updating drink details"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You can change the cost price, selling price and tags of a drink. +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "For even greater efficiency, *[blue]#_Drink I/O_#* allows you to edit the above fields simultaneously."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You can do this by specifying multiple fields to edit in a single command."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*_For power users_* +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You can update multiple fields at once by indicating multiple fields to edit in one command. +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Command format*: `edit INDEX [cp/COST_PRICE] [p/SELLING_PRICE] [t/TAG]...`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `INDEX` refers to the numbered bullet shown in the displayed drink list."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* You must specify at least one of the fields."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating cost price"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*[blue]#_Drink I/O_#* allows you to change the cost price of a drink after adding it."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*_Summary_* +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Command format*: `edit INDEX cp/COST_PRICE`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `INDEX` refers to the numbered bullet shown in the displayed drink list."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step-by-Step Instructions* +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To edit the cost price of a drink in *[blue]#_Drink I/O_#*,"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Enter `edit` into the command box"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Enter the inventory list bullet number corresponding to the desired drink (`INDEX`)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Key in `cp/`, followed by new cost price (`COST_PRICE`)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Check whether the drink details have been edited successfully in the system"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*  If you see the message \"Edited drink\", followed by the updated drink details,"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " the drink\u0027s cost price has been successfully edited into *[blue]#_Drink I/O_#* +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** The drink\u0027s updated details will also be updated in the inventory list panel"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*  If not, follow the instructions displayed in the message display pane, and re-enter the command +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d Updating selling price"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*[blue]#_Drink I/O_#* allows you to change the selling price of a drink after adding it."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*_Summary_* +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Command format*: `edit INDEX p/SELLING_PRICE`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `INDEX` refers to the numbered bullet shown in the displayed drink list."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step-by-Step Instructions* +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To edit the selling price of a drink in *[blue]#_Drink I/O_#*,"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Enter `edit` into the command box"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Enter the inventory list bullet number corresponding to the desired drink (`INDEX`)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Key in `p/`, followed by new selling price (`SELLING_PRICE`)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Check whether the drink details have been edited successfully in the system"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*  If you see the message \"Edited drink\", followed by the updated drink details,"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " the drink\u0027s cost price has been successfully edited into *[blue]#_Drink I/O_#* +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** The drink\u0027s updated details will also be updated in the inventory list panel"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*  If not, follow the instructions displayed in the message display pane, and re-enter the command +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d Updating tags"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*[blue]#_Drink I/O_#* allows you to change the optional tags of a drink after adding it."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*_Summary_* +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Command format*: `edit INDEX t/TAG...` +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `INDEX` refers to the numbered bullet shown in the displayed drink list."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* You may enter any number of tags, including 0. To clear tags, enter `t/`."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step-by-Step Instructions* +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To edit the tags of a drink in *[blue]#_Drink I/O_#*,"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Enter `edit` into the command box"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Enter the inventory list bullet number corresponding to the desired drink (`INDEX`)"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Key in `t/`, followed by new tag (`TAG`)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* If you wish to clear tags, enter only `t/`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* You may enter multiple tags. An example to do so: `t/TAG_1 t/TAG_2`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Check whether the drink details have been edited successfully in the system"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*  If you see the message \"Edited drink\", followed by the updated drink details,"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " the drink\u0027s cost price has been successfully edited into *[blue]#_Drink I/O_#* +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** The drink\u0027s updated details will also be updated in the inventory list panel"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*  If not, follow the instructions displayed in the message display pane, and re-enter the command +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Editing the tags will replace _all_ existing tags of the drink with the new specified tags."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "// tag::transactions[]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Transactions"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To manage the purchases and sales of drinks, you can record them into *[blue]#_Drink I/O_#*,"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "and let *[blue]#_Drink I/O_#* handle the updating of the inventory for you in real-time."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "These transactions also facilitate financial analyses (see \u003c\u003cAnalysing Sales Performance\u003e\u003e)."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d Creating a purchase transaction"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "When you make a purchase, you can increase your stocks by entering a purchase transaction."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*_Summary_* +"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Command format*:"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "`buy n/NAME q/QUANTITY`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `NAME` is the name of the drink you are entering a transaction for"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** The desired drink must be recorded in *[blue]#_Drink I/O_#*"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** The name entered is case-sensitive"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `QUANTITY` is the number of cartons of drink that you are transacting"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step-by-Step Instructions* +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To record a purchase transaction,"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". Enter `buy` into the command box"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". Key in `n/`, followed by name of drink (`NAME`)"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Key in `q/`, followed by quantity purchased (`QUANTITY`)"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Confirm the command by entering `y` or `Y`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". Check whether the transaction has been recorded successfully"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "-  If you see the message \"Purchase transaction recorded!\", followed by the transaction details,"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " the transaction had been successfully entered into *[blue]#_Drink I/O_#* +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " ** The transaction will also appear at the bottom of the transaction list panel"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "-  If not, follow the instructions displayed in the message display pane, and re-enter the command +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "The drink you want to transact must be recorded in *[blue]#_Drink I/O_#*. The drink name is _case-sensitive_."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Otherwise, you will see the message \"The drink entered does not exist in the inventory list\", and"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "the transaction will not be entered into the system."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d Creating a sale transaction"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "When you make a sale, you can decrease your stocks by entering a sale transaction."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*_Summary_* +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Command format*:"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "`sell n/NAME q/QUANTITY` +"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `NAME` is the name of the drink you are entering a transaction for"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** The desired drink must be recorded in *[blue]#_Drink I/O_#*"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** The name entered is case-sensitive"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `QUANTITY` is the number of cartons of drink that you are transacting"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** Quantity must not exceed current stock"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step-by-Step Instructions* +"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "To record a sale transaction,"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Enter `sell` into the command box"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". Key in `n/`, followed by name of drink (`NAME`)"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". Key in `q/`, followed by quantity transacted in sale (`QUANTITY`)"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Confirm the command by entering `y` or `Y`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". Check whether the transaction has been recorded successfully,"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* If you see the message \"Sale transaction recorded!\", followed by the transaction details,"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " the transaction had been successfully entered into *[blue]#_Drink I/O_#*"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** The transaction will also appear at the bottom of the transaction list panel"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* If not, follow the instructions displayed in the message display pane, and re-enter the command +"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "- The drink you want to transact must be recorded in *[blue]#_Drink I/O_#*. The drink name is _case-sensitive_."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Otherwise, you will see the message \"The drink entered does not exist in the inventory list\", and"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "the transaction will not be entered into the system."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "- The recording will fail if `QUANTITY` is more than the available stock in *[blue]#_Drink I/O_#*."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "// end::transactions[]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Viewing transactions"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You can view all the transactions entered into *[blue]#_Drink I/O_#* to verify their accuracy."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*_Summary_* +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Command format*:"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "`viewTrans`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step by Step Instructions* +"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To view all transactions entered,"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Enter `viewTrans` into the command box"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You will see a list of all transactions displayed in the transactions panel."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "// tag::analysis[]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analysing Sales Performance"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*[blue]#_Drink I/O_#* can calculate the overall cost, revenue and profit aggregated across all drinks,"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "for various periods based on your list of transactions."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Indicating time period for analysis"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You can indicate the time period for the analysis of overall sales figures."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*_Summary_* +"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Time period parameters*:"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* Current day: (none)"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* Past 7 days (including current day): `-w`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* Past 30 days (including current day): `-m`"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "The time periods available are:"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* within the current day"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* within the week (including current day)"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* within 30 days (including current day)"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To indicate the time periods desired in your analysis, append one of the following period parameters to the end of the command:"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `-w` for a period of a week"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `-m` for a period of 30 days"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "No parameter is required for analysis in the period of a day."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "See \u003c\u003cViewing overall cost\u003e\u003e for concrete usage examples and step-by-step instructions."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Viewing overall cost"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You can check the total costs incurred by your company, over a specified period."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*_Summary_* +"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Command format*:"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "`costs [PERIOD_PARAMETER]`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `[PERIOD_PARAMETER]` is the parameter indicating the time period for analyses."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** It can be one of: (none), `-w` or `-m`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step by Step Instructions* +"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* To view the total costs incurred within the *current day*:"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Enter `costs` into the command box"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You should see the value of the total costs displayed in the results panel."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* To view the total costs incurred within the *past 7 days* (inclusive of current day):"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Enter `costs -w` into the command box"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You should see the value of the total costs incurred over the week displayed in the results panel."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* To view the total costs incurred within the *past 30 days* (inclusive of current day):"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Enter `costs -m` into the command box"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You should see the value of the total costs incurred over the past 30 days displayed in the results panel."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "The transactions list will also show the relevant transactions included in the analysis."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "// insert picture"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Viewing overall revenue"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You can check the total revenue earned by your company, over a specified period."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*_Summary_* +"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Command format*:"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "`revenue [PERIOD_PARAMETER]`"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `[PERIOD_PARAMETER]` is the parameter indicating the time period for analyses."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** It can be one of: (none), `-w` or `-m`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step by Step Instructions* +"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To view the total revenue earned,"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Enter `revenue` into the command box"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Append a desired period parameter"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * e.g. `-w`, `-m` (see \u003c\u003cIndicating time period for analysis\u003e\u003e)"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You should see the value of the total revenue earned in the specified period displayed in the results panel."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "The transactions list will also show the relevant transactions included in the analysis."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "// insert picture"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Viewing overall profit"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You can check the total profit earned by your company, over a specified period."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*_Summary_* +"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Command format*:"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "`profit [PERIOD_PARAMETER]`"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `[PERIOD_PARAMETER]` is the parameter indicating the time period for analyses."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** It can be one of: (none), `-w` or `-m`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Step by Step Instructions* +"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To view the total profit earned,"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Enter `profit` into the command box"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Append a desired period parameter"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * e.g. `-w`, `-m` (see \u003c\u003cIndicating time period for analysis\u003e\u003e)"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ". Press kbd:[enter]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "You should see the value of the total profit earned displayed in the results panel."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "The transactions list will also show the relevant transactions included in the analysis."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "// insert picture"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "// end::analysis[]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Filtering popular drinks `[Coming in v2.0]`"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Viewing a drink\u0027s transactions `[Coming in v2.0]`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Viewing a drink\u0027s cost, revenue and profit `[Coming in v2.0]`"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d Overview of Role-Specific Commands"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "*General Command Format*"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in UPPER_CASE are the parameters supplied by users"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* Use underscore for spaces for fields other than `NAME`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* Parameters can be supplied in any order as tags are specified"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** *e.g.* `p/` for selling price, `n/` for name"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* Parameters in square brackets are optional"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d Global Commands"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting Program: `exit`"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "Exits program."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "View help for respective users"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Change password: `changePassword`"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "Change password of the current account"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `changePassword o/OLD_PASSWORD n/NEW_PASSWORD`"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "This enables the user to change their password after manager create a default account."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d List all drinks: `list`"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Lists all the drinks in the inventory."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d View all transactions: `viewTrans`"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Lists all the transactions."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Format: `viewTrans`"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[#manager-commandSummary]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Manager Commands"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing Help: `help`"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Shows available commands with brief description of what a manager can do."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d Add new drink into inventory: `add`"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Add a new drink to the drink inventory."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\tFormat: `add n/DrinkItem p/DEFAULT_SELLING_PRICE cp/DEFAULT_COST_PRICE`"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "All the drinks added will be in a predefined list. As such, stock taker only able to add batches that is in this predefined list."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Edit attributes of a drink: `edit`"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Edits the cost price, selling price and tags of a drink."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Format: `edit INDEX [cp/COST_PRICE] [p/SELLING_PRICE] [t/TAG]...` +"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "One or more of the parameters must be included in the command."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[#stocktaker-commandSummary]"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Stock Taker Commands"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing Help: `help`"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Shows available commands with brief description of what a stock taker can do."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d Increase stock of a drink: `buy`"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Records purchase of a drink. +"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\tFormat: `buy n/DRINK_NAME q/QUANTITY_PURCHASED` +"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `buy n/coca cola q/12`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "DRINK_NAME is predefined by manager, so an alert message will appear if the drink name is not in the predefined list."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "In addition, drink name is *case-sensitive*."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d Decrease stock of a drink: `sell`"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Record sale of a drink. +"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Format: `sell n/DRINK_NAME  q/QUANTITY_SOLD` +"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* `sell n/coca cola q/15`"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* DRINK_NAME is predefined by manager, so an alert message will appear if the drink name is"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "not in the inventory list"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* Quantity sold cannot be more than stock. Otherwise, a warning message will be shown."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[#accountant-commandSummary]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Accountant Commands"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing Help: `help`"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "Shows available commands with brief description of what the accountant account can do. +"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "    Format: `help`"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d Get the total profit of the company over specified periods: `profit`"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "View the total profit earned in time periods of a day, 7 days and 30 days (including current day)."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "\tFormat: `profit`"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To view profit earned up to now in the current day, no parameters are used. i.e. just `profit`"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To view profit earned in last 7 days, append `-w`"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To view profit earned in last 30 days, append `-m`"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d Get the total revenue of the company over specified periods: `revenue`"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "View the total revenue earned in time periods of a day, 7 days and 30 days (including current day)."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\tFormat: `revenue`"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To view revenue earned up to now in the current day, no parameters are used. i.e. just `profit`"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To view revenue earned in last 7 days, append `-w`"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To view revenue earned in last 30 days, append `-m`"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d Get the total costs of the company over specified periods: `costs`"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "View the total costs incurred in time periods of a day, 7 days and 30 days (including current day)."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\tFormat: `costs`"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To view costs earned up to now in the current day, no parameters are used. i.e. just `profit`"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To view costs earned in last 7 days, append `-w`"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "To view costs earned in last 30 days, append `-m`"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d Get the quantities of each drink item sold over specified periods: `sales` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "View the sales number of each drink item in a period specified by the starting date and ending date."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "\tFormat: `sales STARTING_DATE ENDING_DATE`"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d\u003d Get the trend of cost of every drink over specified periods: `drinkcosts` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "View the variation tendency of the cost of every ingredient in a period specified by the starting date and ending date."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\tFormat: `drinkcost STARTING_DATE ENDING_DATE`"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "////"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Clears all data from the inventory. +"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "////"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d\u003d Administrator Commands"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d\u003d\u003d Creating an account: `createAccount`"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Creates a new Drink I/O account."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    Format: `createAccount u/USER_NAME p/PASSWORD a/AUTHENTICATION_LEVEL`"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*[blue]#_Drink I/O_#* data is saved in the hard disk automatically after any command that changes the drinks data"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "or updates the transactions. +"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d Upcoming Features in Future Releases"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*Q*: How do I transfer my data to another computer? +"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*A*: Install *[blue]#_Drink I/O_#* in the other computer. Overwrite the empty data file *[blue]#_Drink I/O_#* creates"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "with the file that contains the data of your previous *[blue]#_Drink I/O_#* folder."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bluein-green": 486,
      "scottljw": 3,
      "Lunastryke": 161,
      "-": 272
    }
  },
  {
    "path": "docs/team/bluein-green.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d Jin Minjia - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d PROJECT: Drink I/O"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "As part of a NUS Software Engineering project, my group and I built *[blue]#_Drink I/O_#*,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "a *one-stop, comprehensive inventory manager* for small drink distribution companies."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*[blue]#_Drink I/O_#* enables these companies to *keep track of their inventory* and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*analyse their sales performance*, and hence increase their productivity."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*[blue]#_Drink I/O_#* is optimised for Command Line Interface (CLI), with a Graphic User Interface (GUI)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "to make it easier for users to interact with the app. It is written in Java, and has about 10kLoC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "This project portfolio documents my contributions to the project, in particular the major feature I made:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "the sales performance analyser feature."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* *Major feature implemented*: Feature to *analyse cost, revenue and profit* over specific time periods"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** _What it does_: Allows the user to calculate the overall cost, revenue and profit of the company"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "over based on its transactions. The statistics can be calculated over the time periods of:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "a day, the past 7 days (including the current day), the past 30 days (including the current day)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** _Justification_: This feature enables the accountants in a small company to calculate the company\u0027s sales performance quickly."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "It also allows the company to keep track of its finances simultaneously with its inventory."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** _Highlights_: This feature required the building of new classes to record the transactions: a `Transaction` class, and a `TransactionList` class to hold the `Transaction` s."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "I was also challenged to optimise the code by using `Predicate` s to filter the list of transactions by date and `TransactionType`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "This filtered list of transactions is then used for the computation of the sales figures."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003dbluein-green[Functional and test code]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** *Morphing of existing model*:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*** The original code base is for an address book. Hence, the fundamental model used has to be changed to suit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*[blue]#_Drink I/O_#*. I morphed the model from that of a `Person` to a `Drink`, and created the relevant `Drink` attributes, such as `Price`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*** Commands to buy and sell drinks did not exist in the original code base, but are necessary for an app for a drink distribution company."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " I implemented the `buy` and `sell` commands, which required an in-depth understanding of how the `Model` and `Logic` components worked."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** *Minor feature implemented*: Feature to *edit* the details of a drink in the inventory"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*** This enables the user to edit the cost price, selling price and tags of a drink."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*** Managed releases for *[blue]#_Drink I/O_#*: `v1.2` and `v1.3` on GitHub"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "*** Reported bugs for Team F09-3 in the class: https://github.com/CS2113-AY1819S1-F09-3/main/issues/244[#244],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "https://github.com/CS2113-AY1819S1-F09-3/main/issues/245[#245]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "https://github.com/CS2113-AY1819S1-F09-3/main/issues/249[#249],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "https://github.com/CS2113-AY1819S1-F09-3/main/issues/251[#251],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "https://github.com/CS2113-AY1819S1-F09-3/main/issues/257[#257]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "| This section showcases my contribution to the User Guide in relation to the sales performance analysis feature. The performance statistics that can be calculated are cost, revenue and profit, and they can be computed over specific time periods."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "include::../UserGuide.adoc[tag\u003danalysis]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "| Shown below are the sections I contributed to the Developer Guide in relation to the sales performance analysis feature."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003danalyses]"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 64
    }
  },
  {
    "path": "docs/team/liu-tianhang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Liu Tianhang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":product_name : Drink I/O"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "[blue]#DRINK I/O# is a desktop inventory application for small enterprises. The product aims to increase the *productivity* and *efficiency* of companies by digitizing the paperwork."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Most of the user interactions are via CLI, while there exists a GUI created with JavaFX. It is written in Java and has about 10kLoC."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement 1*: Partition command into 3 roles (manager, accountant and stock taker)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: Allow 3 roles to do explicit command that only related to their roles(more details are in the https://github.com/CS2113-AY1819S1-W12-4/main/blob/master/docs/UserGuide.adoc[user guide])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This prevents one user from misuse or abuse other user commands. Hence, it increases the security of the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: The implementation too was challenging as it required changes to existing initiation,model, storage. SOLID principle are followed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement 2*: User login"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: Allows different user to login to the system."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This features increase the security of the product significantly because it restrict the application user to account holder."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: The implementation too was challenging as it required changes to existing initiation and UI. It also create a standalone \"addressbook\" that stores user information using JSON file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "I have use javax.crypto and other java function to hashed and verify password. Credits: http://www.appsdeveloperblog.com/encrypt-user-password-example-java/[learning material]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: Create command and command parser for the product"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: Create individual help window for respective roles."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* Code contributed: [https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003dliu-tianhang\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-05\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[Reposense]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases jar file `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#6], https://github.com[#32]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com/nusCS2113-AY1819S1/forum/issues/72[#72], https://github.com/nusCS2113-AY1819S1/forum/issues/43[#43])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated sceneBuilder and JFoenix to the project (https://github.com/nusCS2113-AY1819S1/forum/issues/11[#11])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlogin]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003daccount]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcommandPartition]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlogin]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "-": 66
    }
  },
  {
    "path": "docs/team/lunastryke.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d Lim Xuan Hao - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "This project portfolio documents my role in the CS2113T module project. My main role was in handling documentation and the scheduling and tracking of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "As part of the module, my teammates and I collaborated to develop a drink management application - Drink I/O. Drink I/O is targeted at small drink distribution companies and provides inventory management and financial tools. Users interact with the app using CLI, and it has a GUI created with JavaFX. This project is written in Java and has approximately 30 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* *Major enhancement*: *Added Batch List and Batch Handling functionality* +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "In drink companies, whenever drinks are imported, they are imported in batches and cartons. This enhancement simulates the situation in the real world and helps drink companies to manage their stock better."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** *Functionality:* Each drink has its own batches stored in a batch list. Whenever drinks are purchased, they are assigned to a batch based on date of import and stored in the batch list for that drink. Whenever drinks are sold, the stocks are automatically deducted across the batches, deducting from the batch with the earliest import date first."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** *Justification:* This feature improves inventory management significantly as it ensures that drinks that were imported first into the warehouse are sold first. This reduces turnover time and wastage due to drinks expiring. This is especially applicable as drink distribution companies often have multiple batches of the same drink with different import dates in their warehouse at any time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** *Highlights:* This enhancement required in-depth knowledge of the model and the associations between the different classes to properly handle updates to the objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* *Major enhancement*: *Displaying of Drink Details* +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Added display panels to summarise and display more details about a drink allowing users to view the information they need in a organised and easy to understand manner."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "In drink companies, whenever drinks are imported, they are imported in batches and cartons. This enhancement simulates the situation in the real world and helps drink companies to manage their stock better."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** *Functionality:*  Allows users to see at a glance a summary of the details of the drinks and upon selecting the relevant drink, to see all other details such as every batch in the batch list of a drink and the import date of the earliest and latest batch."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** *Justification:* Applications should be easy for the user to use to be effective, so this enables users to easily retrieve more details and data in an easy to read and understand form with a single click or a single command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** *Highlights:* Required knowledge of JavaFx and FXML to construct the various panels and an understanding of event handlers to ensure that the panels remain updated when there were changes to the batches."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* *Major enhancement*: *Enhancement of Search function*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "Enhanced the Search function allowing users to search through the inventory based on name, quantity and date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** *Functionality:* Users can search through the entire inventory list for drinks by name, drinks that have quantity less than or equal to the input, and drinks that have dates earlier than or equal to the input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** *Justification:* The main concern of small drink distribution companies when managing their inventory is how to know which drink is low on stock and requires restocking or which drink batches have been in the inventory for very long and need to be cleared before they expire. This feature allows them to get this information quickly and easily via just 1 command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** *Highlights:* Implementing this feature required in-depth knowledge of the logic and model components and the way in which they interact together."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* *Minor enhancement*: Morphed the existing storage to store the drinks and their respective batch lists. Required knowledge of XML to wrap the batch lists in a wrapper such that they would be stored properly."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003dlunastryke\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-05\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[Functional and Test code]]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#155])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "*** Designed the Drink I/O logo (Featured on 1st page of UG)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "*** Edited User Guide for formatting and language (Pull requests https://github.com[#160], https://github.com[#170])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "*** Resolved bugs (Pull requests https://github.com[#181], https://github.com[#175], https://github.com[#169], https://github.com[#103])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|_This section documents my contributions to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfind]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlist]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "include::../UserGuide.adoc[tag\u003dviewDrinkDetails]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dui]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dinventory]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "Lunastryke": 76
    }
  },
  {
    "path": "docs/team/scottljw.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scottljw"
        },
        "content": "\u003d Li Jiawei (Scott) - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scottljw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scottljw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scottljw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scottljw"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scottljw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scottljw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scottljw"
        },
        "content": "During our Software Engineering project, my teammates and I developed an inventory management application named Drink I/O for the usage inside a typical small drink store. Adopted from an Address Book application, Drink I/O is a desktop application written in Java with a CLI, and it has a GUI created with JavaFX. The product aims to increase the productivity and efficiency in the drink store as it provides a simpler way to manage the stocks, and thus resolves many difficulties the manager and employees may face when using traditional inventory manipulation strategies."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scottljw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scottljw"
        },
        "content": "* *Major enhancement*: Proposed to added *the Calendar System*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scottljw"
        },
        "content": "** What it does: offer the users a clear view of the batches of drinks with corresponding number left in stock, shown in a calendar form."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scottljw"
        },
        "content": "** Justification: This feature improves the efficiency because the manager and staffs in the drink store can share the same view of the calendar and everyone will be able to have real-time updates on the situation in the stocks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scottljw"
        },
        "content": "** Highlights: This enhancement uses JavaFX to show the calendar view in the GUI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scottljw"
        },
        "content": "** Credits: [https://github.com/dlemmermann/CalendarFX[CalendarFX API]]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scottljw"
        },
        "content": "* *Minor enhancement*: Morphed the storage for the Address Book towards the storage for drink inventory. XML files are used as the storage file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scottljw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scottljw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scottljw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scottljw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scottljw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scottljw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scottljw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scottljw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmanage]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scottljw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scottljw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scottljw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scottljw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scottljw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scottljw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstorage]"
      }
    ],
    "authorContributionMap": {
      "scottljw": 44
    }
  },
  {
    "path": "loginInfoManager.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"loginInfoList\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"userName\" : {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"userName\" : \"tianhang\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"password\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"password\" : \"Gcf70h4aWQ1T9NMxE03XM3nq3nCmFGihnO4xMzHMgP0\u003d\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"authenticationLevel\" : {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      \"authenticationLevel\" : \"ADMIN\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"userName\" : {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \"userName\" : \"tester\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"password\" : {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \"password\" : \"Gcf70h4aWQ1T9NMxE03XM3nq3nCmFGihnO4xMzHMgP0\u003d\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"authenticationLevel\" : {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \"authenticationLevel\" : \"ADMIN\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"userName\" : {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"userName\" : \"bla\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    },"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"password\" : {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"password\" : \"fcZGTS/iFhX76g2TSN0Xwco2kKX6jThyljIAHUj540w\u003d\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    },"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"authenticationLevel\" : {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"authenticationLevel\" : \"ACCOUNTANT\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 10,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.events.ui.LogoutEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.events.ui.StopUiEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.init.InventoryListInitializer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.LoginInfoManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.LoginInfoModel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.storage.InventoryListStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.storage.XmlInventoryListStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.storage.logininfo.JsonLoginInfoStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.storage.logininfo.LoginInfoStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.storage.transactions.TransactionListStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.storage.transactions.XmlTransactionListStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.ui.controller.LoginController;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 7, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected Stage loginWindow;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private FXMLLoader fxmlLoader;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private LoginInfoModel loginInfoList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private LoginController loginController;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private String loginPathPath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private InventoryListInitializer inventoryListInitializer;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing DRINK I/O ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        LoginInfoStorage loginInfoStorage \u003d new JsonLoginInfoStorage(config.getUserLoginInfoFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginInfoList \u003d initLoginInfo(loginInfoStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginPathPath \u003d config.getLoginPagePath().toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        InventoryListStorage inventoryListStorage \u003d new XmlInventoryListStorage(userPrefs.getInventoryListFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        TransactionListStorage transactionListStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                new XmlTransactionListStorage(userPrefs.getTransactionListFilePath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        storage \u003d new StorageManager(inventoryListStorage, userPrefsStorage, loginInfoStorage, transactionListStorage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        inventoryListInitializer \u003d new InventoryListInitializer(config, storage, userPrefs, loginInfoList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginWindow \u003d primaryStage;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        logger.info(\"Starting Drink I/O \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        showLoginPage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        saveUserPrefs ();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        saveLoginInfo();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns a {@code LoginInfoManager} using the file at {@code storage}\u0027s login info file path,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * or a new {@code LoginInfoManager} with default configuration if errors occur when"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected LoginInfoModel initLoginInfo(LoginInfoStorage storage) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Path loginInfoFilePath \u003d storage.getLoginInfoFilePath ();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        logger.info(\"Using Login information file : \" + loginInfoFilePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        LoginInfoModel initLoginInfoManager;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            Optional\u003cLoginInfoManager\u003e loginInfoOptional \u003d storage.readLoginInfo();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            initLoginInfoManager \u003d loginInfoOptional.orElse(new LoginInfoManager ());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            logger.warning(\"Login Info file at \" + loginInfoFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                    + \"Using empty database\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            initLoginInfoManager \u003d new LoginInfoManager();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Please find ADMIN\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            initLoginInfoManager \u003d new LoginInfoManager();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            e.fillInStackTrace();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            initLoginInfoManager \u003d new LoginInfoManager();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            storage.saveLoginInfo((LoginInfoManager) initLoginInfoManager);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            logger.warning(\"Failed to save LoginInfoManager file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return initLoginInfoManager;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Start Login scene"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void showLoginPage() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        settingUpLoginWindow();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        settingUpLoginController();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void settingUpLoginWindow() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        URL fxmlLoginFileUrl \u003d UiPart.getFxmlFileUrl(loginPathPath);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Parent root \u003d loadFxmlFile(fxmlLoginFileUrl, loginWindow);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginWindow.setTitle(\"Login Page\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginWindow.setScene(new Scene(root));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginWindow.show();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void settingUpLoginController() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginController \u003d new LoginController();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        passInLoginList();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * pass the loginInfoModel to controller"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void passInLoginList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginController.getLoginInfoList(loginInfoList);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * loads the file from {@code location}, set {@code stage} and return the {@code root}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private Parent loadFxmlFile(URL location, Stage stage) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Parent root;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            root \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return root;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        stop ();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void handleLogoutEvent(LogoutEvent event) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        hideCurrentWindow();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        saveLoginInfo();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        saveUserPrefs ();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        showLoginWindow();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void showLoginWindow() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginWindow.show();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Hide the current stage that is showing"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void hideCurrentWindow() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        EventsCenter.getInstance ().post (new StopUiEvent ());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Save UserPref into storage"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void saveUserPrefs() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping DRINK I/O ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Save Login information into storage"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void saveLoginInfo() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            storage.saveLoginInfo((LoginInfoManager) loginInfoList);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            logger.severe(\"Failed to save Login information \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 324
    }
  },
  {
    "path": "src/main/java/seedu/address/analysis/Analysis.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.analysis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * APIs for AnalysisManager (analyses of profit, revenue, cost, quantity sold)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public interface Analysis {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    Price analyseProfit();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    Price analyseCost();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    Price analyseRevenue();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // public Stock analyseQuantitiesSold();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/analysis/AnalysisManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.analysis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.NegativePrice;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Represents functions to analyse profit, revenue, cost, quantity sold."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Functions are performed on the filteredTransactions list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class AnalysisManager extends ComponentManager implements Analysis {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private TransactionList transactionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private FilteredList\u003cTransaction\u003e filteredTransactions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public AnalysisManager(TransactionList transactionList, FilteredList\u003cTransaction\u003e filteredTransactions) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.transactionList \u003d transactionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.filteredTransactions \u003d filteredTransactions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Price analyseProfit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return calculateTotalProfit();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Price analyseCost() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return calculateTotalCost();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Price analyseRevenue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return calculateTotalRevenue();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calculates the total cost of all the transactions."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return total cost incurred for all transactions"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Price calculateTotalCost() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        float totalCost \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Transaction transaction : filteredTransactions) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (transaction.getTransactionType() \u003d\u003d TransactionType.PURCHASE) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                totalCost +\u003d transaction.getAmountMoney().getValue();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Price(Float.toString(totalCost));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Calculates the total revenue of the transactions in the {@code filteredTransactions}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @return total revenue earned for the transactions listed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Price calculateTotalRevenue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        float totalRevenue \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        for (Transaction transaction : filteredTransactions) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            if (transaction.getTransactionType() \u003d\u003d TransactionType.SALE) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                totalRevenue +\u003d transaction.getAmountMoney().getValue();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return new Price(Float.toString(totalRevenue));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Calculates the total profit from the transactions in the {@code filteredTransactions}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @return total profit earned for the transactions listed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Price calculateTotalProfit() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        float totalCost \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        float totalRevenue \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        for (Transaction transaction : filteredTransactions) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            if (transaction.getTransactionType() \u003d\u003d TransactionType.SALE) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                totalRevenue +\u003d transaction.getAmountMoney().getValue();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                totalCost +\u003d transaction.getAmountMoney().getValue();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        float totalProfit \u003d totalRevenue - totalCost;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (totalProfit \u003c 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return new NegativePrice(Float.toString(-1 * totalProfit));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return new Price(Float.toString(totalProfit));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 83,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/analysis/AnalysisPeriodType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.analysis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the possible analysis periods to be analysed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public enum AnalysisPeriodType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    DAY() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        public TransactionPeriodPredicate getPeriodFilterPredicate() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            return new TransactionInDayPredicate();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    WEEK() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        public TransactionPeriodPredicate getPeriodFilterPredicate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return new TransactionInSevenDaysPredicate();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    MONTH {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        public TransactionPeriodPredicate getPeriodFilterPredicate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return new TransactionInThirtyDaysPredicate();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String WRONG_PERIOD_MESSAGE \u003d \"You have entered an invalid period\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public abstract TransactionPeriodPredicate getPeriodFilterPredicate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 10,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/analysis/PurchaseTransactionPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.analysis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Tests that a {@code Transaction} is a purchase."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class PurchaseTransactionPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return transaction.getTransactionType() \u003d\u003d TransactionType.PURCHASE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/analysis/SaleTransactionPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.analysis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Tests that a {@code Transaction} is a sale."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class SaleTransactionPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return transaction.getTransactionType() \u003d\u003d TransactionType.SALE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/analysis/TransactionInDayPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.analysis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.drink.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Transaction} occurred in the current day."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TransactionInDayPredicate extends TransactionPeriodPredicate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return transaction.getTransactionDate().compareTo(new Date()) \u003d\u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/analysis/TransactionInSevenDaysPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.analysis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.drink.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Transaction} occurred in the last 7 days."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TransactionInSevenDaysPredicate extends TransactionPeriodPredicate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return transaction.getTransactionDate().isBetween(new Date().getDateSixDaysBefore(), new Date());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/analysis/TransactionInThirtyDaysPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.analysis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.drink.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * ToDO: fill up this"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TransactionInThirtyDaysPredicate extends TransactionPeriodPredicate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return transaction.getTransactionDate().isBetween(new Date().getDateTwentyNineDaysBefore(), new Date());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/analysis/TransactionPeriodPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.analysis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Abstract class that tests whether a {@code Transaction} occurred in the relevant period."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public abstract class TransactionPeriodPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public abstract boolean test(Transaction transaction);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/authentication/LoginUtils.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.authentication;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.CurrentUser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.LoginInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.LoginInfoModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Contains utility methods used for login check"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class LoginUtils {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private LoginInfoModel loginInfoModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private LoginInfo userInfoInStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private UserName username;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private Password password;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LoginUtils.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public LoginUtils(UserName username, Password password, LoginInfoModel loginInfoModel) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.loginInfoModel \u003d loginInfoModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Check the password and username with logininfo list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public boolean isPasswordAndUserNameValid () {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (getLoginInfoFromStorage ().isPresent ()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            userInfoInStorage \u003d getLoginInfoFromStorage().get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (isPasswordCorrect()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            setCurrentUser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns true if able to find same username in storage"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private Optional\u003cLoginInfo\u003e getLoginInfoFromStorage() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        LoginInfo userInfoInStorage \u003d loginInfoModel.getLoginInfo (username);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (userInfoInStorage \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return Optional.empty ();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return Optional.of(userInfoInStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Return true is password is correct"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private boolean isPasswordCorrect() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String securePassword \u003d userInfoInStorage.getPasswordString ();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return PasswordUtils.verifyUserPassword(password.toString (), securePassword);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Set current User"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void setCurrentUser() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        CurrentUser.setLoginInfo (username, userInfoInStorage.getAuthenticationLevel ());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        logger.info (String.format (\"User has login with user name : \" + CurrentUser.getUserName ()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/authentication/PasswordUtils.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.authentication;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.security.spec.InvalidKeySpecException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javax.crypto.SecretKeyFactory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javax.crypto.spec.PBEKeySpec;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * A container for password utilities"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * code learn from http://www.appsdeveloperblog.com/encrypt-user-password-example-java/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class PasswordUtils {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    //fixed salt for the seek for cs2113, can made dynamic when needed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static final String salt \u003d \"EqdmPh53c9x33EygXpTpcoJvc4VXLK\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static final int ITERATIONS \u003d 10000;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static final int KEY_LENGTH \u003d 256;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Return {@code hashedPassword} after {@code password} is hashed with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *  {@code salt}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static byte[] hash(char[] password, byte[] salt) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        PBEKeySpec spec \u003d new PBEKeySpec(password, salt, ITERATIONS, KEY_LENGTH);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Arrays.fill(password, Character.MIN_VALUE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            SecretKeyFactory skf \u003d SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return skf.generateSecret(spec).getEncoded();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"Error while hashing a password: \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            spec.clearPassword();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Return {@code hashedPassword} base on {@code password}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static String generateSecurePassword(String password) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String hashedPassword \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        byte[] securePassword \u003d hash(password.toCharArray(), salt.getBytes());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        hashedPassword \u003d Base64.getEncoder().encodeToString(securePassword);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return hashedPassword;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns true of providedPassword is equal to securedPassword after hashing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static boolean verifyUserPassword(String providedPassword,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                             String securedPassword) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        boolean returnValue \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String newSecurePassword \u003d generateSecurePassword(providedPassword);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        returnValue \u003d newSecurePassword.equals(securedPassword);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return returnValue;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private String appTitle \u003d \"Drink I/O\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private Path userLoginInfoFilePath \u003d Paths.get(\"loginInfoList.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path loginPagePath \u003d Paths.get (\"LoginPage.fxml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Path getUserLoginInfoFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userLoginInfoFilePath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void setUserLoginInfoFilePath(Path userLoginInfoFilePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userLoginInfoFilePath \u003d userLoginInfoFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getLoginPagePath () {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return loginPagePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLoginPagePath (Path loginPagePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.loginPagePath \u003d loginPagePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals (userLoginInfoFilePath, o.userLoginInfoFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath, userLoginInfoFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append (\"\\nLogin info file Location : \" + userLoginInfoFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 3,
      "liu-tianhang": 2,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/CurrentUser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.AuthenticationLevel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Current user info used by the app"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class CurrentUser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static UserName userName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static AuthenticationLevel authenticationLevel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static UserName getUserName () {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return userName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static String getAuthenticationLevel () {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return authenticationLevel.toString ();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Return true if {@code test} is equal to the authenticationLevel"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static boolean checkAuthenticationLevel(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (authenticationLevel.toString ().equals (test)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static LoginInfo getCurrentUser () {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        LoginInfo currentUser \u003d new LoginInfo (userName, authenticationLevel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentUser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setLoginInfo (UserName userName, AuthenticationLevel authenticationLevel) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        CurrentUser.userName \u003d userName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        CurrentUser.authenticationLevel \u003d authenticationLevel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 27,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/EventsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.EventBus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages the event dispatching of the app."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCenter {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EventsCenter.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static EventsCenter instance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EventBus eventBus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private ArrayList\u003cObject\u003e eventsHandler;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private EventsCenter() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus \u003d new EventBus();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        eventsHandler \u003d new ArrayList \u003c\u003e ();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EventsCenter getInstance() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            instance \u003d new EventsCenter();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void clearSubscribers() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        instance \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void registerHandler(Object handler) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.register(handler);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts an event to the event bus."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public \u003cE extends BaseEvent\u003e EventsCenter post(E event) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"------[Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.post(event);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Check for duplicated handlers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @param handler"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private boolean checkForDuplicateHandler(Object handler) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (eventsHandler.contains (handler)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        eventsHandler.add (handler);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 16,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LoginInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.AuthenticationLevel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * This contains the login information of user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class LoginInfo {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserName userName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Password password;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AuthenticationLevel authenticationLevel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public LoginInfo(){}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public LoginInfo (UserName userName, AuthenticationLevel authenticationLevel) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.authenticationLevel \u003d authenticationLevel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public LoginInfo (UserName userName, Password password, AuthenticationLevel authenticationLevel) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.authenticationLevel \u003d authenticationLevel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPassword (Password password) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(userName , password, authenticationLevel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString () {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"userName : \" + userName.toString ());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append (\"\\npassword : \" + password.toString ());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append (\"\\nauthenticationLevel : \" + authenticationLevel.toString ());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUserNameString () {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userName.toString ();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPasswordString () {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return password.toString ();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAuthenticationLevelString () {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return authenticationLevel.toString ();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public AuthenticationLevel getAuthenticationLevel () {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return authenticationLevel;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserName getUserName() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true is {@code test} is equal to {@code userName}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isUserNameMatched(UserName test) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (userName.equals (test)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_INVALID_DRINK_DISPLAYED_INDEX \u003d \"The drink index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_DRINKS_LISTED_OVERVIEW \u003d \"%1$d drinks listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String MESSAGE_NO_DRINK_BATCHES \u003d \"No existing drink batches in the list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String MESSAGE_MULTIPLE_PREFIX \u003d \"Please only use 1 prefix in the command\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 2,
      "Lunastryke": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/DrinkAttributeChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Indicates an attribute in a drink has changed"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class DrinkAttributeChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private final Drink editedDrink;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public DrinkAttributeChangedEvent(Drink drink) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.editedDrink \u003d drink;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Drink getEditedDrink() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return editedDrink;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/InventoryListChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.ReadOnlyInventoryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates the inventoryList in the model has changed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class InventoryListChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public final ReadOnlyInventoryList data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public InventoryListChangedEvent(ReadOnlyInventoryList input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.data \u003d input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return \"number of drinks \" + data.getDrinkList().size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 18,
      "Lunastryke": 2,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/TransactionListChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates the Transaction List in the model has changed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TransactionListChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public final ReadOnlyTransactionList data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionListChangedEvent(ReadOnlyTransactionList data) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return \"number of transactions: \" + data.getTransactionList().size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 20,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/InventoryPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Represents a selection change in the Inventory List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class InventoryPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final Drink newSelection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public InventoryPanelSelectionChangedEvent(Drink newSelection) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Drink getNewSelection() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/PersonPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a selection change in the Person List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private final Drink newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public PersonPanelSelectionChangedEvent(Drink newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public Drink getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 4,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/StartUiEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Indicates a request from login page to main app"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class StartUiEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public final Stage mainStage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public StartUiEvent (Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.mainStage \u003d stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 18,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *       containsPatternIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *       containsPatternIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *       containsPatternIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param wordList cannot be null, cannot be empty"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static boolean containsPatternIgnoreCase(String sentence, String wordList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireNonNull(wordList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        String preppedWordList \u003d wordList.toLowerCase().trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        checkArgument(!preppedWordList.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        String[] wordsInWordList \u003d preppedWordList.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return Stream.of(wordsInWordList).allMatch(preppedSentence::contains);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 25,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/init/InventoryListInitializer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.init;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.authentication.AuthenticationLevelConstant.AUTH_ACCOUNTANT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.authentication.AuthenticationLevelConstant.AUTH_ADMIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.authentication.AuthenticationLevelConstant.AUTH_MANAGER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.authentication.AuthenticationLevelConstant.AUTH_STOCK_TAKER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.CurrentUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.ChangeModelEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.events.model.InitInventoryListEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.InventoryList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.LoginInfoModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.ReadOnlyInventoryList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.accountant.AccountantModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.admin.AdminModelManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.manager.ManagerModelManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.stocktaker.StockTakerModelManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Contain item that has to be init after login"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class InventoryListInitializer {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private LoginInfoModel loginInfoModel;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private TransactionList transactionList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public InventoryListInitializer (Config config, Storage storage,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                                     UserPrefs userPrefs, LoginInfoModel loginInfoModel) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.loginInfoModel \u003d loginInfoModel;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * init Drink I/O after login"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void initAfterLogin() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        logic \u003d new LogicManager (model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ui \u003d new UiManager (logic, config, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s inventory list and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * The data from the sample inventory list will be used instead if {@code storage}\u0027s inventory list is not found,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * or an empty inventory list will be used instead if errors occur when reading {@code storage}\u0027s inventory list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyInventoryList initialData \u003d readInventoryDataFromStorage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyTransactionList initialTransactionData \u003d readTransactionListFromStorage();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return chooseModelAccordingToAuthentication (initialData, initialTransactionData);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Returns {@code ReadOnlyInventoryList} after reading from storage"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private ReadOnlyInventoryList readInventoryDataFromStorage() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyInventoryList\u003e inventoryListOptional;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            inventoryListOptional \u003d storage.readInventoryList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            if (!inventoryListOptional.isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Inventory List\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return inventoryListOptional.orElseGet(SampleDataUtil::getSampleInventoryList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Inventory List\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new InventoryList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Inventory List\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new InventoryList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Returns {@code ReadOnlyTransactionList} after reading from storage"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private ReadOnlyTransactionList readTransactionListFromStorage() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyTransactionList\u003e transactionListOptional;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            transactionListOptional \u003d storage.readTransactionList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            if (!transactionListOptional.isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                logger.info(\"Transaction data file not found. Will be starting with a sample Transaction List\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return transactionListOptional.orElseGet(SampleDataUtil::getSampleTransactionList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            logger.warning(\"Transaction data file not in the correct format.\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    + \" Will be starting with an empty Transaction List\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return new TransactionList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            logger.warning(\"Problem while reading from the transaction datafile.\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    + \"Will be starting with an empty Transaction List\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return new TransactionList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Model} according to their AuthenticationLevel"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model chooseModelAccordingToAuthentication (ReadOnlyInventoryList initialData,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                                                        ReadOnlyTransactionList initialTransactionData) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (CurrentUser.getAuthenticationLevel()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        case AUTH_ADMIN:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AdminModelManager(initialData, userPrefs, loginInfoModel, initialTransactionData);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        case AUTH_MANAGER:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ManagerModelManager(initialData, userPrefs, loginInfoModel, initialTransactionData);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        case AUTH_STOCK_TAKER:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return new StockTakerModelManager(initialData, userPrefs, loginInfoModel, initialTransactionData);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        case AUTH_ACCOUNTANT:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AccountantModelManager(initialData, userPrefs, loginInfoModel, initialTransactionData);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Database authentication level do not match with predefined authentication level\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ModelManager(initialData, userPrefs, loginInfoModel, initialTransactionData);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleInitInventoryListEvent(InitInventoryListEvent event) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        initAfterLogin ();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleChangeModelEvent(ChangeModelEvent event) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.changeModelAfterReLogin (model);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 24,
      "liu-tianhang": 76,
      "Lunastryke": 5,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the logic component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of drinks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    ObservableList\u003cDrink\u003e getFilteredDrinkList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void changeModelAfterReLogin(Model model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns an unmodifiable view of the transactions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 13,
      "liu-tianhang": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.user.AccountantParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.user.AdminParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.user.ManagerParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.user.StockTakerParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.accountant.AccountantModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.admin.AdminModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.manager.ManagerModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.stocktaker.StockTakerModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private final AdminParser adminParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private final StockTakerParser stockTakerParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private final ManagerParser managerParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private final AccountantParser accountantParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public LogicManager(Model newModel) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        model \u003d newModel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        //addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        adminParser \u003d new AdminParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        stockTakerParser \u003d new StockTakerParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        managerParser \u003d new ManagerParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        accountantParser \u003d new AccountantParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Command command \u003d parseCommandAccordingToAuthentication(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        history.add(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return command.execute(model, history);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *  Parse respective command according to their model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *  Returns {@code command} according to {@code commandText}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *  @throws ParseException if there is no model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private Command parseCommandAccordingToAuthentication(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (model instanceof AdminModel) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return adminParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else if (model instanceof StockTakerModel) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return stockTakerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else if (model instanceof AccountantModel) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return accountantParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else if (model instanceof ManagerModel) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return managerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        throw new ParseException (\"Unknown Command\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public ObservableList\u003cDrink\u003e getFilteredDrinkList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return model.getFilteredDrinkList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void changeModelAfterReLogin(Model model) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.InventoryList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Clears the inventory list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Inventory list has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        model.resetData(new InventoryList ());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "liu-tianhang": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_COST_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_DEFAULT_SELLING_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.user.manager.ManagerModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the drink identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + \"by the index number used in the displayed drink list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + \"[\" + PREFIX_DRINK_COST_PRICE + \"COST_PRICE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + \"[\" + PREFIX_DRINK_DEFAULT_SELLING_PRICE + \"SELLING_PRICE]\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + PREFIX_DRINK_COST_PRICE + \"5.00 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + PREFIX_DRINK_DEFAULT_SELLING_PRICE + \"10.00\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_EDIT_DRINK_SUCCESS \u003d \"Edited Drink: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final EditDrinkDescriptor editDrinkDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param index               of the person in the filtered drink list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param editDrinkDescriptor details to edit the person with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public EditCommand(Index index, EditDrinkDescriptor editDrinkDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireAllNonNull(index, editDrinkDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.editDrinkDescriptor \u003d editDrinkDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assert model instanceof ManagerModel;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        ManagerModel managerModel \u003d (ManagerModel) model;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        List\u003cDrink\u003e lastShownList \u003d model.getFilteredDrinkList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DRINK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink drinkToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (editDrinkDescriptor.getSellingPrice().isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            managerModel.updateSellingPrice(drinkToEdit, editDrinkDescriptor.getSellingPrice().get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (editDrinkDescriptor.getCostPrice().isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            managerModel.updateCostPrice(drinkToEdit, editDrinkDescriptor.getCostPrice().get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (editDrinkDescriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            managerModel.updateTags(drinkToEdit, editDrinkDescriptor.getTags().get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        model.updateFilteredDrinkList(Model.PREDICATE_SHOW_ALL_DRINKS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_DRINK_SUCCESS, drinkToEdit));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Stores the details to edit the drink with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static class EditDrinkDescriptor {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        private Price costPrice;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        private Price sellingPrice;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        public EditDrinkDescriptor() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        public EditDrinkDescriptor(EditDrinkDescriptor toCopy) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            setCostPrice(toCopy.costPrice);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            setSellingPrice(toCopy.sellingPrice);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return CollectionUtil.isAnyNonNull(costPrice, sellingPrice, tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        public void setCostPrice(Price costPrice) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            this.costPrice \u003d costPrice;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        public Optional\u003cPrice\u003e getCostPrice() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return Optional.ofNullable(costPrice);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        public void setSellingPrice(Price sellingPrice) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            this.sellingPrice \u003d sellingPrice;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        public Optional\u003cPrice\u003e getSellingPrice() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return Optional.ofNullable(sellingPrice);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            if (!(other instanceof EditDrinkDescriptor)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            EditDrinkDescriptor e \u003d (EditDrinkDescriptor) other;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return getCostPrice().equals(e.getCostPrice())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    \u0026\u0026 getSellingPrice().equals(e.getSellingPrice())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 59,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_NO_DRINKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.DateCompareBeforePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.QuantityCompareLessPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Finds and lists all drinks in inventory list whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all drinks that meets the given parameters \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            + \"and displays them as a list with index numbers. Only a single parameter can be used at a time\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            + \"All available parameters:         \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            + \"Name: n/DRINK NAME         \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            + \"Date: d/IMPORT DATE         \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            + \"Quantity: q/DRINK QUANTITY\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/Coca Cola\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private final DateCompareBeforePredicate datePredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private final QuantityCompareLessPredicate quantityPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.datePredicate \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.quantityPredicate \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public FindCommand(DateCompareBeforePredicate date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.predicate \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.datePredicate \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.quantityPredicate \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public FindCommand(QuantityCompareLessPredicate quantity) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.predicate \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.datePredicate \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.quantityPredicate \u003d quantity;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (predicate !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            model.updateFilteredDrinkList(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } else if (datePredicate !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                model.updateFilteredDrinkList(datePredicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                model.updateFilteredDrinkList(PREDICATE_SHOW_NO_DRINKS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                return new CommandResult("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                        String.format(Messages.MESSAGE_NO_DRINK_BATCHES, model.getFilteredDrinkList().size()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } else if (quantityPredicate !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                model.updateFilteredDrinkList(quantityPredicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                model.updateFilteredDrinkList(PREDICATE_SHOW_NO_DRINKS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                return new CommandResult("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                        String.format(Messages.MESSAGE_NO_DRINK_BATCHES, model.getFilteredDrinkList().size()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                String.format(Messages.MESSAGE_DRINKS_LISTED_OVERVIEW, model.getFilteredDrinkList().size()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "Lunastryke": 45,
      "liu-tianhang": 3,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DRINKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Lists all persons in the inventory list to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        model.updateFilteredDrinkList (PREDICATE_SHOW_ALL_DRINKS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getInventoryList().toString()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 3,
      "liu-tianhang": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Selects a drink identified using its displayed index from the inventory list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + \": Selects the drink identified by the index number used in the displayed inventory list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String MESSAGE_SELECT_DRINK_SUCCESS \u003d \"Selected Drink: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        List\u003cDrink\u003e filteredDrinkList \u003d model.getFilteredDrinkList ();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredDrinkList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DRINK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_DRINK_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 3,
      "liu-tianhang": 3,
      "Lunastryke": 2,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewTransactionsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Sell a drink from inventory."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class ViewTransactionsCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewTrans\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": View all transactions recorded in Drink I/O \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all transactions: %s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getTransactionList()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                || (other instanceof ViewTransactionsCommand); // instanceof handles nulls;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/accountant/AnalyseCostsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.accountant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.HYPHEN_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.HYPHEN_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.HYPHEN_WEEK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.analysis.TransactionPeriodPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.accountant.AccountantModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Analyses total costs of transactions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class AnalyseCostsCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"costs\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + \": Analyse the total cost recorded in Drink I/O for given period.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + \" Possible formats:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + \" * \" + COMMAND_WORD + \" \" + HYPHEN_DAY + \": for a day\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + \" * \" + COMMAND_WORD + \" \" + HYPHEN_WEEK + \": for 7 days\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + \" * \" + COMMAND_WORD + \" \" + HYPHEN_MONTH + \": for 30 days\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Total costs: $%1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private TransactionPeriodPredicate periodToFilterBy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Creates an AnalyseCostsCommand to compute total costs incurred."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public AnalyseCostsCommand(TransactionPeriodPredicate periodToFilterBy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.periodToFilterBy \u003d periodToFilterBy;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assert model instanceof AccountantModel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AccountantModel accountantModel \u003d (AccountantModel) model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Price totalCosts \u003d accountantModel.analyseCosts(periodToFilterBy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, totalCosts));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                || (other instanceof AnalyseCostsCommand); // instanceof handles nulls;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 48,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/accountant/AnalyseProfitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.commands.accountant;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.HYPHEN_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.HYPHEN_MONTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.HYPHEN_WEEK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.analysis.TransactionPeriodPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.accountant.AccountantModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Command to calculate the profit"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class AnalyseProfitCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"profit\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + \": Analyse the total revenue recorded in Drink I/O for given period.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + \" Possible formats:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + \" * \" + COMMAND_WORD + \" \" + HYPHEN_DAY + \": for a day\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + \" * \" + COMMAND_WORD + \" \" + HYPHEN_WEEK + \": for 7 days\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + \" * \" + COMMAND_WORD + \" \" + HYPHEN_MONTH + \": for 30 days\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Total profit: $%1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private TransactionPeriodPredicate periodToFilterBy;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Creates an AnalyseProfitCommand to compute total profits earned."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AnalyseProfitCommand(TransactionPeriodPredicate periodToFilterBy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.periodToFilterBy \u003d periodToFilterBy;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assert model instanceof AccountantModel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        AccountantModel accountantModel \u003d (AccountantModel) model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Price totalProfit \u003d accountantModel.analyseProfit(periodToFilterBy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, totalProfit));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                || (other instanceof AnalyseProfitCommand); // instanceof handles nulls;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/accountant/AnalyseRevenueCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.commands.accountant;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.HYPHEN_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.HYPHEN_MONTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.HYPHEN_WEEK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.analysis.TransactionPeriodPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.accountant.AccountantModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Command for show analysis Revenue"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class AnalyseRevenueCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"revenue\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + \": Analyse the total revenue recorded in Drink I/O for given period.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + \" Possible formats:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + \" * \" + COMMAND_WORD + \" \" + HYPHEN_DAY + \": for a day\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + \" * \" + COMMAND_WORD + \" \" + HYPHEN_WEEK + \": for 7 days\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + \" * \" + COMMAND_WORD + \" \" + HYPHEN_MONTH + \": for 30 days\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Total revenue: $%1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private TransactionPeriodPredicate periodToFilterBy;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Creates an AnalyseRevenueCommand to compute total revenue earned."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AnalyseRevenueCommand(TransactionPeriodPredicate periodToFilterBy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.periodToFilterBy \u003d periodToFilterBy;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assert model instanceof AccountantModel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        AccountantModel accountantModel \u003d (AccountantModel) model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Price totalRevenue \u003d accountantModel.analyseRevenue(periodToFilterBy);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, totalRevenue));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                || (other instanceof AnalyseRevenueCommand); // instanceof handles nulls;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/manager/AddDrinkCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.manager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_COST_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_DEFAULT_SELLING_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.manager.ManagerModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Adds a drink to the inventory list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class AddDrinkCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new drink to Drink I/0. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + PREFIX_DRINK_NAME + \"DRINK NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + PREFIX_DRINK_DEFAULT_SELLING_PRICE + \"SELLING PRICE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + PREFIX_DRINK_COST_PRICE + \"COST PRICE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + \"[\" + PREFIX_DRINK_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + PREFIX_DRINK_NAME + \"Coca Cola Original \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + PREFIX_DRINK_DEFAULT_SELLING_PRICE + \"20.00 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + PREFIX_DRINK_COST_PRICE + \"10.00 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + PREFIX_DRINK_TAG + \"SoftDrink\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New drink added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DRINK \u003d \"This drink already exists in the inventory list\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final Drink toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Creates an AddDrinkCommand to add the specified {@code Drink}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public AddDrinkCommand(Drink drink) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireAllNonNull(drink);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        toAdd \u003d drink;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assert model instanceof ManagerModel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ManagerModel managerModel \u003d (ManagerModel) model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (managerModel.hasDrink(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DRINK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        managerModel.addDrink(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.toString ()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                || (other instanceof AddDrinkCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddDrinkCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 27,
      "liu-tianhang": 9,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/manager/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.manager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.manager.ManagerModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Deletes a drink identified using its displayed index from the inventory list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + \": Deletes the drink identified by the index number used in the displayed drink list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_DELETE_DRINK_SUCCESS \u003d \"Deleted Drink: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assert model instanceof ManagerModel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ManagerModel managerModel \u003d (ManagerModel) model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cDrink\u003e lastShownList \u003d managerModel.getFilteredDrinkList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DRINK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Drink drinkToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        managerModel.deleteDrink(drinkToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DRINK_SUCCESS, drinkToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 7,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/stocktaker/BuyDrinkCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.stocktaker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Quantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.stocktaker.StockTakerModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Import a drink into inventory. This increases the quantity of the drink."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Drink must exist in inventory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class BuyDrinkCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"buy\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + \": Record a purchase of a drink that is recorded in Drink I/O. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + PREFIX_DRINK_NAME + \"DRINK NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            //+ PREFIX_DATE + \"DATE SOLD \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY PURCHASED \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            //+ PREFIX_PRICE + \"TOTAL REVENUE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_DRINK_NAME + \"Coca Cola Original \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            //+ PREFIX_DATE + \"10/06/18 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + PREFIX_QUANTITY + \"12 \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    //+ PREFIX_PRICE + \"345.68 \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Purchase transaction recorded!\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + \"%1$s purchased on %2$s . Quantity purchased: %3$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_DRINK_NOT_FOUND \u003d \"The drink entered does not exist in the inventory list\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final Drink drink;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final Transaction transaction;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an BuyDrinkCommand to import the specified drink {@code Name}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public BuyDrinkCommand (Drink drink, Quantity quantity) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireAllNonNull(drink, quantity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.drink \u003d drink;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transaction \u003d new Transaction(TransactionType.PURCHASE, drink, quantity);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // actual amount transacted computed at inventoryList level"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assert model instanceof StockTakerModel;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        StockTakerModel stockTakerModel \u003d (StockTakerModel) model;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!stockTakerModel.hasDrink(drink)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new CommandException(MESSAGE_DRINK_NOT_FOUND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        stockTakerModel.buyDrink(transaction);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, drink.getName(), transaction.getTransactionDate(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                quantity));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                || (other instanceof SellDrinkCommand); // instanceof handles nulls;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 65,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/stocktaker/SellDrinkCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.stocktaker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Quantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.exceptions.InsufficientQuantityException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.stocktaker.StockTakerModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Sell a drink from inventory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * // TODO: STUB"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class SellDrinkCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sell\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sell an drink that is recorded in Drink I/O. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + PREFIX_DRINK_NAME + \"DRINK NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            //+ PREFIX_DATE + \"DATE SOLD \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY SOLD \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            //+ PREFIX_PRICE + \"TOTAL REVENUE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_DRINK_NAME + \"Coca Cola Original \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            //+ PREFIX_DATE + \"10/06/18 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + PREFIX_QUANTITY + \"12 \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    //+ PREFIX_PRICE + \"345.68 \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sale transaction recorded!\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            + \"%1$s sold on %2$s. Quantity sold: %3$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_DRINK_NOT_FOUND \u003d \"The drink entered does not exist in the inventory list\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Insufficient quantity in stock to perform operation\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final Drink drink;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // private final Date date; // TODO: add date support"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final Transaction transaction;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Creates a SellDrinkCommand to sell the specified {@code drink}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public SellDrinkCommand(Drink drink, Quantity quantity) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireAllNonNull(drink, quantity);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.drink \u003d drink;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transaction \u003d new Transaction(TransactionType.SALE, drink, quantity);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // actual amount transacted is computed at inventoryList level"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assert model instanceof StockTakerModel;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        StockTakerModel stockTakerModel \u003d (StockTakerModel) model;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!stockTakerModel.hasDrink(drink)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new CommandException(MESSAGE_DRINK_NOT_FOUND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            stockTakerModel.sellDrink(transaction);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } catch (InsufficientQuantityException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, drink.getName(), transaction.getTransactionDate(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                quantity));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                || (other instanceof SellDrinkCommand); // instanceof handles nulls;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 33,
      "liu-tianhang": 6,
      "Lunastryke": 6,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/user/ChangePasswordCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.commands.user;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.authentication.PasswordUtils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.CurrentUser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class ChangePasswordCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"changePassword\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": change current user password \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + PREFIX_OLD_PASSWORD + \"oldPassword \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + PREFIX_NEW_PASSWORD + \"newPassword \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Password has successfully changed to: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_WRONG_PASSWORD \u003d \"The old password is wrong\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private final Password newPassword;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private final Password oldPassword;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public ChangePasswordCommand(Password oldPassword, Password newPassword) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireNonNull(oldPassword);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireNonNull(newPassword);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.newPassword \u003d newPassword;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.oldPassword \u003d oldPassword;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public CommandResult execute (Model model , CommandHistory history) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return resultBaseOnValidityOfPassword(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private Password getHashedPassword() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String hashedPassword \u003d PasswordUtils.generateSecurePassword (newPassword.toString ());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new Password (hashedPassword);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns {@code commandResult} based on the validity of password"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private CommandResult resultBaseOnValidityOfPassword(Model model) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        UserName username \u003d CurrentUser.getUserName ();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String hashedOldPassword \u003d model.getLoginInfo (username).getPasswordString ();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        boolean isPasswordCorrect \u003d PasswordUtils.verifyUserPassword (oldPassword.toString (), hashedOldPassword);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (isPasswordCorrect) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            Password newHashedPassword \u003d getHashedPassword();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            model.changePassword (username, newHashedPassword);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new CommandResult(MESSAGE_WRONG_PASSWORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, newPassword));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/user/CreateAccountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.commands.user;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHENTICATION_LEVEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.LoginInfo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.manager.ManagerModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class CreateAccountCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"createAccount\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_USERNAME \u003d \"This user name already exists\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                + PREFIX_USERNAME + \"username: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                + PREFIX_PASSWORD + \"Password: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                + PREFIX_AUTHENTICATION_LEVEL + \"authentication level: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New account has been created\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private final LoginInfo newAccount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public CreateAccountCommand (LoginInfo newAccount) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireAllNonNull (newAccount);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.newAccount \u003d newAccount;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public CommandResult execute (Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assert model instanceof ManagerModel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ManagerModel managerModel \u003d (ManagerModel) model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (managerModel.isUserNameExist (newAccount.getUserName ())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new CommandException (MESSAGE_DUPLICATE_USERNAME);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        managerModel.createNewAccount (newAccount);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/user/LogoutCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.logic.commands.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.events.ui.LogoutEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Terminate Ui and return user to login sceen."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * This functions as the exit command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class LogoutCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"logout\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_LOGOUT_ACKNOWLEDGEMENT \u003d \"Logging out Address Book as requested ...\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        EventsCenter.getInstance().post(new LogoutEvent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return new CommandResult(MESSAGE_LOGOUT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/user/UserCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.logic.commands.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.LoginInfoManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public abstract class UserCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param loginInfoManager {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param history          {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public abstract CommandResult execute(LoginInfoManager loginInfoManager,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                                          CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Common prefix*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final Prefix PREFIX_DRINK_NAME \u003d new Prefix (\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Manger prefix */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final Prefix PREFIX_DRINK_DEFAULT_SELLING_PRICE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final Prefix PREFIX_DRINK_COST_PRICE \u003d new Prefix (\"cp/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final Prefix PREFIX_DRINK_TAG \u003d new Prefix (\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Stock taker prefix*/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definition for change password and create account*/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_AUTHENTICATION_LEVEL \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_OLD_PASSWORD \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NEW_PASSWORD \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /*accountant selection of time period*/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HYPHEN_DAY \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HYPHEN_WEEK \u003d \"-w\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HYPHEN_MONTH \u003d \"-m\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 7,
      "Lunastryke": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_COST_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_DEFAULT_SELLING_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditDrinkDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DRINK_COST_PRICE, PREFIX_DRINK_DEFAULT_SELLING_PRICE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                        PREFIX_DRINK_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        EditDrinkDescriptor editDrinkDescriptor \u003d new EditDrinkDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DRINK_COST_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            editDrinkDescriptor.setCostPrice(ParserUtil.parseDrinkCostPrice(argMultimap"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    .getValue(PREFIX_DRINK_COST_PRICE).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DRINK_DEFAULT_SELLING_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            editDrinkDescriptor.setSellingPrice(ParserUtil"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    .parseDrinkDefaultSellingPrice(argMultimap.getValue(PREFIX_DRINK_DEFAULT_SELLING_PRICE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_DRINK_TAG)).ifPresent(editDrinkDescriptor::setTags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!editDrinkDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return new EditCommand(index, editDrinkDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 20,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.DateCompareBeforePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Quantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.QuantityCompareLessPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DRINK_NAME, PREFIX_DATE, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DRINK_NAME, PREFIX_DATE, PREFIX_QUANTITY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty() || trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if ((argMultimap.getValue(PREFIX_DRINK_NAME).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_DATE).isPresent())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            || (argMultimap.getValue(PREFIX_DRINK_NAME).isPresent()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_QUANTITY).isPresent())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            || (argMultimap.getValue(PREFIX_QUANTITY).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_DATE).isPresent())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_PREFIX, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DRINK_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            Name drinkName \u003d ParserUtil.parseDrinkName(argMultimap.getValue(PREFIX_DRINK_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            String[] nameKeywords \u003d drinkName.toString().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            System.out.println(\"Name\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            Date dateBefore \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            System.out.println(\"Date\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return new FindCommand(new DateCompareBeforePredicate(dateBefore));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            System.out.println(\"Quantity\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            Quantity quantityLess \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return new FindCommand(new QuantityCompareLessPredicate(quantityLess));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns true if at least one prefix is present in the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 45,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InventoryListParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.manager.AddDrinkCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.manager.AddDrinkCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class InventoryListParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        case AddDrinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return new AddDrinkCommandParser ().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            case SellDrinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                return new SellDrinkCommandParser ().parse (arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            case ChangePasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                return new ChangePasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                return new HistoryCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                return new UndoCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                return new RedoCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 74,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code DrinkCommand} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException    if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.HYPHEN_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.HYPHEN_MONTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.HYPHEN_WEEK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.analysis.AnalysisPeriodType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.AuthenticationLevel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String userName} into a {@code UserName}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code UserName} is invalid ."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static UserName parseUserName(String userName) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedUserName \u003d userName.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!UserName.isValidUserName(trimmedUserName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(UserName.MESSAGE_USER_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (UserName.isUserNameTooLong(trimmedUserName)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(UserName.MESSAGE_USER_NAME_LENGTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UserName(trimmedUserName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String password} into a {@code Password}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code Password} is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Password parsePassword(String password) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPassword \u003d password.trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Password.isValidPassword(trimmedPassword)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Password.isPasswordTooLong(trimmedPassword)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Password.MESSAGE_PASSWORD_LENGTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Password(trimmedPassword);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String authenticationLevel } into a {@code AuthenticationLevel}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code AuthenticationLevel} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AuthenticationLevel parseAuthenticationLevel(String authenticationLevel) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(authenticationLevel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAuthenticationLevel \u003d authenticationLevel.trim().toUpperCase();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!AuthenticationLevel.isAuthenticationLevelValid(trimmedAuthenticationLevel)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(AuthenticationLevel.MESSAGE_AUTHENTICATIONLEVEL_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AuthenticationLevel(trimmedAuthenticationLevel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Drink-related parsing \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String itemName} into a {@code String itenName}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static seedu.address.model.drink.Name parseDrinkName(String name) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!seedu.address.model.drink.Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(seedu.address.model.drink.Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new seedu.address.model.drink.Name(trimmedName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Parses a {@code String price} into a {@code Price}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @throws ParseException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static Price parseDrinkCostPrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String trimmedCostPrice \u003d price.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!Price.isValidPrice(trimmedCostPrice)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new Price(trimmedCostPrice);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Parses a {@code String price} into a {@code Price}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @throws ParseException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static Price parseDrinkDefaultSellingPrice(String defaultSellingPrice) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(defaultSellingPrice);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String trimmedDefaultSellingPrice \u003d defaultSellingPrice.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!Price.isValidPrice(trimmedDefaultSellingPrice)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new Price(trimmedDefaultSellingPrice);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Parses {@code String quantity} into a {@code Quantity}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static Quantity parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!Quantity.isValidQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_QUANTITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new Quantity(trimmedQuantity);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Parses {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!Date.isExistingDate(trimmedDate)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new ParseException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Parses {@code string period} into a {@code AnalysisPeriodType}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static AnalysisPeriodType parseAnalysisPeriod(String period) throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(period);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        period \u003d period.replaceAll(\"\\\\s+\", \"\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        switch (period) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        case HYPHEN_DAY:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return AnalysisPeriodType.DAY;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        case HYPHEN_WEEK:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return AnalysisPeriodType.WEEK;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        case HYPHEN_MONTH:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return AnalysisPeriodType.MONTH;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    AnalysisPeriodType.WRONG_PERIOD_MESSAGE));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 31,
      "Lunastryke": 9,
      "liu-tianhang": 34,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/accountant/AnalyseCostsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.parser.accountant;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.analysis.AnalysisPeriodType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.analysis.TransactionPeriodPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.accountant.AnalyseCostsCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Parses input arguments and creates a new AnalyseCostsCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class AnalyseCostsCommandParser implements Parser\u003cAnalyseCostsCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AnalyseCostsCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * and returns an AnalyseCostsCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AnalyseCostsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        AnalysisPeriodType period;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (args.length() \u003e 3) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AnalyseCostsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        period \u003d ParserUtil.parseAnalysisPeriod(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        TransactionPeriodPredicate predicateToFilterBy \u003d period.getPeriodFilterPredicate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new AnalyseCostsCommand(predicateToFilterBy);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/accountant/AnalyseProfitCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.parser.accountant;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.analysis.AnalysisPeriodType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.analysis.TransactionPeriodPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.accountant.AnalyseProfitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Parses input arguments and creates a new AnalyseProfitCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class AnalyseProfitCommandParser implements Parser\u003cAnalyseProfitCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AnalyseProfitCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * and returns an AnalyseProfitCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AnalyseProfitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        AnalysisPeriodType period;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (args.length() \u003e 3) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AnalyseProfitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        period \u003d ParserUtil.parseAnalysisPeriod(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        TransactionPeriodPredicate predicateToFilterBy \u003d period.getPeriodFilterPredicate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new AnalyseProfitCommand(predicateToFilterBy);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/accountant/AnalyseRevenueCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.parser.accountant;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.analysis.AnalysisPeriodType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.analysis.TransactionPeriodPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.accountant.AnalyseRevenueCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " *  Parses input arguments and creates a new AnalyseRevenueCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class AnalyseRevenueCommandParser implements Parser\u003cAnalyseRevenueCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AnalyseRevenueCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * and returns an AnalyseRevenueCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AnalyseRevenueCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        AnalysisPeriodType period;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (args.length() \u003e 3) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                        AnalyseRevenueCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        period \u003d ParserUtil.parseAnalysisPeriod(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        TransactionPeriodPredicate predicateToFilterBy \u003d period.getPeriodFilterPredicate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new AnalyseRevenueCommand (predicateToFilterBy);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/manager/AddDrinkCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.parser.manager;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_COST_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_DEFAULT_SELLING_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.manager.AddDrinkCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Parses input arguments and creates a new AddDrinkCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class AddDrinkCommandParser implements Parser\u003cAddDrinkCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDrinkCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * and returns an AddDrinkCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AddDrinkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DRINK_NAME, PREFIX_DRINK_COST_PRICE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                        PREFIX_DRINK_DEFAULT_SELLING_PRICE, PREFIX_DRINK_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DRINK_NAME, PREFIX_DRINK_COST_PRICE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                PREFIX_DRINK_DEFAULT_SELLING_PRICE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDrinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Name drinkName \u003d ParserUtil.parseDrinkName(argMultimap.getValue(PREFIX_DRINK_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Price costPrice \u003d ParserUtil.parseDrinkCostPrice(argMultimap.getValue(PREFIX_DRINK_COST_PRICE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Price defaultSellingPrice \u003d ParserUtil"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                .parseDrinkDefaultSellingPrice(argMultimap.getValue(PREFIX_DRINK_DEFAULT_SELLING_PRICE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_DRINK_TAG));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Drink drink \u003d new Drink(drinkName, costPrice, defaultSellingPrice, tagList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new AddDrinkCommand(drink);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/stocktaker/BuyDrinkCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.parser.stocktaker;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.stocktaker.BuyDrinkCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Parses input arguments and creates a new BuyDrinkCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class BuyDrinkCommandParser implements Parser\u003cBuyDrinkCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public BuyDrinkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DRINK_NAME, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DRINK_NAME, PREFIX_QUANTITY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                    BuyDrinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Name drinkName \u003d ParserUtil.parseDrinkName(argMultimap.getValue(PREFIX_DRINK_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Drink drink \u003d new Drink(drinkName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Quantity quantityImported \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new BuyDrinkCommand (drink, quantityImported);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/stocktaker/SellDrinkCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.parser.stocktaker;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRINK_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.stocktaker.SellDrinkCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Parses input arguments and creates a new SellDrinkCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class SellDrinkCommandParser implements Parser\u003cSellDrinkCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public SellDrinkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DRINK_NAME, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DRINK_NAME, PREFIX_QUANTITY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                    SellDrinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Name drinkName \u003d ParserUtil.parseDrinkName(argMultimap.getValue(PREFIX_DRINK_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Drink drink \u003d new Drink(drinkName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Quantity quantitySold \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new SellDrinkCommand(drink, quantitySold);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/user/AccountantParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.parser.user;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.ViewTransactionsCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.accountant.AnalyseCostsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.accountant.AnalyseProfitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.accountant.AnalyseRevenueCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.user.ChangePasswordCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.user.LogoutCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.FindCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.SelectCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.accountant.AnalyseCostsCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.accountant.AnalyseProfitCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.accountant.AnalyseRevenueCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class AccountantParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dlogin command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case ChangePasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new ChangePasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new LogoutCommand ();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daccountant only command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case AnalyseCostsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new AnalyseCostsCommandParser ().parse (arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case AnalyseProfitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new AnalyseProfitCommandParser ().parse (arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case AnalyseRevenueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new AnalyseRevenueCommandParser ().parse (arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003dgeneral command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new SelectCommandParser ().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new FindCommandParser ().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case ViewTransactionsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new ViewTransactionsCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/user/AdminParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.ViewTransactionsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.accountant.AnalyseCostsCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.accountant.AnalyseProfitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.accountant.AnalyseRevenueCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.manager.AddDrinkCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.manager.DeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.stocktaker.BuyDrinkCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.stocktaker.SellDrinkCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.user.ChangePasswordCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.user.CreateAccountCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.user.DeleteAccountCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.user.LogoutCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.DeleteCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.parser.EditCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.FindCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.SelectCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.accountant.AnalyseCostsCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.accountant.AnalyseProfitCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.accountant.AnalyseRevenueCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.manager.AddDrinkCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.stocktaker.BuyDrinkCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.stocktaker.SellDrinkCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AdminParser {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d manager commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case AddDrinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new AddDrinkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d manager login related command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case CreateAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CreateAccountCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteAccountCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d stock taker commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case SellDrinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new SellDrinkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case BuyDrinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new BuyDrinkCommandParser ().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d accountant commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        case AnalyseCostsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AnalyseCostsCommandParser ().parse (arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case AnalyseProfitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AnalyseProfitCommandParser ().parse (arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case AnalyseRevenueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AnalyseRevenueCommandParser ().parse (arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dlogin related command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case ChangePasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new ChangePasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new LogoutCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dgeneral command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        case ViewTransactionsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return new ViewTransactionsCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 19,
      "liu-tianhang": 9,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/user/ChangePasswordCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.parser.user;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.user.ChangePasswordCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class ChangePasswordCommandParser implements Parser\u003cChangePasswordCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public ChangePasswordCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_OLD_PASSWORD, PREFIX_NEW_PASSWORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_OLD_PASSWORD, PREFIX_OLD_PASSWORD)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                    ChangePasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Password newPassword \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_NEW_PASSWORD).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Password oldPassword \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_OLD_PASSWORD).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new ChangePasswordCommand(oldPassword, newPassword);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix prefixes,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                              Prefix prefixNewPassword) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/user/CreateAccountCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.parser.user;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHENTICATION_LEVEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author tianhang"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.authentication.PasswordUtils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LoginInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.user.CreateAccountCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.AuthenticationLevel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class CreateAccountCommandParser implements Parser\u003cCreateAccountCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public CreateAccountCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME , PREFIX_PASSWORD, PREFIX_AUTHENTICATION_LEVEL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME , PREFIX_PASSWORD, PREFIX_AUTHENTICATION_LEVEL)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        UserName userName \u003d ParserUtil.parseUserName (argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Password password \u003d ParserUtil.parsePassword (argMultimap.getValue (PREFIX_PASSWORD).get ());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Password hashedPassword \u003d new Password (PasswordUtils.generateSecurePassword (password.toString ()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        AuthenticationLevel authenticationLevel \u003d ParserUtil.parseAuthenticationLevel("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                        argMultimap.getValue (PREFIX_AUTHENTICATION_LEVEL).get ());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        LoginInfo newAccount \u003d new LoginInfo (userName, hashedPassword, authenticationLevel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CreateAccountCommand (newAccount);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent (ArgumentMultimap argumentMultimap , Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 54,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/user/ManagerParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.parser.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewTransactionsCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.manager.AddDrinkCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.manager.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.user.ChangePasswordCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.user.CreateAccountCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.user.DeleteAccountCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.user.LogoutCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.DeleteCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.parser.EditCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.FindCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.SelectCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.manager.AddDrinkCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class ManagerParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003ddrink command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddDrinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddDrinkCommandParser ().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser ().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dlogin command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case CreateAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CreateAccountCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ChangePasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ChangePasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteAccountCommandParser ().parse (arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new LogoutCommand ();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dcommand function command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser ().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case ViewTransactionsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewTransactionsCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 5,
      "liu-tianhang": 60,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/user/StockTakerParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewTransactionsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.stocktaker.BuyDrinkCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.stocktaker.SellDrinkCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.user.ChangePasswordCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.user.LogoutCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.FindCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.SelectCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.stocktaker.BuyDrinkCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.stocktaker.SellDrinkCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class StockTakerParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dlogin command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case ChangePasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ChangePasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new LogoutCommand ();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d stock taker commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case SellDrinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SellDrinkCommandParser ().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case BuyDrinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new BuyDrinkCommandParser ().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dgeneral commands\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser ().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser ().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ViewTransactionsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewTransactionsCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 3,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/InventoryList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Quantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.UniqueDrinkList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.exceptions.InsufficientQuantityException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Wraps all data at the inventory-list level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Duplicates are not allowed (by .isSameDrink comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class InventoryList implements ReadOnlyInventoryList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final UniqueDrinkList drinks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */ {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinks \u003d new UniqueDrinkList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public InventoryList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an inventoryList using the Drinks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public InventoryList(ReadOnlyInventoryList toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Replaces the contents of the inventory list with {@code drinks}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code drinks} must not contain duplicate drinks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setDrinks(List\u003cDrink\u003e drinks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.drinks.setDrinks(drinks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code inventoryList} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void resetData(ReadOnlyInventoryList newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        setDrinks(newData.getDrinkList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /// drinks-level methods"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns true if a drink with the same identity as {@code drinks} exists in the inventory list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean hasDrink(Drink drink) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(drink);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return drinks.contains(drink);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Adds a drink to the inventory list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * The drink must not already exist in the inventory list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void addDrink(Drink d) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinks.add(d);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Replaces the given drink {@code target} in the list with {@code editedDrink}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code target} must exist in the inventory list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * The drink identity of {@code editedDrink} must not be the same as another existing drink in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void updateDrink(Drink target, Drink editedDrink) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(editedDrink);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinks.setDrink(target, editedDrink);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code inventoryList}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code key} must exist in the inventory list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void removeDrink(Drink key) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinks.remove(key);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return drinks.asUnmodifiableObservableList().size() + \" drinks\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public ObservableList\u003cDrink\u003e getDrinkList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return drinks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                || (other instanceof InventoryList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 drinks.equals(((InventoryList) other).drinks));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return drinks.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Increases the quantity of the {@code drink} specified."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void increaseDrinkQuantity(Drink drink, Quantity quantity) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinks.increaseQuantity(drink, quantity);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Decreases the quantity of the {@code drink} specified."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void decreaseQuantity(Drink drink, Quantity quantity) throws InsufficientQuantityException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinks.decreaseQuantity(drink, quantity);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Price getDefaultSellingPrice(Drink drink) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return drinks.getSellingPrice(drink);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Price getDefaultCostPrice(Drink drink) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return drinks.getCostPrice(drink);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void updateSellingPrice(Drink drink, Price newPrice) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinks.updateSellingPrice(drink, newPrice);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void updateCostPrice(Drink drink, Price newPrice) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinks.updateCostPrice(drink, newPrice);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void updateTags(Drink drink, Set\u003cTag\u003e newTags) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinks.updateTags(drink, newTags);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 136,
      "Lunastryke": 24,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/LoginInfoManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.LoginInfo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.AuthenticationLevel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Represents the facade of loginInfo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class LoginInfoManager implements LoginInfoModel {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private ArrayList\u003c LoginInfo \u003e loginInfoList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public LoginInfoManager () {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.loginInfoList \u003d initialSetUpOfAccount();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public LoginInfoManager (ArrayList\u003c LoginInfo \u003e loginInfoList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.loginInfoList \u003d loginInfoList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public LoginInfo getLoginInfo(UserName userName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        for (LoginInfo loginInfo : loginInfoList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            if (loginInfo.isUserNameMatched (userName)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                return loginInfo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isUserNameExist(UserName userName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        LoginInfo user \u003d getLoginInfo (userName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (user \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void changePassword(UserName userName, Password newHashedPassword) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        for (int i \u003d 0; i \u003c loginInfoList.size (); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            if (loginInfoList.get (i).isUserNameMatched(userName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                loginInfoList.get (i).setPassword (newHashedPassword);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteAccount(UserName userName) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c loginInfoList.size (); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (loginInfoList.get (i).isUserNameMatched(userName)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                loginInfoList.remove (i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createNewAccount(LoginInfo newAccount) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginInfoList.add (newAccount);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public ArrayList\u003c LoginInfo \u003e getLoginInfoList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return loginInfoList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predefined list of account."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cLoginInfo\u003e initialSetUpOfAccount() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cLoginInfo\u003e loginInfoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserName userName \u003d new UserName (\"tester\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Password password \u003d new Password (\"Gcf70h4aWQ1T9NMxE03XM3nq3nCmFGihnO4xMzHMgP0\u003d\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthenticationLevel authenticationLevel \u003d new AuthenticationLevel (\"ADMIN\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        LoginInfo loginInfo \u003d new LoginInfo (userName, password, authenticationLevel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        loginInfoList.add (loginInfo);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        userName \u003d new UserName (\"manager\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        password \u003d new Password (\"Gcf70h4aWQ1T9NMxE03XM3nq3nCmFGihnO4xMzHMgP0\u003d\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        authenticationLevel \u003d new AuthenticationLevel (\"MANAGER\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        loginInfo \u003d new LoginInfo (userName, password, authenticationLevel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        loginInfoList.add (loginInfo);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userName \u003d new UserName (\"stocktaker\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        password \u003d new Password (\"Gcf70h4aWQ1T9NMxE03XM3nq3nCmFGihnO4xMzHMgP0\u003d\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        authenticationLevel \u003d new AuthenticationLevel (\"STOCKTAKER\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        loginInfo \u003d new LoginInfo (userName, password, authenticationLevel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        loginInfoList.add (loginInfo);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        userName \u003d new UserName (\"accountant\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        password \u003d new Password (\"Gcf70h4aWQ1T9NMxE03XM3nq3nCmFGihnO4xMzHMgP0\u003d\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        authenticationLevel \u003d new AuthenticationLevel (\"ACCOUNTANT\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        loginInfo \u003d new LoginInfo (userName, password, authenticationLevel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        loginInfoList.add (loginInfo);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return loginInfoList;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return Objects.hash(loginInfoList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        for (LoginInfo loginInfo: loginInfoList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(\"\\nuserName : \" + loginInfo.getUserNameString ());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append (\"\\npassword : \" + loginInfo.getPasswordString ());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append (\"\\nauthenticationLevel : \" + loginInfo.getAuthenticationLevelString ());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 58,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LoginInfo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dDrink Model\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    Predicate\u003cDrink\u003e PREDICATE_SHOW_ALL_DRINKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    Predicate\u003cTransaction\u003e PREDICATE_SHOW_ALL_TRANSACTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    Predicate\u003cDrink\u003e PREDICATE_SHOW_NO_DRINKS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    void resetData(ReadOnlyInventoryList newData);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns the inventoryList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    ReadOnlyInventoryList getInventoryList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns true if a drink with the same identity as {@code drink} exists in the address book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    boolean hasDrink(Drink drink);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d filtered drinks \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns an unmodifiable view of the filtered inventory list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    ObservableList\u003cDrink\u003e getFilteredDrinkList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dcommon command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Updates the filter of the filtered drink list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    void updateFilteredDrinkList(Predicate\u003cDrink\u003e predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d transactions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns the transactionList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    ReadOnlyTransactionList getTransactionList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns an unmodifiable view of the filtered transaction list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Updates the filter of the filtered drink list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d login function command \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * change user password based on {@code userName} and {@code newHashedPassword}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void changePassword(UserName userName, Password newHashedPassword);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get user loginInfo base on userName"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    LoginInfo getLoginInfo(UserName userName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check a userName exist in list"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean isUserNameExist(UserName userName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 32,
      "liu-tianhang": 10,
      "Lunastryke": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LoginInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.events.model.InventoryListChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.events.model.TransactionListChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.events.ui.RestartUiEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected LoginInfoModel loginInfoModel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    protected final FilteredList\u003cDrink\u003e filteredDrinks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    protected final InventoryList inventoryList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    protected final FilteredList\u003cTransaction\u003e filteredTransactions;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    protected final TransactionList transactionList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Initializes a ModelManager with the given inventoryList, userPrefs and transactionList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public ModelManager(ReadOnlyInventoryList readOnlyInventoryList, UserPrefs userPrefs,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                        LoginInfoModel loginInfoModel , ReadOnlyTransactionList transactionList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireAllNonNull(readOnlyInventoryList, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        logger.fine(\"Initializing with inventory list: \" + readOnlyInventoryList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        inventoryList \u003d new InventoryList(readOnlyInventoryList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        filteredDrinks \u003d new FilteredList\u003c\u003e(inventoryList.getDrinkList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.loginInfoModel \u003d loginInfoModel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.transactionList \u003d new TransactionList(transactionList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003c\u003e(this.transactionList.getTransactionList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this(new InventoryList(), new UserPrefs(), new LoginInfoManager(), new TransactionList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void resetData(ReadOnlyInventoryList newData) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        inventoryList.resetData(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        indicateInventoryListChanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public ReadOnlyInventoryList getInventoryList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return inventoryList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateInventoryListChanged() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        raise(new InventoryListChangedEvent(inventoryList));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public boolean hasDrink(Drink drink) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireNonNull(drink);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return inventoryList.hasDrink(drink);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Drink List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Drink} backed by the internal list of"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * {@code inventoryList}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public ObservableList\u003cDrink\u003e getFilteredDrinkList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredDrinks);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void updateFilteredDrinkList(Predicate\u003cDrink\u003e predicate) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        filteredDrinks.setPredicate(predicate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateInventoryListChanged();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return inventoryList.equals(other.inventoryList)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                \u0026\u0026 inventoryList.equals(other.inventoryList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d common commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public ReadOnlyTransactionList getTransactionList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return transactionList;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d transactions  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredTransactions);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        filteredTransactions.setPredicate(predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Raises an event to indicate the transactions have changed"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    protected void indicateTransactionListChanged() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        raise(new TransactionListChangedEvent(transactionList));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Login feature command \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void changePassword(UserName userName, Password newHashedPassword) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        loginInfoModel.changePassword(userName, newHashedPassword);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public LoginInfo getLoginInfo(UserName userName) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return loginInfoModel.getLoginInfo(userName);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isUserNameExist(UserName userName) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return loginInfoModel.isUserNameExist(userName);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private void handleRestartUiEvent(RestartUiEvent event) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        updateFilteredDrinkList(PREDICATE_SHOW_ALL_DRINKS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 33,
      "Lunastryke": 25,
      "liu-tianhang": 21,
      "-": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyInventoryList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Unmodifiable view of an inventory list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public interface ReadOnlyInventoryList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns an unmodifiable view of the drinks list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * This list will not contain any duplicate drinks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    ObservableList\u003cDrink\u003e getDrinkList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private Path inventoryListFilePath \u003d Paths.get(\"data\" , \"inventorylist.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Path transactionListFilePath \u003d Paths.get(\"data\", \"transactionlist.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Path getInventoryListFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return inventoryListFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void setInventoryListFilePath(Path inventoryListFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.inventoryListFilePath \u003d inventoryListFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Path getTransactionListFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return transactionListFilePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setTransactionListFilePath(Path transactionListFilePath) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.transactionListFilePath \u003d transactionListFilePath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 Objects.equals(inventoryListFilePath, o.inventoryListFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return Objects.hash(guiSettings, inventoryListFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + inventoryListFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 7,
      "Lunastryke": 8,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/Batch.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Represents a Batch of drink in DRINKio"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Guarantees: TODO"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class Batch {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private final BatchId batchId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private BatchQuantity batchQuantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private final BatchDate batchDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Batch(BatchId id, BatchQuantity quantity, BatchDate date) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireAllNonNull(id, quantity, date);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchId \u003d id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchQuantity \u003d quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchDate \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Alternative constructor for the batch class, with the date attribute filled by the current date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Batch(BatchId id, BatchQuantity quantity) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireAllNonNull(id, quantity);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchId \u003d id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchQuantity \u003d quantity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchDate \u003d new BatchDate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchId getBatchId() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return batchId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchQuantity getBatchQuantity() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return batchQuantity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchDate getBatchDate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return batchDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void decreaseBatchQuantity(int value) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchQuantity.decreaseValue(value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void increaseBatchQuantity(int value) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchQuantity.increaseValue(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns true if both batches have the same BatchId"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * This defines a weaker notion of equality between two batches."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean isSameBatch(Batch otherBatch) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (otherBatch \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return otherBatch !\u003d null"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 otherBatch.getBatchId().equals(getBatchId());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void setBatchQuantity(int value) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchQuantity.setValue(value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public int compareDateTo(Batch otherBatch) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return this.batchDate.compareTo(otherBatch.getBatchDate());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean isSameDate(Batch otherBatch) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return this.batchDate.equals(otherBatch.batchDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns true if both batches have the same identity and data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * This defines a stronger notion of equality between two batches."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!(other instanceof Batch)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Batch otherBatch \u003d (Batch) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return otherBatch.getBatchId().equals(getBatchId())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 otherBatch.getBatchDate().equals(getBatchDate())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 otherBatch.getBatchQuantity().equals(getBatchQuantity());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        builder.append(\"Batch ID: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                .append(getBatchId().toString())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                .append(\" Batch Quantity: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                .append(getBatchQuantity().toString())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                .append(\" Batch Date: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                .append(getBatchDate().toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/BatchDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "//@@author Lunastryke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Represents the import date of a batch of drink"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Guarantees: TODO"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class BatchDate extends Date {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchDate() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchDate(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/BatchId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "//@@author Lunastryke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Represents the identification number of a specific batch"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class BatchId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String MESSAGE_BATCH_ID_CONSTRAINTS \u003d \"Batch Id must be an integer value\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String BATCH_ID_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private final int value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Constructs an {@code BatchId}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchId() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.value \u003d (int) Instant.now().getEpochSecond();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchId(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.value \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns true if a given string is a valid batch id."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static boolean isValidBatchId(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return test.matches(BATCH_ID_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                || (other instanceof BatchId // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 value \u003d\u003d (((BatchId) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return value; // primitive int is its own hash"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/BatchPrice.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Represents the price of a batch of drink"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Guarantees: TODO"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class BatchPrice extends Price {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchPrice(String input) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/BatchQuantity.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Represents the quantity of drink in a batch (in cartons)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Guarantees: TODO"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class BatchQuantity extends Quantity {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchQuantity(String input) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "Lunastryke": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/Comparators.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * This class holds all the comparators for the Batch and Drink classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class Comparators {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Comparator\u003cBatch\u003e BATCHDATE \u003d (Batch b1, Batch b2) -\u003e b1.compareDateTo(b2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "//@@author Lunastryke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Represents the import date of a batch of drink"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Guarantees: TODO"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \"Date should be in this format DD/MM/YYYY or D/MM/YYYY\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String MESSAGE_NON_EXISTING_DATE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \"Please enter a date that exists\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \"^(3[01]|2[0-9]|1[0-9]|0[0-9]|[0-9])[/](1[0-2]|0[1-9]|[1-9])[/]([12]\\\\d{3})$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"d/MM/uuuu\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private static final DateTimeFormatter FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            DateTimeFormatter.ofPattern(DATE_FORMAT).withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Constructs an {@code Date} with the current real time date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Date() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param date A valid quantity value expressed as a string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            this.date \u003d LocalDate.parse(date, FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new RuntimeException(MESSAGE_NON_EXISTING_DATE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns true if a given string is in a valid date format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return test.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns true if a given string is a real existing date"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static boolean isExistingDate(String test) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        LocalDate tester;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            tester \u003d LocalDate.parse(test, FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param other a valid BatchDate object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @return Returns positive integer if other holds a date before that of the current object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *         Returns negative integer if other holds a date after that of the current object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *         Returns 0 if other holds a date same as the current object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public int compareTo(Date other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return this.date.compareTo(other.date);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param other a valid BatchDate object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @return Returns true if other holds a date before that of the current object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean isBefore(Date other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return this.date.isBefore(other.date);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param other a valid BatchDate object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @return Returns true if other holds a date after that of the current object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean isAfter(Date other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return this.date.isAfter(other.date);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(DATE_FORMAT));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Date getDateSixDaysBefore() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        setDate(date.minusDays(6));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Date getDateTwentyNineDaysBefore() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        setDate(date.minusDays(29));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns true is this date is between the {@code start} and {@code end} Dates, inclusive"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean isBetween(Date start, Date end) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return (this.compareTo(start) \u003e\u003d 0) \u0026\u0026 (this.compareTo(end) \u003c\u003d 0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/DateCompareBeforePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Tests that a {@code Drink}\u0027s {@code Date} is earlier than or equal the date given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class DateCompareBeforePredicate implements Predicate\u003cDrink\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public final Date date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public DateCompareBeforePredicate(Date date) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean test(Drink drink) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return (drink.getEarliestBatchDate().isBefore(date)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                || drink.getEarliestBatchDate().equals(date));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                || (other instanceof DateCompareBeforePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 date.equals(((DateCompareBeforePredicate) other).date)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/Drink.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.exceptions.EmptyBatchListException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.exceptions.InsufficientQuantityException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Represents a Drink in the inventory."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class Drink {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Price costPrice;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Price retailPrice;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private UniqueBatchList uniqueBatchList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Constructs a Drink for the use of adding new drink into inventory."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Hence, quantity is 0 and uniqueBatchList is empty"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Drink(Name name, Price costPrice, Price retailPrice, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireAllNonNull(name, costPrice, retailPrice, tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.costPrice \u003d costPrice;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.retailPrice \u003d retailPrice;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueBatchList \u003d new UniqueBatchList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        quantity \u003d new Quantity(\"0\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Drink(Name name, Price costPrice, Price retailPrice) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireAllNonNull(name, costPrice, retailPrice);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.costPrice \u003d costPrice;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.retailPrice \u003d retailPrice;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList \u003d new UniqueBatchList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        quantity \u003d new Quantity(\"0\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Drink(Name name, Price costPrice, Price retailPrice, UniqueBatchList batchList, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireAllNonNull(name, costPrice, retailPrice, batchList, tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.costPrice \u003d costPrice;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.retailPrice \u003d retailPrice;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.uniqueBatchList \u003d batchList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.quantity \u003d uniqueBatchList.getTotalQuantity();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Constructs a Drink for the use of buying and selling."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Hence, fields other than name are initialised to default values."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Drink(Name name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.costPrice \u003d new Price(\"0\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.retailPrice \u003d new Price(\"0\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.quantity \u003d new Quantity(\"0\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Price getCostPrice() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return costPrice;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setCostPrice(Price costPrice) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.costPrice \u003d costPrice;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Price getRetailPrice() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return retailPrice;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setRetailPrice(Price retailPrice) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.retailPrice \u003d retailPrice;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void updateQuantity() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.quantity \u003d uniqueBatchList.getTotalQuantity();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public UniqueBatchList getUniqueBatchList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return uniqueBatchList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void setUniqueBatchList(UniqueBatchList uniqueBatchList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.uniqueBatchList \u003d uniqueBatchList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean isSameDrink(Drink otherDrink) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (otherDrink \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return otherDrink !\u003d null"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 otherDrink.getName().equals(getName());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Gets the date of the earliest imported batch"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @return a Batch Date object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchDate getEarliestBatchDate() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return uniqueBatchList.getEarliestBatchDate();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } catch (EmptyBatchListException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Gets the date of the earliest imported batch"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @return a Batch Date object"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchDate getLatestBatchDate() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return uniqueBatchList.getLatestBatchDate();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } catch (EmptyBatchListException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Gets the number of batches of the current drink"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @return a quantity expressed as an integer"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public int getNumberBatches() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return uniqueBatchList.getNumberBatches();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public ObservableList\u003cBatch\u003e getObservableBatchList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return uniqueBatchList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } catch (EmptyBatchListException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!(other instanceof Drink)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink otherDrink \u003d (Drink) other;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return otherDrink.getName().equals(getName())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 otherDrink.getRetailPrice().equals(getRetailPrice())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 otherDrink.getCostPrice().equals(getCostPrice())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 otherDrink.getQuantity().equals(getQuantity())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                // \u0026\u0026 otherDrink.getUniqueBatchList().equals(getUniqueBatchList())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 otherDrink.getTags().equals(getTags());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return Objects.hash(name, tags);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append (\"Drink name: \")"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                .append (getName ())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                .append (\"\\nCost price: \")"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                .append (getCostPrice ())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                .append (\" Selling price: \")"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                .append (getRetailPrice ())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .append(\", Tags: \");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Decreases the quantity of the drink, using {@code quantity} as the value to decrease"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void decreaseQuantity(Quantity quantity) throws InsufficientQuantityException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.uniqueBatchList.updateBatchTransaction(quantity);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        updateQuantity();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Increases the quantity of the drink, using {@code quantity} as the value to increase"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void increaseQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        BatchId tempId \u003d new BatchId();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        BatchQuantity tempQuantity \u003d new BatchQuantity(quantity.toString());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Batch toAdd \u003d new Batch(tempId, tempQuantity);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.uniqueBatchList.addBatch(toAdd);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        updateQuantity();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bluein-green": 165,
      "Lunastryke": 78,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Represents a Drink\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bluein-green": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Tests that a {@code Drink}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cDrink\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean test(Drink drink) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(drink.getName().name, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 6,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/NegativePrice.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Represents a NegativePrice, for use in financial analysis."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Note that NegativePrice value is limited to Float.MAX_VALUE"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class NegativePrice extends Price {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Constructs a {@code NegativePrice}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param input A valid Price. Validity of the input is as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public NegativePrice(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public float getValue() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return -1 * value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return String.format(\"-%.2f\", value);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                || (other instanceof NegativePrice // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 (value \u003d\u003d (((NegativePrice) other).value))); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return Float.hashCode(-1 * value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/Price.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Price in Drink I/O."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Guarantees: Is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Note that Price value is limited to Float.MAX_VALUE"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_PRICE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \"Price should contain only numbers and at most 1 decimal point. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    + \"It must be least 1 digit long with a maximum of 2 digits after the decimal point\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String PRICE_VALIDATION_REGEX \u003d \"[0-9]+([.][0-9]{1,2})?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    protected float value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Price() {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Constructs a {@code Price}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param input A valid price."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Price(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        checkArgument(isValidPrice(input), MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        value \u003d Float.parseFloat(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public float getValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setValue(String price) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        value \u003d Float.parseFloat(price);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return test.matches(PRICE_VALIDATION_REGEX) \u0026\u0026 Double.parseDouble(test) \u003c Float.MAX_VALUE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return String.format(\"%.2f\", value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 (value \u003d\u003d (((Price) other).value))); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return Float.hashCode(value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 59,
      "Lunastryke": 5,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/Quantity.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Represents an Drink\u0027s total stock (i.e. quantity) in terms of unit."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Guarantees: TODO"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class Quantity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_QUANTITY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \"Quantity should only contain numbers\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String STOCK_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String UNIT \u003d \"carton\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private int value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Constructs a {@code Quantity}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param quantity A valid stock value expressed as a string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Quantity(String quantity) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        checkArgument(isValidQuantity(quantity), MESSAGE_QUANTITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.value \u003d Integer.parseInt(quantity);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns true if a given string is a valid quantity value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static boolean isValidQuantity(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return test.matches(STOCK_VALIDATION_REGEX) \u0026\u0026 Long.parseLong(test) \u003c\u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setValue(int value) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void increaseValue(int value) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.value +\u003d value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void decreaseValue(int value) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.value -\u003d value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                || (other instanceof Quantity // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 value \u003d\u003d (((Quantity) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return value; // primitive int is its own hash"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 61,
      "Lunastryke": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/QuantityCompareLessPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Tests that a {@code Drink}\u0027s {@code Quantity} is less than or equal to the quantity given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class QuantityCompareLessPredicate implements Predicate\u003cDrink\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public final Quantity quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public QuantityCompareLessPredicate(Quantity quantity) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean test(Drink drink) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return drink.getQuantity().getValue() \u003c\u003d quantity.getValue();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                || (other instanceof QuantityCompareLessPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 quantity.equals(((QuantityCompareLessPredicate) other).quantity)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/UniqueBatchList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "//@@author Lunastryke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.exceptions.BatchNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.exceptions.DuplicateBatchException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.exceptions.EmptyBatchListException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.exceptions.InsufficientQuantityException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * A list of batches of a particular drink that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * A batch is considered unique by comparing using {@code Batch#isSameBatch(Batch)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * batches uses Batch#isSameBatch(Batch) for equality so as to ensure that the batch being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * unique in terms of identity in the UniqueBatchList. However, the removal of a batch uses Batch#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * as to ensure that the batch with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * @see Batch#isSameBatch(Batch)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class UniqueBatchList implements Iterable\u003cBatch\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private final ObservableList\u003cBatch\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private Quantity totalQuantity \u003d new Quantity(\"0\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Quantity getTotalQuantity() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return totalQuantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    // Methods likely to be used by other classes"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns true if the list contains an equivalent batch as the given argument."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean contains(Batch toCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBatch);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Adds a batch to the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * The batch must not already exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * If a batch with the same date exists, collates the batches"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void addBatch(Batch toAdd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new DuplicateBatchException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (batchSameDate(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            for (Batch b : internalList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                if (b.isSameDate(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                    increaseBatchQuantity(b, toAdd.getBatchQuantity().getValue());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            internalList.add(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        updateTotalQuantity();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Removes the equivalent batch from the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * The batch must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void remove(Batch toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new BatchNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        updateTotalQuantity();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Removes empty batches from the list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void clearEmptyBatches() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        for (Batch b : internalList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            if (b.getBatchQuantity().getValue() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (counter \u003e 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            internalList.remove(0, counter);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Updates the quantities in the batches whenever a transaction is made"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Decreases quantities in the batches by the value specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Decreases quantity in the batches by the order of date imported, with the oldest batches first"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param quantity a valid quantity value expressed as an integer"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void updateBatchTransaction(Quantity quantity) throws InsufficientQuantityException,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            EmptyBatchListException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        int toDecrease \u003d quantity.getValue();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            sortBatches();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } catch (EmptyBatchListException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            decreaseTotalQuantity(toDecrease);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } catch (InsufficientQuantityException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        for (Batch b : internalList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            int batchQuantity \u003d b.getBatchQuantity().getValue();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            if (toDecrease \u003d\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            if (toDecrease \u003e\u003d batchQuantity) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                setBatchQuantity(b, 0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                decreaseBatchQuantity(b, toDecrease);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            toDecrease -\u003d batchQuantity;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        clearEmptyBatches();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Gets the batch with the oldest date"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @return a Batch object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Batch getEarliestBatch() throws EmptyBatchListException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            sortBatches();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } catch (EmptyBatchListException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return internalList.get(0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Gets the batch with the newest date"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @return a Batch object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Batch getLatestBatch() throws EmptyBatchListException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            sortBatches();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } catch (EmptyBatchListException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return internalList.get(internalList.size() - 1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public int getNumberBatches() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Gets the date of the oldest batch"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @return a BatchDate object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchDate getEarliestBatchDate() throws EmptyBatchListException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return getEarliestBatch().getBatchDate();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Gets the date of the newest batch"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @return a BatchDate object"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchDate getLatestBatchDate() throws EmptyBatchListException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return getLatestBatch().getBatchDate();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    // Quantity Related Methods"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Sets total quantity with the specified amount"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param value a valid quantity value expressed as an integer"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void setTotalQuantity(int value) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.totalQuantity.setValue(value);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Decreases total quantity by value specified"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param value a valid quantity value expressed as an integer"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void decreaseTotalQuantity(int value) throws InsufficientQuantityException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (value \u003e this.totalQuantity.getValue()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new InsufficientQuantityException();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.totalQuantity.decreaseValue(value);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Increases total quantity by value specified"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param value a valid quantity value expressed as an integer"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void increaseTotalQuantity(int value) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.totalQuantity.increaseValue(value);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Updates the total quantity of stock from all the batches in the list"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void updateTotalQuantity() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        setTotalQuantity(0);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!internalList.isEmpty()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            for (Batch b : internalList) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                increaseTotalQuantity(b.getBatchQuantity().getValue());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Sets the quantity for the indicated batch"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param batchToEdit a valid batch object"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param value a valid quantity value expressed as an integer"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void setBatchQuantity(Batch batchToEdit, int value) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchToEdit.setBatchQuantity(value);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void decreaseBatchQuantity(Batch batchToEdit, int value) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchToEdit.decreaseBatchQuantity(value);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void increaseBatchQuantity(Batch batchToEdit, int value) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchToEdit.increaseBatchQuantity(value);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    // Getters and Setters"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param index  a valid index value expressed as an integer"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @return the batch with the specified index in the list"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Batch getBatch(int index) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            sortBatches();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return internalList.get(index);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } catch (EmptyBatchListException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Batch getBatch(BatchId batchId) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        for (Batch b : internalList) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            if (b.getBatchId() \u003d\u003d batchId) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                return b;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        throw new BatchNotFoundException();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Batch getBatch(BatchDate date) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        for (Batch b : internalList) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            if (b.getBatchDate() \u003d\u003d date) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                return b;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        throw new BatchNotFoundException();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Replaces the batch {@code target} in the list with {@code editedBatch}."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * The batch identity of {@code editedBatch} must not be the same as another existing batch in the list."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void setBatch(Batch target, Batch editedBatch) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireAllNonNull(target, editedBatch);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new BatchNotFoundException();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!target.isSameBatch(editedBatch) \u0026\u0026 contains(editedBatch)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new DuplicateBatchException();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        internalList.set(index, editedBatch);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void setBatches(UniqueBatchList replacement) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        sortBatches();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Replaces the contents of this list with {@code batches}."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * {@code batches} must not contain duplicate batches."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void setBatches(List\u003cBatch\u003e batches) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireAllNonNull(batches);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!batchesAreUnique(batches)) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new DuplicateBatchException();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        internalList.setAll(batches);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    // Other supporting functions"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Sorts the Batch list by date"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * The batch list must not be empty"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void sortBatches() throws EmptyBatchListException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (this.internalList.isEmpty()) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new EmptyBatchListException();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.internalList.sort(Comparators.BATCHDATE);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns true if another batch with the same date exists else returns false"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean batchSameDate(Batch batchToCheck) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        for (Batch b : internalList) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            if (b.isSameDate(batchToCheck)) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public ObservableList\u003cBatch\u003e asUnmodifiableObservableList() throws EmptyBatchListException {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            sortBatches();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } catch (EmptyBatchListException e) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Iterator\u003cBatch\u003e iterator() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                || (other instanceof UniqueBatchList // instanceof handles nulls"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueBatchList) other).internalList));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns true if {@code persons} contains only unique batches."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private boolean batchesAreUnique(List\u003cBatch\u003e batches) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        for (int i \u003d 0; i \u003c batches.size() - 1; i++) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            for (int j \u003d i + 1; j \u003c batches.size(); j++) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                if (batches.get(i).isSameBatch(batches.get(j))) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 373
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/UniqueDrinkList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.exceptions.DrinkNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.exceptions.DuplicateDrinkException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.exceptions.DuplicateNameException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.exceptions.InsufficientQuantityException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * A list of drinks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * A drink is considered unique by comparing using {@code Drink#isSameDrink(Drink)}. As such, adding and updating of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * drinks uses Drink#isSameDrink(Drink) for equality so as to ensure that the drink being added or updated is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * unique in terms of identity in the UniqueDrinkList. However, the removal of a drink uses Drink#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * as to ensure that the drink with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * @see Drink#isSameDrink(Drink)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class UniqueDrinkList implements Iterable\u003cDrink\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final ObservableList\u003cDrink\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns true if the list contains an equivalent drink as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean contains(Drink toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDrink);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Adds a drink to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * The drink must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void add(Drink toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new DuplicateDrinkException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // TODO: check if this is needed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Edits the {@code target} drink\u0027s name attribute."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * The new name {@code editedName} must not be the same as another existing drink in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void editDrinkName(Drink target, Name editedName) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireAllNonNull(target, editedName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new DrinkNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!drinkNameIsUnique(editedName)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new DuplicateNameException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        internalList.get(index).setName(editedName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns true if (@code editedName} is a unique name."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private boolean drinkNameIsUnique(Name editedName) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            if (internalList.get(i).getName().equals(editedName)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Removes the equivalent drink from the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * The drink must exist in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void remove(Drink toRemove) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new DrinkNotFoundException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setDrinks(UniqueDrinkList replacement) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Replaces the contents of this list with {@code drinks}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code drinks} must not contain duplicate drinks."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setDrinks(List\u003cDrink\u003e drinks) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireAllNonNull(drinks);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!drinksAreUnique(drinks)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new DuplicateDrinkException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        internalList.setAll(drinks);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public ObservableList\u003cDrink\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Iterator\u003cDrink\u003e iterator() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                || (other instanceof UniqueDrinkList // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDrinkList) other).internalList));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns true if {@code drinks} contains only unique drinks."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Unique is defined by the drink\u0027s name, as in {@code isSameDrink}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private boolean drinksAreUnique(List\u003cDrink\u003e drinks) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        for (int i \u003d 0; i \u003c drinks.size() - 1; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            for (int j \u003d i + 1; j \u003c drinks.size(); j++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                if (drinks.get(i).isSameDrink(drinks.get(j))) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns the reference to drink in inventory as specified by {@code drink}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Pre-condition: drink must exit in inventory list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Drink findByName(Drink drink) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(drink);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        for (Drink d : internalList) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            if (d.isSameDrink(drink)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                return d;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        throw new DrinkNotFoundException();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Increases the quantity of the {@code drink} by {@code quantityToUpdate}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void increaseQuantity(Drink drink, Quantity quantityToUpdate) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink actualDrink \u003d findByName(drink);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        actualDrink.increaseQuantity(quantityToUpdate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Decreases the quantity of the {@code drink} by {@code quantityToUpdate}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void decreaseQuantity(Drink drink, Quantity quantityToUpdate) throws InsufficientQuantityException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink actualDrink \u003d findByName(drink);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        actualDrink.decreaseQuantity(quantityToUpdate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Price getSellingPrice(Drink drink) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink actualDrink \u003d findByName(drink);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return actualDrink.getRetailPrice();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Price getCostPrice(Drink drink) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink actualDrink \u003d findByName(drink);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return actualDrink.getCostPrice();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Replaces the original retail price of {@code drink} with {@code newSellingPrice}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void updateSellingPrice(Drink drink, Price newSellingPrice) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink actualDrink \u003d findByName(drink);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        actualDrink.setRetailPrice(newSellingPrice);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Replaces the original cost price of {@code drink} with {@code newCostPrice}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void updateCostPrice(Drink drink, Price newCostPrice) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink actualDrink \u003d findByName(drink);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        actualDrink.setCostPrice(newCostPrice);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Replaces the original tags of {@code drink} with {@code newTags}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void updateTags(Drink drink, Set\u003cTag\u003e newTags) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink actualDrink \u003d findByName(drink);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        actualDrink.setTags(newTags);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 224
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/exceptions/BatchNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class BatchNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/exceptions/DrinkNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.drink.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Signals that the operation is unable to find the specified drink."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class DrinkNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/exceptions/DuplicateBatchException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Signals that the operation will result in duplicate Batches (Batches are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class DuplicateBatchException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public DuplicateBatchException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        super(\"Operation would result in duplicate batches\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/exceptions/DuplicateDrinkException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.drink.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Signals that the operation will result in duplicate Drinks (Drinks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class DuplicateDrinkException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public DuplicateDrinkException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        super(\"Operation would result in duplicate drinks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bluein-green": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/exceptions/DuplicateNameException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.drink.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Signals that the operation will result in duplicate Drink Names."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class DuplicateNameException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public DuplicateNameException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        super(\"Operation would result in a duplicate name\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/exceptions/EmptyBatchListException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Signals that the batch list is empty and certain operations cannot be performed on it."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class EmptyBatchListException extends RuntimeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/drink/exceptions/InsufficientQuantityException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Signals that the operation cannot be performed as there is insufficient stock"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class InsufficientQuantityException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public InsufficientQuantityException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        super(\"Insufficient quantity in stock to perform operation\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicatePersonException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/ReadOnlyTransactionList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Unmodifiable view of a transaction list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public interface ReadOnlyTransactionList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns an unmodifiable view of the transaction list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    ObservableList\u003cTransaction\u003e getTransactionList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Transaction.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Quantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Represents a transaction in the company."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class Transaction {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private TransactionType transactionType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Date transactionDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Drink drinkTransacted;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Quantity quantityTransacted;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Price amountMoney;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private TransactionId id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Transaction() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Transaction(TransactionType transactionType, Drink drinkTransacted,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                       Quantity quantityTransacted, Price amountMoney) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireAllNonNull(transactionType, drinkTransacted, quantityTransacted, amountMoney);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.drinkTransacted \u003d drinkTransacted;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.quantityTransacted \u003d quantityTransacted;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.amountMoney \u003d amountMoney;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionDate \u003d new Date();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        id \u003d new TransactionId();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Transaction(TransactionType transactionType, Drink drinkTransacted,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                       Quantity quantityTransacted) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireAllNonNull(transactionType, drinkTransacted, quantityTransacted);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.drinkTransacted \u003d drinkTransacted;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.quantityTransacted \u003d quantityTransacted;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        amountMoney \u003d new Price(\"0\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionDate \u003d new Date();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        id \u003d new TransactionId();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Constructor for use when loading transactions from storage."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Transaction(TransactionType transactionType, Date transactionDate, Drink drinkTransacted,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                       Quantity quantityTransacted, Price amountMoney, TransactionId id) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireAllNonNull(transactionType, transactionDate, drinkTransacted, quantityTransacted,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                amountMoney, id);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.transactionDate \u003d transactionDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.drinkTransacted \u003d drinkTransacted;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.quantityTransacted \u003d quantityTransacted;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.amountMoney \u003d amountMoney;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionType getTransactionType() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return transactionType;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Drink getDrinkTransacted() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return drinkTransacted;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Price getAmountMoney() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return amountMoney;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Date getTransactionDate() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return transactionDate;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Quantity getQuantityTransacted() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return quantityTransacted;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionId getTransactionId() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setAmountMoney(Price amountMoney) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.amountMoney \u003d amountMoney;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Transaction that \u003d (Transaction) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return getTransactionType() \u003d\u003d that.getTransactionType()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 getTransactionDate().equals(that.getTransactionDate())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 getDrinkTransacted().isSameDrink(that.getDrinkTransacted())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 getQuantityTransacted().equals(that.getQuantityTransacted())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 getAmountMoney().equals(that.getAmountMoney())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 getTransactionId() \u003d\u003d (that.getTransactionId());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return Objects.hash(getTransactionType(), getTransactionDate(), getDrinkTransacted(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                getQuantityTransacted(), getAmountMoney(), getTransactionId());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        builder.append(\"Date: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .append(getTransactionDate())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .append(\", Type: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .append(getTransactionType())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .append(\", Drink: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .append(getDrinkTransacted())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .append(\", Quantity: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .append(getQuantityTransacted())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .append(\", Amount transacted: $\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .append(getAmountMoney())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .append(\", ID: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .append(getTransactionId());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/TransactionId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Represents the ID of a transaction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Value uses type Long."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TransactionId {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MESSAGE_TRANSACTION_ID_CONSTRAINTS \u003d \"Transaction Id must be a long value\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String TRANSACTION_ID_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final long value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Constructs a {@code TransactionId}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionId() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.value \u003d new java.util.Date().getTime();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionId(String input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.value \u003d Long.parseLong(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public long getValue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns true if a given string is a valid transaction id."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static boolean isValidTransactionId(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return test.matches(TRANSACTION_ID_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return Long.toString(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                || (other instanceof TransactionId // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 value \u003d\u003d (((TransactionId) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return Math.toIntExact(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/TransactionList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Represents a list of transactions for (currently) eternity, until cleared."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TransactionList implements ReadOnlyTransactionList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private ObservableList\u003cTransaction\u003e transactions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Date lastUpdateDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        lastUpdateDate \u003d new Date();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Creates a TransactionList using the transactions in the {@code toBeCopied}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionList(ReadOnlyTransactionList toBeCopied) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Resets the existing data of this {@code TransactionList} with {@code newData}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void resetData(ReadOnlyTransactionList newData) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        setTransactions(newData.getTransactionList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Replaces the contents of the inventory list with {@code drinks}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code drinks} must not contain duplicate drinks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setTransactions(ObservableList\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireAllNonNull(transactions);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.transactions \u003d transactions;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Adds {@code transaction} to the list of transactions"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactions.add(transaction);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateLastUpdateDate();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Updates the {@code lastUpdateDate} depending on last sale or import."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private void updateLastUpdateDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        lastUpdateDate \u003d new Date();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getLastUpdateDate() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return lastUpdateDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (transactions.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return transactions.size() + \" transaction\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return transactions.size() + \" transactions\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TransactionList // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 transactions.equals(((TransactionList) other).transactions));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return transactions;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 74,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/TransactionType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Represents the possible transaction types recorded in a transaction."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public enum TransactionType {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    SALE(\"SALE\"), PURCHASE(\"PURCHASE\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    TransactionType(String value) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: implement a predicate to filter based on type"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 28,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/AuthenticationLevel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.authentication.AuthenticationLevelConstant.AUTH_ACCOUNTANT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.authentication.AuthenticationLevelConstant.AUTH_ADMIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.authentication.AuthenticationLevelConstant.AUTH_MANAGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.authentication.AuthenticationLevelConstant.AUTH_STOCK_TAKER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Represents the authenticationLevel in the loginInfo list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class AuthenticationLevel {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_AUTHENTICATIONLEVEL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \"Only the following authentication level is allow: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                    + AUTH_ADMIN + \" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                    + AUTH_MANAGER + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                    + AUTH_ACCOUNTANT + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                    + AUTH_STOCK_TAKER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private String authenticationLevel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AuthenticationLevel(){}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AuthenticationLevel(String authenticationLevel) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireNonNull(authenticationLevel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        checkArgument(isAuthenticationLevelValid (authenticationLevel), MESSAGE_AUTHENTICATIONLEVEL_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.authenticationLevel \u003d authenticationLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static boolean isAuthenticationLevelValid(String authenticationLevel) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (authenticationLevel.equals (AUTH_ADMIN)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                || authenticationLevel.equals (AUTH_MANAGER)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                || authenticationLevel.equals (AUTH_STOCK_TAKER)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                || authenticationLevel.equals (AUTH_ACCOUNTANT)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public String toString () {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return authenticationLevel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public boolean equals(String userName) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return this.authenticationLevel.equals (authenticationLevel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/Password.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Represents a Password in the loginInfo list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class Password {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * The password must not contain a whitespace which include \" \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final int MAX_LENGTH_FOR_PASSWORD \u003d 50;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String PASSWORD_VALIDATION_REGEX \u003d \"[\\\\S]*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \"Password should only contain alphanumeric characters and no space, and it should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_PASSWORD_LENGTH_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \"Password should only be less than 50 words\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public Password(){}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public Password(String password) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        checkArgument(isValidPassword (password), MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        checkArgument (!isPasswordTooLong (password), MESSAGE_PASSWORD_LENGTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static boolean isValidPassword(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return test.matches(PASSWORD_VALIDATION_REGEX) \u0026\u0026 !test.isEmpty ();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *Return true if userName is longer than {@code MAX_LENGTH_FOR_USERNAME}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static boolean isPasswordTooLong(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (test.length () \u003e MAX_LENGTH_FOR_PASSWORD) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public String toString () {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public boolean equals(String password) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return this.password.equals (password);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/UserName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Represents a Username in the loginInfo list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class UserName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * The  username must not have a whitespace include \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String USERNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_USER_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \"UserName should only contain alphanumeric characters and no space,\\nand should not be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final int MAX_LENGTH_FOR_USERNAME \u003d 30;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_USER_NAME_LENGTH_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \"UserName should only be less than 30 words\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private String userName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public UserName(){}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public UserName(String userName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireNonNull(userName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        checkArgument(isValidUserName (userName), MESSAGE_USER_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        checkArgument(!isUserNameTooLong (userName), MESSAGE_USER_NAME_LENGTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static boolean isValidUserName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return test.matches(USERNAME_VALIDATION_REGEX) \u0026\u0026 !test.isEmpty ();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *Return true if userName is longer than {@code MAX_LENGTH_FOR_USERNAME}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static boolean isUserNameTooLong(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (test.length () \u003e MAX_LENGTH_FOR_USERNAME) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public String toString () {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return userName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                || (other instanceof UserName // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                \u0026\u0026 userName.equals(((UserName) other).userName)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public boolean equals(String userName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return this.userName.equals (userName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/accountant/AccountantModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.user.accountant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.analysis.TransactionPeriodPredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is the API manager for accountant role"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AccountantModel extends Model {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns the total cost incurred in specified period."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    Price analyseCosts(TransactionPeriodPredicate period);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns the total revenue earned in specified period."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    Price analyseRevenue(TransactionPeriodPredicate period);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns the total profit earned in specified period."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    Price analyseProfit(TransactionPeriodPredicate period);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 7,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/accountant/AccountantModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.model.user.accountant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.analysis.Analysis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.analysis.AnalysisManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.analysis.PurchaseTransactionPredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.analysis.SaleTransactionPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.analysis.TransactionPeriodPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.LoginInfoModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ReadOnlyInventoryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Represents the in-memory model of the accountant command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class AccountantModelManager extends ModelManager implements AccountantModel {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final Analysis analysis \u003d new AnalysisManager(transactionList, filteredTransactions);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AccountantModelManager(ReadOnlyInventoryList inventoryList,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                  UserPrefs userPrefs, LoginInfoModel loginInfoModel,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                                  ReadOnlyTransactionList transactionList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(inventoryList, userPrefs, loginInfoModel, transactionList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Price analyseCosts(TransactionPeriodPredicate period) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionListToShowPurchases(period);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return analysis.analyseCost();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Price analyseRevenue(TransactionPeriodPredicate period) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionListToShowSales(period);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return analysis.analyseRevenue();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Price analyseProfit(TransactionPeriodPredicate period) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionListToShowProfitPeriod(period);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return analysis.analyseProfit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Updates the {@code filteredTransactions} with Purchase predicate and {@code period} predicate."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private void updateFilteredTransactionListToShowPurchases(TransactionPeriodPredicate period) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionList(period.and(new PurchaseTransactionPredicate()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateTransactionListChanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Updates the {@code filteredTransactions} with Sale predicate and {@code period} predicate."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private void updateFilteredTransactionListToShowSales(TransactionPeriodPredicate period) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionList(period.and(new SaleTransactionPredicate()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateTransactionListChanged();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Updates the {@code filteredTransactions} with {@code period} predicate."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * For use by Profit analysis."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private void updateFilteredTransactionListToShowProfitPeriod(TransactionPeriodPredicate period) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionList(period);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateTransactionListChanged();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private void updateFilteredTransactionListToShowAll() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateTransactionListChanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 45,
      "liu-tianhang": 14,
      "Lunastryke": 4,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/admin/AdminModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.model.user.admin;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.accountant.AccountantModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.manager.ManagerModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.stocktaker.StockTakerModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public interface AdminModel extends Model, StockTakerModel, AccountantModel, ManagerModel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/admin/AdminModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.model.user.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.analysis.Analysis;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.analysis.AnalysisManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.analysis.PurchaseTransactionPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.analysis.SaleTransactionPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.analysis.TransactionPeriodPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LoginInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.events.model.DrinkAttributeChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.LoginInfoModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ReadOnlyInventoryList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.exceptions.InsufficientQuantityException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * This is the API model for Admin command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class AdminModelManager extends ModelManager implements AdminModel {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final Analysis analysis \u003d new AnalysisManager(transactionList, filteredTransactions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AdminModelManager(ReadOnlyInventoryList inventoryList, UserPrefs userPrefs,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                             LoginInfoModel loginInfoModel, ReadOnlyTransactionList transactionList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(inventoryList, userPrefs, loginInfoModel, transactionList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void indicateDrinkAttributesChanged(Drink drink) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        raise(new DrinkAttributeChangedEvent(drink));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dmanager command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteDrink(Drink target) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        inventoryList.removeDrink(target);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateInventoryListChanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateDrinkAttributesChanged(target);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addDrink(Drink drink) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        inventoryList.addDrink(drink);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredDrinkList(PREDICATE_SHOW_ALL_DRINKS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateInventoryListChanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateDrinkAttributesChanged(drink);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dStock taker commands\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void sellDrink(Transaction transaction) throws InsufficientQuantityException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Price defaultSalePrice \u003d inventoryList.getDefaultSellingPrice(transaction.getDrinkTransacted());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        inventoryList.decreaseQuantity(transaction.getDrinkTransacted(), transaction.getQuantityTransacted());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Price defaultAmountTransacted \u003d new Price(Float.toString(defaultSalePrice.getValue()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                * transaction.getQuantityTransacted().getValue()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        transaction.setAmountMoney(defaultAmountTransacted);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        recordTransaction(transaction);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        indicateInventoryListChanged();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredDrinkList(PREDICATE_SHOW_ALL_DRINKS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionListToShowAll();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateDrinkAttributesChanged(transaction.getDrinkTransacted());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        indicateTransactionListChanged();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void buyDrink(Transaction transaction) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        inventoryList.increaseDrinkQuantity(transaction.getDrinkTransacted(), transaction.getQuantityTransacted());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Price defaultCostPrice \u003d inventoryList.getDefaultCostPrice(transaction.getDrinkTransacted());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Price defaultAmountTransacted \u003d new Price(Float.toString(defaultCostPrice.getValue()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                * transaction.getQuantityTransacted().getValue()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        transaction.setAmountMoney(defaultAmountTransacted);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        recordTransaction(transaction);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        indicateInventoryListChanged();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        updateFilteredDrinkList(PREDICATE_SHOW_ALL_DRINKS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionListToShowAll();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateDrinkAttributesChanged(transaction.getDrinkTransacted());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        indicateTransactionListChanged();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void recordTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        transactionList.addTransaction(transaction);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dManager command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createNewAccount(LoginInfo loginInfo) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        loginInfoModel.createNewAccount(loginInfo);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteAccount(UserName userName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        loginInfoModel.deleteAccount(userName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Accountant commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Price analyseCosts(TransactionPeriodPredicate period) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionListToShowPurchases(period);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return analysis.analyseCost();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Price analyseRevenue(TransactionPeriodPredicate period) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionListToShowSales(period);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return analysis.analyseRevenue();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Price analyseProfit(TransactionPeriodPredicate period) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionListToShowProfitPeriod(period);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return analysis.analyseProfit();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Updates the {@code filteredTransactions} with Purchase predicate and {@code period} predicate."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private void updateFilteredTransactionListToShowPurchases(TransactionPeriodPredicate period) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionList(period.and(new PurchaseTransactionPredicate()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateTransactionListChanged();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Updates the {@code filteredTransactions} with Sale predicate and {@code period} predicate."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private void updateFilteredTransactionListToShowSales(TransactionPeriodPredicate period) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionList(period.and(new SaleTransactionPredicate()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateTransactionListChanged();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Updates the {@code filteredTransactions} with {@code period} predicate."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * For use by Profit analysis."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private void updateFilteredTransactionListToShowProfitPeriod(TransactionPeriodPredicate period) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionList(period);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateTransactionListChanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private void updateFilteredTransactionListToShowAll() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateTransactionListChanged();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EDIT DRINK DETAILS COMMANDS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void updateSellingPrice(Drink drinkToEdit, Price newSellingPrice) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        inventoryList.updateSellingPrice(drinkToEdit, newSellingPrice);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        indicateDrinkAttributesChanged(drinkToEdit);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void updateCostPrice(Drink drinkToEdit, Price newCostPrice) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        inventoryList.updateCostPrice(drinkToEdit, newCostPrice);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        indicateDrinkAttributesChanged(drinkToEdit);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void updateTags(Drink drinkToEdit, Set\u003cTag\u003e newTags) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        inventoryList.updateTags(drinkToEdit, newTags);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        indicateDrinkAttributesChanged(drinkToEdit);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 85,
      "liu-tianhang": 14,
      "Lunastryke": 22,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/manager/ManagerModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.model.user.manager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LoginInfo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * The interface for ManagerModel which control the api for Manager role"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public interface ManagerModel extends Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Login feature command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Create account based on {@code userName} {@code password} {@code authenticationLevel}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void createNewAccount(LoginInfo loginInfo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Delete a account based on the name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteAccount(UserName userName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003ddrink command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given drink."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * The drink must exist in the inventory list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteDrink(Drink target);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given drink."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code drink} must not already exist in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void addDrink(Drink drink);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EDIT DRINK DETAILS COMMANDS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Replaces the selling price of {@code drinkToEdit} with {@code newSellingPrice}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    void updateSellingPrice(Drink drinkToEdit, Price newSellingPrice);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Replaces the cost price of {@code drinkToEdit} with {@code newCostPrice}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    void updateCostPrice(Drink drinkToEdit, Price newCostPrice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Replaces the tags of {@code drinkToEdit} with {@code newTags}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    void updateTags(Drink drinkToEdit, Set\u003cTag\u003e newTags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 21,
      "liu-tianhang": 10,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/manager/ManagerModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.model.user.manager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LoginInfo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.events.model.DrinkAttributeChangedEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.LoginInfoModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ReadOnlyInventoryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Contain api that is usable for manager role"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class ManagerModelManager extends ModelManager implements ManagerModel {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public ManagerModelManager(ReadOnlyInventoryList inventoryList,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                               UserPrefs userPrefs, LoginInfoModel loginInfoModel,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                               ReadOnlyTransactionList transactionList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(inventoryList, userPrefs, loginInfoModel, transactionList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void indicateDrinkAttributesChanged(Drink drink) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        raise(new DrinkAttributeChangedEvent(drink));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dlogin command \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createNewAccount(LoginInfo loginInfo) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        loginInfoModel.createNewAccount(loginInfo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteAccount(UserName userName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        loginInfoModel.deleteAccount(userName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003ddrink command\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d///"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteDrink(Drink target) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        inventoryList.removeDrink(target);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateInventoryListChanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateDrinkAttributesChanged(target);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addDrink(Drink drink) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        inventoryList.addDrink(drink);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredDrinkList(PREDICATE_SHOW_ALL_DRINKS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateInventoryListChanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateDrinkAttributesChanged(drink);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EDIT DRINK DETAILS COMMANDS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void updateSellingPrice(Drink drinkToEdit, Price newSellingPrice) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        inventoryList.updateSellingPrice(drinkToEdit, newSellingPrice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        indicateDrinkAttributesChanged(drinkToEdit);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void updateCostPrice(Drink drinkToEdit, Price newCostPrice) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        inventoryList.updateCostPrice(drinkToEdit, newCostPrice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        indicateDrinkAttributesChanged(drinkToEdit);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void updateTags(Drink drinkToEdit, Set\u003cTag\u003e newTags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        inventoryList.updateTags(drinkToEdit, newTags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        indicateDrinkAttributesChanged(drinkToEdit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 26,
      "liu-tianhang": 13,
      "Lunastryke": 9,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/stocktaker/StockTakerModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.user.stocktaker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.exceptions.InsufficientQuantityException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * The API for stockTaker"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface StockTakerModel extends Model {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decreases the quantity of the drink in the {@code transaction}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void sellDrink(Transaction transaction) throws InsufficientQuantityException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Increases the quantity of the dirnk in the {@code transaction}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    void buyDrink(Transaction transaction);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "Lunastryke": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/stocktaker/StockTakerModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.model.user.stocktaker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.events.model.DrinkAttributeChangedEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.LoginInfoModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ReadOnlyInventoryList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.exceptions.InsufficientQuantityException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * The solid class for API of the stock taker"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class StockTakerModelManager extends ModelManager implements StockTakerModel {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public StockTakerModelManager(ReadOnlyInventoryList inventoryList, UserPrefs userPrefs,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                                  LoginInfoModel loginInfoModel, ReadOnlyTransactionList transactionList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(inventoryList, userPrefs, loginInfoModel, transactionList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    protected void indicateDrinkAttributesChanged(Drink drink) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        raise(new DrinkAttributeChangedEvent(drink));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void sellDrink(Transaction transaction) throws InsufficientQuantityException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Price defaultSalePrice \u003d inventoryList.getDefaultSellingPrice(transaction.getDrinkTransacted());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        inventoryList.decreaseQuantity(transaction.getDrinkTransacted(), transaction.getQuantityTransacted());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Price defaultAmountTransacted \u003d new Price(Float.toString(defaultSalePrice.getValue()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                * transaction.getQuantityTransacted().getValue()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        transaction.setAmountMoney(defaultAmountTransacted);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        recordTransaction(transaction);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateTransactionListChanged ();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateDrinkAttributesChanged(transaction.getDrinkTransacted());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void buyDrink(Transaction transaction) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Price defaultCostPrice \u003d inventoryList.getDefaultCostPrice(transaction.getDrinkTransacted());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        inventoryList.increaseDrinkQuantity(transaction.getDrinkTransacted(), transaction.getQuantityTransacted());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Price defaultAmountTransacted \u003d new Price(Float.toString(defaultCostPrice.getValue()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                * transaction.getQuantityTransacted().getValue()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        transaction.setAmountMoney(defaultAmountTransacted);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        recordTransaction(transaction);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateTransactionListChanged ();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        indicateDrinkAttributesChanged(transaction.getDrinkTransacted());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void recordTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        transactionList.addTransaction(transaction);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 3,
      "liu-tianhang": 13,
      "Lunastryke": 15,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleBatchBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Batch;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.BatchDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.BatchId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.BatchQuantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * A utility class to help with building Batch objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class SampleBatchBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String DEFAULT_BATCH_ID \u003d \"0001\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String DEFAULT_BATCH_QUANTITY \u003d \"10\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String DEFAULT_BATCH_DATE \u003d \"1/11/1996\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private BatchId batchId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private BatchQuantity batchQuantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private BatchDate batchDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public SampleBatchBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchId \u003d new BatchId(DEFAULT_BATCH_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchQuantity \u003d new BatchQuantity(DEFAULT_BATCH_QUANTITY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchDate \u003d new BatchDate(DEFAULT_BATCH_DATE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Initializes the BatchBuilder with the data of {@code batchToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public SampleBatchBuilder(Batch batchToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchId \u003d batchToCopy.getBatchId();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchQuantity \u003d batchToCopy.getBatchQuantity();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchDate \u003d batchToCopy.getBatchDate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Sets the {@code BatchId} of the {@code Batch} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public SampleBatchBuilder withId(String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchId \u003d new BatchId(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Sets the {@code BatchQuantity} of the {@code Batch} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public SampleBatchBuilder withQuantity(String input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchQuantity \u003d new BatchQuantity(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public SampleBatchBuilder withDate(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchDate \u003d new BatchDate(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Batch build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return new Batch(batchId, batchQuantity, batchDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleBatchListBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Batch;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.UniqueBatchList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * A utility class to help with building Batch objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class SampleBatchListBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private UniqueBatchList batchList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    SampleBatchListBuilder() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchList \u003d new UniqueBatchList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Builds a batch list with a variable number of batches"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param batch a valid Batch object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @return a valid UniqueBatchList object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public UniqueBatchList buildBatchList(Batch ...batch) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        for (Batch b: batch) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            batchList.addBatch(b);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return batchList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.InventoryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.ReadOnlyInventoryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Batch;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.UniqueBatchList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Initialising sample drinks for use"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    // Coke"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch COKE1 \u003d new SampleBatchBuilder().withId(\"0001\").withQuantity(\"10\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withDate(\"01/10/2018\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch COKE2 \u003d new SampleBatchBuilder().withId(\"0002\").withQuantity(\"20\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withDate(\"19/10/2018\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch COKE3 \u003d new SampleBatchBuilder().withId(\"0003\").withQuantity(\"30\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withDate(\"11/11/2018\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    //Green Tea"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch GT1 \u003d new SampleBatchBuilder().withId(\"0004\").withQuantity(\"10\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withDate(\"03/10/2018\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch GT2 \u003d new SampleBatchBuilder().withId(\"0005\").withQuantity(\"20\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withDate(\"17/10/2018\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch GT3 \u003d new SampleBatchBuilder().withId(\"0006\").withQuantity(\"40\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withDate(\"10/11/2018\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    //Sprite"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch SPRITE1 \u003d new SampleBatchBuilder().withId(\"0007\").withQuantity(\"30\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withDate(\"04/10/2018\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch SPRITE2 \u003d new SampleBatchBuilder().withId(\"0008\").withQuantity(\"20\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withDate(\"20/10/2018\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch SPRITE3 \u003d new SampleBatchBuilder().withId(\"0009\").withQuantity(\"40\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withDate(\"7/11/2018\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    //Milk Coffee"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch MC1 \u003d new SampleBatchBuilder().withId(\"0010\").withQuantity(\"10\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            .withDate(\"01/11/2018\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch MC2 \u003d new SampleBatchBuilder().withId(\"0011\").withQuantity(\"30\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            .withDate(\"02/11/2018\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch MC3 \u003d new SampleBatchBuilder().withId(\"0012\").withQuantity(\"40\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            .withDate(\"20/11/2018\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    //Milk Tea"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch MT1 \u003d new SampleBatchBuilder().withId(\"0013\").withQuantity(\"60\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            .withDate(\"01/11/2018\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch MT2 \u003d new SampleBatchBuilder().withId(\"0014\").withQuantity(\"20\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            .withDate(\"02/11/2018\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch MT3 \u003d new SampleBatchBuilder().withId(\"0015\").withQuantity(\"40\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            .withDate(\"20/11/2018\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction BUY_COKE_1 \u003d new Transaction(TransactionType.PURCHASE, new Date(\"01/10/2018\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Coke\")), new Quantity(\"30\"), new Price(\"576\"), new TransactionId(\"10923\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction SALE_COKE_1 \u003d new Transaction(TransactionType.SALE, new Date(\"15/10/2018\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Coke\")), new Quantity(\"10\"), new Price(\"360\"), new TransactionId(\"12305\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction BUY_COKE_2 \u003d new Transaction(TransactionType.PURCHASE, new Date(\"19/10/2018\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Coke\")), new Quantity(\"10\"), new Price(\"192\"), new TransactionId(\"14203\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction BUY_COKE_3 \u003d new Transaction(TransactionType.PURCHASE, new Date(\"19/10/2018\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Coke\")), new Quantity(\"10\"), new Price(\"192\"), new TransactionId(\"14593\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction SALE_COKE_2 \u003d new Transaction(TransactionType.SALE, new Date(\"25/10/2018\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Coke\")), new Quantity(\"10\"), new Price(\"360\"), new TransactionId(\"16550\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction BUY_COKE_4 \u003d new Transaction(TransactionType.PURCHASE, new Date(\"11/11/2018\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Coke\")), new Quantity(\"30\"), new Price(\"576\"), new TransactionId(\"20395\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // Green Tea Transactions"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction BUY_GT_1 \u003d new Transaction(TransactionType.PURCHASE, new Date(\"03/10/2018\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Green Tea\")), new Quantity(\"20\"), new Price(\"336\"), new TransactionId(\"11232\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction BUY_GT_2 \u003d new Transaction(TransactionType.PURCHASE, new Date(\"17/10/2018\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Green Tea\")), new Quantity(\"20\"), new Price(\"336\"), new TransactionId(\"13213\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction SALE_GT_1 \u003d new Transaction(TransactionType.SALE, new Date(\"8/11/2018\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Green Tea\")), new Quantity(\"10\"), new Price(\"360\"), new TransactionId(\"11232\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction BUY_GT_3 \u003d new Transaction(TransactionType.PURCHASE, new Date(\"10/11/2018\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Green Tea\")), new Quantity(\"40\"), new Price(\"672\"), new TransactionId(\"19933\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // Sprite Transactions"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction BUY_SPRITE_1 \u003d new Transaction(TransactionType.PURCHASE, new Date(\"4/10/2018\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Sprite\")), new Quantity(\"40\"), new Price(\"672\"), new TransactionId(\"12211\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction BUY_SPRITE_2 \u003d new Transaction(TransactionType.PURCHASE, new Date(\"20/10/2018\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Sprite\")), new Quantity(\"20\"), new Price(\"336\"), new TransactionId(\"15302\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction SALE_SPRITE_1 \u003d new Transaction(TransactionType.SALE, new Date(\"25/10/2018\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Sprite\")), new Quantity(\"10\"), new Price(\"360\"), new TransactionId(\"19201\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction BUY_SPRITE_3 \u003d new Transaction(TransactionType.PURCHASE, new Date(\"7/11/2018\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Sprite\")), new Quantity(\"40\"), new Price(\"336\"), new TransactionId(\"20121\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private static final UniqueBatchList cokeBatches \u003d new SampleBatchListBuilder().buildBatchList(COKE1, COKE2, COKE3);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private static final UniqueBatchList greenTeaBatches \u003d new SampleBatchListBuilder().buildBatchList(GT1, GT2, GT3);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private static final UniqueBatchList spriteBatches \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            new SampleBatchListBuilder().buildBatchList(SPRITE1, SPRITE2, SPRITE3);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private static final UniqueBatchList milkCoffeeBatches \u003d new SampleBatchListBuilder().buildBatchList(MC1, MC2, MC3);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private static final UniqueBatchList milkTeaBatches \u003d new SampleBatchListBuilder().buildBatchList(MT1, MT2, MT3);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static Drink[] getSampleDrinks() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return new Drink[]{"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Coke\"), new Price(\"19.2\"), new Price(\"36\"), cokeBatches,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                    getTagSet(\"Popular\")),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Green Tea\"), new Price(\"16.8\"), new Price(\"36\"), greenTeaBatches,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                    getTagSet(\"Popular\")),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Sprite\"), new Price(\"16.8\"), new Price(\"36\"), spriteBatches,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                    getTagSet(\"Popular\")),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Milk Coffee\"), new Price(\"24\"), new Price(\"43.2\"), milkCoffeeBatches,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                    getTagSet()),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            new Drink(new Name(\"Milk Tea\"), new Price(\"24\"), new Price(\"43.2\"), milkTeaBatches, getTagSet())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static ReadOnlyInventoryList getSampleInventoryList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        InventoryList sampleIl \u003d new InventoryList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        for (Drink sampleDrink : getSampleDrinks()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            sampleIl.addDrink(sampleDrink);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return sampleIl;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Initialising sample transactions for use"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // Coke"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    //Green Tea"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    //Sprite"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    //Milk Coffee"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    //Milk Tea"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // TransactionType transactionType, Date transactionDate, Drink drinkTransacted,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // Quantity quantityTransacted, Price amountMoney, long id"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // Coke Transactions"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private static List\u003cTransaction\u003e getSampleTransactions() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                BUY_COKE_1, SALE_COKE_1, BUY_COKE_2, BUY_COKE_3, SALE_COKE_2, BUY_COKE_4,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                BUY_GT_1, BUY_GT_2, SALE_GT_1, BUY_GT_3,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                BUY_SPRITE_1, BUY_SPRITE_2, SALE_SPRITE_1, BUY_SPRITE_3));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static ReadOnlyTransactionList getSampleTransactionList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        TransactionList sampleTl \u003d new TransactionList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        List\u003cTransaction\u003e transactions \u003d getSampleTransactions();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactions.sort((t1, t2) -\u003e t1.getTransactionDate().compareTo(t2.getTransactionDate()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        for (Transaction transaction : transactions) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            sampleTl.addTransaction(transaction);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return sampleTl;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 99,
      "Lunastryke": 55,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InventoryListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.ReadOnlyInventoryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Represents a storage for {@link seedu.address.model.InventoryList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public interface InventoryListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    Path getInventoryListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns Inventory List data as a {@link seedu.address.model.ReadOnlyInventoryList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    Optional\u003cReadOnlyInventoryList\u003e readInventoryList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @see #getInventoryListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    Optional\u003cReadOnlyInventoryList\u003e readInventoryList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Saves the given {@link ReadOnlyInventoryList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param inventoryList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void saveInventoryList(ReadOnlyInventoryList inventoryList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @see #saveInventoryList(ReadOnlyInventoryList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void saveInventoryList(ReadOnlyInventoryList inventoryList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.events.model.InventoryListChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.events.model.TransactionListChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.LoginInfoManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.ReadOnlyInventoryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.logininfo.LoginInfoStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.storage.transactions.TransactionListStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public interface Storage extends InventoryListStorage, UserPrefsStorage, LoginInfoStorage, TransactionListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    Path getInventoryListFilePath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    Optional\u003cReadOnlyInventoryList\u003e readInventoryList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void saveInventoryList(ReadOnlyInventoryList inventoryList) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cLoginInfoManager\u003e readLoginInfo() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveLoginInfo(LoginInfoManager userPrefs) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    //void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Saves the current version of the Inventory List to the hard disk"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Creates the data file if it is missing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void handleInventoryListChangedEvent(InventoryListChangedEvent ilce);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    Optional\u003cReadOnlyTransactionList\u003e readTransactionList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    void saveTransactionList(ReadOnlyTransactionList transactionList) throws IOException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Saves the current version of the Transaction List to the hard disk"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Creates the data file if it is missing"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    void handleTransactionListChangedEvent(TransactionListChangedEvent tlce);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 18,
      "Lunastryke": 13,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.events.model.InventoryListChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.events.model.TransactionListChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.LoginInfoManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.ReadOnlyInventoryList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.storage.logininfo.LoginInfoStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.storage.transactions.TransactionListStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Manages storage of Inventory List data in local storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private InventoryListStorage inventoryListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private LoginInfoStorage loginInfoStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private TransactionListStorage transactionListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public StorageManager(InventoryListStorage inventoryListStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                          LoginInfoStorage loginInfoStorage, TransactionListStorage transactionListStorage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.inventoryListStorage \u003d inventoryListStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.loginInfoStorage \u003d loginInfoStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.transactionListStorage \u003d transactionListStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LoginInfoManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public Path getLoginInfoFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return loginInfoStorage.getLoginInfoFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cLoginInfoManager\u003e readLoginInfo() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return loginInfoStorage.readLoginInfo ();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveLoginInfo(LoginInfoManager loginInfoManager) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        loginInfoStorage.saveLoginInfo (loginInfoManager);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Inventory List methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Path getInventoryListFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return inventoryListStorage.getInventoryListFilePath();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Optional\u003cReadOnlyInventoryList\u003e readInventoryList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return readInventoryList(inventoryListStorage.getInventoryListFilePath());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Optional\u003cReadOnlyInventoryList\u003e readInventoryList(Path filePath)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return inventoryListStorage.readInventoryList(filePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void saveInventoryList(ReadOnlyInventoryList inventoryList) throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        saveInventoryList(inventoryList, inventoryListStorage.getInventoryListFilePath());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void saveInventoryList(ReadOnlyInventoryList inventoryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        inventoryListStorage.saveInventoryList(inventoryList, filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void handleInventoryListChangedEvent(InventoryListChangedEvent event) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            saveInventoryList(event.data);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Transaction List methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Path getTransactionListFilePath() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return transactionListStorage.getTransactionListFilePath();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Optional\u003cReadOnlyTransactionList\u003e readTransactionList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return readTransactionList(transactionListStorage.getTransactionListFilePath());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Optional\u003cReadOnlyTransactionList\u003e readTransactionList(Path filePath)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        logger.fine(\"Attempting to read transaction data from file: \" + filePath);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return transactionListStorage.readTransactionList(filePath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void saveTransactionList(ReadOnlyTransactionList transactionList) throws IOException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        saveTransactionList(transactionList, transactionListStorage.getTransactionListFilePath());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void saveTransactionList(ReadOnlyTransactionList transactionList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        logger.fine(\"Attempting to write to transaction data file: \" + filePath);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionListStorage.saveTransactionList(transactionList, filePath);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void handleTransactionListChangedEvent(TransactionListChangedEvent event) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to transaction file\"));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            saveTransactionList(event.data);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 48,
      "Lunastryke": 47,
      "liu-tianhang": 14,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedBatch.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Batch;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.BatchDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.BatchId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.BatchQuantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * JAXB-friendly adapted version of the Drink batch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class XmlAdaptedBatch {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Batch\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private String batchId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private String batchQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private String batchDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Constructs an XmlAdaptedBatch."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public XmlAdaptedBatch() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Constructs a {@code XmlAdaptedBatch} with the given fields."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public XmlAdaptedBatch(BatchId batchIdInput, BatchQuantity batchQuantityInput, BatchDate batchDateInput) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchId \u003d batchIdInput.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchQuantity \u003d batchQuantityInput.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchDate \u003d batchDateInput.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Converts a given Batch into this class for JAXB use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedBatch"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public XmlAdaptedBatch(Batch source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchId \u003d source.getBatchId().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchQuantity \u003d source.getBatchQuantity().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchDate \u003d source.getBatchDate().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Converts this jaxb-friendly adapted batch object into the model\u0027s Batch object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Batch toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (batchId \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, BatchId.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!BatchId.isValidBatchId(batchId)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new IllegalValueException(BatchId.MESSAGE_BATCH_ID_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        final BatchId modelBatchId \u003d new BatchId(batchId);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (batchQuantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                    BatchQuantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!BatchQuantity.isValidQuantity(batchQuantity)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new IllegalValueException(BatchQuantity.MESSAGE_QUANTITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        final BatchQuantity modelBatchQuantity \u003d new BatchQuantity(batchQuantity);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (batchDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                    BatchDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!BatchDate.isExistingDate(batchDate)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new IllegalValueException(BatchDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        final BatchDate modelDate \u003d new BatchDate(batchDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return new Batch(modelBatchId, modelBatchQuantity, modelDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!(other instanceof XmlAdaptedBatch)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return batchId.equals(((XmlAdaptedBatch) other).batchId);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedDrink.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javax.xml.bind.annotation.XmlElementWrapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.UniqueBatchList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * JAXB-friendly version of the Drink."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class XmlAdaptedDrink {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Drink\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private String sellingPrice;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private String costPrice;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @XmlElementWrapper"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @XmlElement(name \u003d \"batchList\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private List\u003cXmlAdaptedBatch\u003e batchList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Constructs an XmlAdaptedDrink."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public XmlAdaptedDrink() {}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Constructs an {@code XmlAdaptedDrink} with the given drink details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public XmlAdaptedDrink(String name, String sellingPrice, String costPrice, List\u003cXmlAdaptedBatch\u003e batchList,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                           List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.sellingPrice \u003d sellingPrice;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.costPrice \u003d costPrice;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!batchList.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            this.batchList \u003d new ArrayList\u003c\u003e(batchList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Converts a given Drink into this class for JAXB use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedDrink"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public XmlAdaptedDrink(Drink source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        sellingPrice \u003d source.getRetailPrice().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        costPrice \u003d source.getCostPrice().toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchList \u003d source.getObservableBatchList().stream().map(XmlAdaptedBatch::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Drink toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        final List\u003cTag\u003e drinkTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        final UniqueBatchList drinkBatches \u003d new UniqueBatchList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        for (XmlAdaptedBatch batch: batchList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            drinkBatches.addBatch(batch.toModelType());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            drinkTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (sellingPrice \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!Price.isValidPrice(sellingPrice)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        final Price modelSellingPrice \u003d new Price(sellingPrice);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (costPrice \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!Price.isValidPrice(costPrice)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        final Price modelCostPrice \u003d new Price(costPrice);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        final UniqueBatchList modelBatchList \u003d drinkBatches;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(drinkTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return new Drink(modelName, modelSellingPrice, modelCostPrice, modelBatchList, modelTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!(other instanceof XmlAdaptedDrink)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        XmlAdaptedDrink otherDrink \u003d (XmlAdaptedDrink) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return Objects.equals(name, otherDrink.name)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 Objects.equals(sellingPrice, otherDrink.sellingPrice)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 Objects.equals(costPrice, otherDrink.costPrice)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 Objects.equals(batchList, otherDrink.batchList)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 tagged.equals(otherDrink.tagged);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.storage.transactions.XmlSerializableTransactionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Stores inventory list data in an XML file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Saves the given inventorylist data to the specified file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableInventoryList inventoryList)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            XmlUtil.saveDataToFile(file, inventoryList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            System.out.println(file.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns inventory list in the file or an empty address book"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static XmlSerializableInventoryList loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableInventoryList.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Saves the given transactionlist data to the specified file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static void saveTransactionDataToFile(Path file, XmlSerializableTransactionList transactionList)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            XmlUtil.saveDataToFile(file, transactionList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            System.out.println(file.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns inventory list in the file or an empty address book"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static XmlSerializableTransactionList loadTransactionDataFromSaveFile(Path file)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throws DataConversionException,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableTransactionList.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 27,
      "Lunastryke": 8,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlInventoryListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.ReadOnlyInventoryList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * A class to access InventoryList data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class XmlInventoryListStorage implements InventoryListStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlInventoryListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public XmlInventoryListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Path getInventoryListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Optional\u003cReadOnlyInventoryList\u003e readInventoryList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return readInventoryList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Similar to {@link #readInventoryList()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Optional\u003cReadOnlyInventoryList\u003e readInventoryList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            logger.info(\"Inventory List file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        XmlSerializableInventoryList xmlInventoryList \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return Optional.of(xmlInventoryList.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void saveInventoryList(ReadOnlyInventoryList inventoryList) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        saveInventoryList(inventoryList, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Similar to {@link #saveInventoryList(ReadOnlyInventoryList)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void saveInventoryList(ReadOnlyInventoryList inventoryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireNonNull(inventoryList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableInventoryList(inventoryList));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 20,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableInventoryList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.InventoryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.ReadOnlyInventoryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * An Immutable Inventory List that is serializable to XML format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "@XmlRootElement(name \u003d \"inventorylist\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class XmlSerializableInventoryList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DRINK \u003d \"Drinks list contains duplicate drink(s).\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private List\u003cXmlAdaptedDrink\u003e drinks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Creates an empty XmlSerializableInventoryList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public XmlSerializableInventoryList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        drinks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public XmlSerializableInventoryList(ReadOnlyInventoryList src) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        drinks.addAll(src.getDrinkList().stream().map(XmlAdaptedDrink::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Converts this inventorylist into the model\u0027s {@code InventoryList} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * {@code XmlAdaptedDrink}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public InventoryList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        InventoryList inventoryList \u003d new InventoryList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        for (XmlAdaptedDrink d : drinks) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            Drink drink \u003d d.toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            if (inventoryList.hasDrink(drink)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DRINK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            inventoryList.addDrink(drink);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return inventoryList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!(other instanceof XmlSerializableInventoryList)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return drinks.equals(((XmlSerializableInventoryList) other).drinks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "Lunastryke": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/logininfo/JsonLoginInfoStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.storage.logininfo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.LoginInfoManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * A class to access Login information stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class JsonLoginInfoStorage implements LoginInfoStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public JsonLoginInfoStorage(Path filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public Path getLoginInfoFilePath () {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cLoginInfoManager\u003e readLoginInfo () throws DataConversionException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return readLoginInfo(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Similar to {@link #readLoginInfo()}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cLoginInfoManager\u003e readLoginInfo(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, LoginInfoManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveLoginInfo (LoginInfoManager loginInfoManager) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(loginInfoManager, filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 36,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/transactions/TransactionListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.storage.transactions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Represents a storage for {@link seedu.address.model.transaction.TransactionList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public interface TransactionListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    Path getTransactionListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns Transaction List data as a {@link seedu.address.model.transaction.ReadOnlyTransactionList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    Optional\u003cReadOnlyTransactionList\u003e readTransactionList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @see #getTransactionListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    Optional\u003cReadOnlyTransactionList\u003e readTransactionList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Saves the given {@link ReadOnlyTransactionList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param transactionList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    void saveTransactionList(ReadOnlyTransactionList transactionList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @see #saveTransactionList(ReadOnlyTransactionList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    void saveTransactionList(ReadOnlyTransactionList transactionList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/transactions/XmlAdaptedTransaction.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.storage.transactions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Quantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * JAXB-friendly version of the Transaction."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class XmlAdaptedTransaction {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Transaction\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private String transactionType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private String transactionDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private String drinkTransacted;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private String quantityTransacted;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private String amountMoney;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Constructs an XmlAdaptedTransaction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public XmlAdaptedTransaction() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Constructs an {@code XmlAdaptedTransaction} with the given drink details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public XmlAdaptedTransaction(String transactionType, String transactionDate, String drinkTransacted,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                                 String quantityTransacted, String amountMoney, String id) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.transactionDate \u003d transactionDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.drinkTransacted \u003d drinkTransacted;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.quantityTransacted \u003d quantityTransacted;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.amountMoney \u003d amountMoney;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Converts a given Transaction into this class for JAXB use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedTransaction"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public XmlAdaptedTransaction(Transaction source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionType \u003d source.getTransactionType().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionDate \u003d source.getTransactionDate().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinkTransacted \u003d source.getDrinkTransacted().getName().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        quantityTransacted \u003d source.getQuantityTransacted().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        amountMoney \u003d source.getAmountMoney().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        id \u003d source.getTransactionId().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Transaction object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted transaction"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Transaction toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (transactionType \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    TransactionType.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        final TransactionType modelTransactionType \u003d TransactionType.valueOf(transactionType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (transactionDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!Date.isValidDate(transactionDate)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        final Date modelTransactionDate \u003d new Date(transactionDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (drinkTransacted \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Drink.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!Name.isValidName(drinkTransacted)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        final Drink modelDrinkTransacted \u003d new Drink(new Name(drinkTransacted));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (quantityTransacted \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!Quantity.isValidQuantity(quantityTransacted)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_QUANTITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        final Quantity modelQuantityTransactied \u003d new Quantity(quantityTransacted);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (amountMoney \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!Price.isValidPrice(amountMoney)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        final Price modelAmountMoney \u003d new Price(amountMoney);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    TransactionId.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!TransactionId.isValidTransactionId(id)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new IllegalValueException(TransactionId.MESSAGE_TRANSACTION_ID_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        final TransactionId modelTransactionId \u003d new TransactionId(id);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return new Transaction(modelTransactionType, modelTransactionDate, modelDrinkTransacted,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                modelQuantityTransactied, modelAmountMoney, modelTransactionId);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!(other instanceof XmlAdaptedTransaction)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        XmlAdaptedTransaction otherTrans \u003d (XmlAdaptedTransaction) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return Objects.equals(transactionType, otherTrans.transactionType)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 Objects.equals(transactionDate, otherTrans.transactionDate)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 Objects.equals(drinkTransacted, otherTrans.drinkTransacted)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 Objects.equals(quantityTransacted, otherTrans.quantityTransacted)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 Objects.equals(amountMoney, otherTrans.amountMoney)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 Objects.equals(id, otherTrans.id);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 154
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/transactions/XmlSerializableTransactionList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.storage.transactions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * An Immutable Transaction List that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "@XmlRootElement(name \u003d \"transactionlist\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class XmlSerializableTransactionList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private List\u003cXmlAdaptedTransaction\u003e transactions;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Creates an empty XmlSerializableTransactionList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public XmlSerializableTransactionList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public XmlSerializableTransactionList(ReadOnlyTransactionList src) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactions.addAll(src.getTransactionList().stream().map(XmlAdaptedTransaction::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Converts this transactionlist into the model\u0027s {@code TransactionList} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in {@code XmlAdaptedTransaction}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        TransactionList transactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        for (XmlAdaptedTransaction t : transactions) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            Transaction transaction \u003d t.toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            transactionList.addTransaction(transaction);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return transactionList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!(other instanceof XmlSerializableTransactionList)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return transactions.equals(((XmlSerializableTransactionList) other).transactions);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/transactions/XmlTransactionListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.storage.transactions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.storage.XmlFileStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * A class to access TransactionList data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class XmlTransactionListStorage implements TransactionListStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlTransactionListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public XmlTransactionListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Path getTransactionListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Optional\u003cReadOnlyTransactionList\u003e readTransactionList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return readTransactionList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Similar to {@link #readTransactionList()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Optional\u003cReadOnlyTransactionList\u003e readTransactionList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            logger.info(\"Transaction List file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        XmlSerializableTransactionList xmlTransactionList \u003d XmlFileStorage.loadTransactionDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return Optional.of(xmlTransactionList.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void saveTransactionList(ReadOnlyTransactionList transactionList) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        saveTransactionList(transactionList, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Similar to {@link #saveTransactionList(ReadOnlyTransactionList)}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void saveTransactionList(ReadOnlyTransactionList transactionList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(transactionList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        XmlFileStorage.saveTransactionDataToFile(filePath, new XmlSerializableTransactionList(transactionList));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BatchCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Batch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * An UI component that displays information of a {@code Drink}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class BatchCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private static final String FXML \u003d \"BatchListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public final Batch batch;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private Label batchId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private Label batchQuantity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private Label batchDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchCard(Batch batch, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batch \u003d batch;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchId.setText(batch.getBatchId().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchQuantity.setText(\"Quantity in batch: \" + Integer.toString(batch.getBatchQuantity().getValue()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchDate.setText(\"Batch Date: \" + batch.getBatchDate().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!(other instanceof BatchCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        BatchCard card \u003d (BatchCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 batch.equals(card.batch);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BatchListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.events.ui.InventoryPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Batch;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Panel containing the list of drinks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class BatchListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private static final String FXML \u003d \"BatchListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BatchListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private ListView\u003cBatch\u003e batchListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchListPanel(ObservableList\u003cBatch\u003e batchList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        setConnections(batchList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private void setConnections(ObservableList\u003cBatch\u003e batchList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchListView.setItems(batchList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchListView.setCellFactory(listView -\u003e new BatchListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                        logger.fine(\"Selection in drink list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                        //raise(new InventoryPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private void handleInventoryPanelSelectionChangedEvent(InventoryPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // insert what to do here"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchListView.setItems(event.getNewSelection().getObservableBatchList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Drink} using a {@code DrinkCard}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    class BatchListViewCell extends ListCell\u003cBatch\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        protected void updateItem(Batch batch, boolean empty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            super.updateItem(batch, empty);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            if (empty || batch \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                setGraphic(new BatchCard(batch, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DrinkCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * An UI component that displays information of a {@code Drink}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class DrinkCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private static final String FXML \u003d \"DrinkListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public final Drink drink;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Label stock;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Label costPrice;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Label retailPrice;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public DrinkCard(Drink drink, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.drink \u003d drink;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        name.setText(drink.getName().name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        stock.setText(\"Quantity in stock: \" + Integer.toString(drink.getQuantity().getValue()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        costPrice.setText(\"Cost Price: $\" + drink.getCostPrice().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        retailPrice.setText(\"Selling Price: $\" + drink.getRetailPrice().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drink.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!(other instanceof DrinkCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        DrinkCard card \u003d (DrinkCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 drink.equals(card.drink);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 66,
      "Lunastryke": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DrinkDetailPane.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Pane containing information about Drink"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class DrinkDetailPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private static final String FXML \u003d \"DrinkDetailPane.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public final Drink drink;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private Label sellingPrice;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private Label costPrice;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private Label batchesInStock;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private Label earliestBatchDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private Label latestBatchDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Constructs a drink detail pane with the input drink"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * For drinks with no batches, \"No batches available\" will be printed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param input a Drink object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public DrinkDetailPane(Drink input) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.drink \u003d input;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (drink !\u003d null \u0026\u0026 drink.getName() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            name.setText(drink.getName().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            sellingPrice.setText(\"$ \" + drink.getRetailPrice().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            quantity.setText(Integer.toString(drink.getQuantity().getValue()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            costPrice.setText(\"$ \" + drink.getCostPrice().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            batchesInStock.setText(Integer.toString(drink.getNumberBatches()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            if (drink.getNumberBatches() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                earliestBatchDate.setText(\"No batches available\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                latestBatchDate.setText(\"No batches available\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                earliestBatchDate.setText(drink.getEarliestBatchDate().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                latestBatchDate.setText(drink.getLatestBatchDate().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            name.setText(\"Please select a drink\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            sellingPrice.setText(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            quantity.setText(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            costPrice.setText(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            batchesInStock.setText(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            earliestBatchDate.setText(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            latestBatchDate.setText(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DrinkListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.events.ui.InventoryPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Panel containing the list of drinks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class DrinkListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private static final String FXML \u003d \"DrinkListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DrinkListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private ListView\u003cDrink\u003e drinkListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public DrinkListPanel(ObservableList\u003cDrink\u003e drinkList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        setConnections(drinkList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private void setConnections(ObservableList\u003cDrink\u003e drinkList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinkListView.setItems(drinkList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinkListView.setCellFactory(listView -\u003e new DrinkListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinkListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                        logger.fine(\"Selection in drink list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                        raise(new InventoryPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Scrolls to the {@code DrinkCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            drinkListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            drinkListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Drink} using a {@code DrinkCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    class DrinkListViewCell extends ListCell\u003cDrink\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        protected void updateItem(Drink drink, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            super.updateItem(drink, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            if (empty || drink \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                setGraphic(new DrinkCard(drink, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.authentication.AuthenticationLevelConstant.AUTH_ACCOUNTANT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.authentication.AuthenticationLevelConstant.AUTH_ADMIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.authentication.AuthenticationLevelConstant.AUTH_MANAGER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.authentication.AuthenticationLevelConstant.AUTH_STOCK_TAKER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.CurrentUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.logic.ChangeHelpWindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH_ADMIN \u003d \"/help/AdminHelpWindow.html\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH_ACCOUNTANT \u003d \"/help/AccountantHelpWindow.html\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH_MANAGER \u003d \"/help/ManagerHelpWindow.html\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH_STOCK_TAKER \u003d \"/help/StockTakerHelpWindow.html\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String fileOpening \u003d setFilePathAccordingToRole();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(fileOpening).toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Shows the help loginWindow."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns true if the help loginWindow is currently being shown."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Focuses on the help loginWindow."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Return {@code filepath}based on CurrentUser"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private String setFilePathAccordingToRole() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (CurrentUser.checkAuthenticationLevel (AUTH_ADMIN)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return USERGUIDE_FILE_PATH_ADMIN;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (CurrentUser.checkAuthenticationLevel (AUTH_ACCOUNTANT)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return USERGUIDE_FILE_PATH_ACCOUNTANT;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (CurrentUser.checkAuthenticationLevel (AUTH_MANAGER)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return USERGUIDE_FILE_PATH_MANAGER;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (CurrentUser.checkAuthenticationLevel (AUTH_STOCK_TAKER)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return USERGUIDE_FILE_PATH_STOCK_TAKER;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleChangeHelpWindowEvent(ChangeHelpWindowEvent event) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String fileOpening \u003d setFilePathAccordingToRole();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(fileOpening).toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 30,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.events.model.DrinkAttributeChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.events.model.InventoryListChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.TransactionListChangedEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.commons.events.ui.InventoryPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.StopUiEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private TransactionsPanel transactionsPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private DrinkDetailPane drinkDetailPane;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private DrinkListPanel drinkListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private BatchListPanel batchListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // private StackPane transactionsPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private StackPane drinkDetailPanePlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private StackPane transactionsPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private StackPane drinkListPanelPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private StackPane batchListPanelPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * help loginWindow purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this loginWindow."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionsPanel \u003d new TransactionsPanel(logic.getFilteredTransactionList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionsPanelPlaceholder.getChildren().add(transactionsPanel.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinkListPanel \u003d new DrinkListPanel(logic.getFilteredDrinkList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinkListPanelPlaceholder.getChildren().add(drinkListPanel.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchListPanel \u003d new BatchListPanel(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchListPanelPlaceholder.getChildren().add(batchListPanel.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getInventoryListFilePath());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private void handleInventoryPanelSelectionChangedEvent(InventoryPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // insert what to do here"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        drinkDetailPane \u003d new DrinkDetailPane(event.getNewSelection());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        drinkDetailPanePlaceholder.getChildren().add(drinkDetailPane.getRoot());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchListPanel \u003d new BatchListPanel("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                event.getNewSelection().getObservableBatchList());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchListPanelPlaceholder.getChildren().add(batchListPanel.getRoot());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private void handleDrinkAttributeChangedEvent(DrinkAttributeChangedEvent event) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        drinkListPanel \u003d new DrinkListPanel(logic.getFilteredDrinkList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        drinkListPanelPlaceholder.getChildren().add(drinkListPanel.getRoot());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchListPanel \u003d new BatchListPanel(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchListPanelPlaceholder.getChildren().add(batchListPanel.getRoot());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        drinkDetailPane \u003d new DrinkDetailPane(new Drink(null));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        drinkDetailPanePlaceholder.getChildren().add(drinkDetailPane.getRoot());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private void handleIndicateInventoryListChangedEvent(InventoryListChangedEvent event) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        drinkListPanel \u003d new DrinkListPanel(logic.getFilteredDrinkList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        drinkListPanelPlaceholder.getChildren().add(drinkListPanel.getRoot());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchListPanel \u003d new BatchListPanel(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchListPanelPlaceholder.getChildren().add(batchListPanel.getRoot());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        drinkDetailPane \u003d new DrinkDetailPane(new Drink(null));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        drinkDetailPanePlaceholder.getChildren().add(drinkDetailPane.getRoot());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleTransactionListChangedEvent(TransactionListChangedEvent event) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        transactionsPanel \u003d new TransactionsPanel(logic.getFilteredTransactionList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        transactionsPanelPlaceholder.getChildren().add(transactionsPanel.getRoot());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help loginWindow or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        raise (new StopUiEvent ());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public DrinkListPanel getDrinkListPanel() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return drinkListPanel;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionsPanel getTransactionsPanel() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return transactionsPanel;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 21,
      "Lunastryke": 48,
      "-": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TransactionCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * An UI component that displays information of a {@code Transaction}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TransactionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private static final String FXML \u003d \"TransactionListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public final Transaction transaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Label transType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Label transQuantity;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Label transDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Label transAmount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionCard(Transaction transaction, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        name.setText(transaction.getDrinkTransacted().getName().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transType.setText(transaction.getTransactionType().getValue());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (transaction.getTransactionType() \u003d\u003d TransactionType.SALE) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            transType.setStyle(\"-fx-background-color:LIGHTSEAGREEN\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transQuantity.setText(\"Quantity transacted: \" + transaction.getQuantityTransacted());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transAmount.setText(\"Amount transacted: $\" + transaction.getAmountMoney());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transDate.setText(\"Date of transaction: \" + transaction.getTransactionDate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (!(other instanceof TransactionCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        TransactionCard card \u003d (TransactionCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u0026\u0026 transaction.equals(card.transaction);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TransactionsPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Pane containing Transactions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TransactionsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private static final String FXML \u003d \"TransactionsListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TransactionsPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private ListView\u003cTransaction\u003e transactionListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionsPanel(ObservableList\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        setConnections(transactions);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private void setConnections(ObservableList\u003cTransaction\u003e transactionsList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionListView.setItems(transactionsList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionListView.setCellFactory(listView -\u003e new TransactionListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Transaction} using a {@code TransactionCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    class TransactionListViewCell extends ListCell\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        protected void updateItem(Transaction transaction, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            super.updateItem(transaction, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            if (empty || transaction \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                setGraphic(new TransactionCard(transaction, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 1,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/controller/LoginController.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.ui.controller;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.model.user.Password.MAX_LENGTH_FOR_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.model.user.UserName.MAX_LENGTH_FOR_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.ui.controller.LoginControllerConstantMessage.EMPTY_PASSWORD_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.ui.controller.LoginControllerConstantMessage.EMPTY_STRING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.ui.controller.LoginControllerConstantMessage.EMPTY_USERNAME_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.ui.controller.LoginControllerConstantMessage.MAX_PASSWORD_LENGTH_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.ui.controller.LoginControllerConstantMessage.MAX_USERNAME_LENGTH_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.ui.controller.LoginControllerConstantMessage.WRONG_FORMAT_FOR_USERNAME_AND_PASSWORD_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.ui.controller.LoginControllerConstantMessage.WRONG_USERNAME_AND_PASSWORD_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.scene.control.PasswordField;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.authentication.LoginUtils;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.events.logic.ChangeHelpWindowEvent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.events.model.ChangeModelEvent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.events.model.InitInventoryListEvent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.events.ui.RestartUiEvent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.events.ui.StartUiEvent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.LoginInfoModel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.ui.LoginHelpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Manger event on LoginPage.fxml"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class LoginController {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    protected static LoginInfoModel loginInfoModel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static boolean firstTimeLogin;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private TextField usernameField;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private PasswordField passwordField;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private Label loginError;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private TextField commandBox;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private Text help;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private String commandInput;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LoginController.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public LoginController() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        username \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        password \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        firstTimeLogin \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * handle when help is clicked"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void handleHelpButtonClicked(MouseEvent event) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        openHelpWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Get the input from the login command box"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @param key key entered"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void handleInputFromCommandBox(KeyEvent key) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (key.getCode() \u003d\u003d KeyCode.ENTER) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            commandInput \u003d commandBox.getText ();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            setUserNameAndPassword();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            verifyLoginInfo ();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Set userName and password according to space"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * The string before the first space is username and after is password"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Error message when space is more than one"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void setUserNameAndPassword() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String[] splited \u003d commandInput.split(\"\\\\s\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        while (count \u003c splited.length) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                username \u003d splited[count];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            } else if (count \u003d\u003d 1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                password \u003d splited[count];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            } else if (count \u003e 1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                loginError.setText (WRONG_FORMAT_FOR_USERNAME_AND_PASSWORD_MESSAGE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * handle when user press enter on login textfield or passwordField"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @param key the key enter by user"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void handleEnterPressed(KeyEvent key) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (key.getCode() \u003d\u003d KeyCode.ENTER) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            getUsername();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            getPassword ();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            verifyLoginInfo ();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * handle event when Login is clicked"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @param clicked mouse event clicked"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void handleLoginButtonClick(ActionEvent clicked) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        getUsername();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        getPassword ();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        verifyLoginInfo ();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Close loginWindow when clicked"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void handleClose(MouseEvent e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Stage stageTheLabelBelongs \u003d (Stage) passwordField.getScene().getWindow();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        stageTheLabelBelongs.close();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Check for Login information such as username and password."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void verifyLoginInfo () {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!isFormatOfUserNameAndPasswordCorrect ()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (isLoginInfoCorrect ()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            changeStageToMainUi();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            clearLoginInput();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            clearLoginInput();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            loginError.setText(WRONG_USERNAME_AND_PASSWORD_MESSAGE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Check with storage about the account"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private boolean isLoginInfoCorrect () {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        UserName userName \u003d new UserName (this.username);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Password password \u003d new Password (this.password);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        LoginUtils loginUtils \u003d new LoginUtils (userName, password, loginInfoModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return loginUtils.isPasswordAndUserNameValid ();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns true if the input follow the format of UserName and Password."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private boolean isFormatOfUserNameAndPasswordCorrect () {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (isLengthOfUserNameInvalid ()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            loginError.setText(MAX_USERNAME_LENGTH_MESSAGE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (isLengthOfPasswordInvalid ()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            loginError.setText(MAX_PASSWORD_LENGTH_MESSAGE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!UserName.isValidUserName (username)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            loginError.setText(EMPTY_USERNAME_MESSAGE);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else if (!Password.isValidPassword (password)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            loginError.setText(EMPTY_PASSWORD_MESSAGE);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Return false if userName length is more than {@code MAX_LENGTH_FOR_USERNAME}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private boolean isLengthOfUserNameInvalid () {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return username.length () \u003e MAX_LENGTH_FOR_USERNAME;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Return false if password length is more than {@code MAX_LENGTH_FOR_PASSWORD}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private boolean isLengthOfPasswordInvalid () {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return password.length () \u003e MAX_LENGTH_FOR_PASSWORD;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Set back the ui into clean state"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void clearLoginInput() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        usernameField.setText (EMPTY_STRING);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        passwordField.setText (EMPTY_STRING);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        commandBox.setText (EMPTY_STRING);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginError.setText (EMPTY_STRING);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        username \u003d EMPTY_STRING;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        password \u003d EMPTY_STRING;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * gets the user name from textfield."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void getUsername() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        username \u003d usernameField.getText();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        username \u003d username.trim ();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * gets the password from passwordField."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void getPassword() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        password \u003d passwordField.getText();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        password \u003d password.trim ();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     *change the stage to main UI"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void changeStageToMainUi() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Stage primaryStage \u003d (Stage) passwordField.getScene().getWindow();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Stage stage \u003d new Stage ();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (firstTimeLogin) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            postEventAfterFirstTimeLogin (stage);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            setFirstTimeAsFalse ();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            postEventAfterRepeatLogin (stage);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void setFirstTimeAsFalse () {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        firstTimeLogin \u003d false;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void postEventAfterFirstTimeLogin (Stage stage) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        EventsCenter.getInstance ().post (new InitInventoryListEvent ());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        EventsCenter.getInstance ().post (new StartUiEvent (stage));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void postEventAfterRepeatLogin (Stage stage) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        EventsCenter.getInstance ().post (new ChangeModelEvent ());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        EventsCenter.getInstance ().post (new ChangeHelpWindowEvent ());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        EventsCenter.getInstance ().post (new RestartUiEvent (stage));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * pass in {@code LoginInfo} list from main app"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void getLoginInfoList (LoginInfoModel loginInfoModel) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.loginInfoModel \u003d loginInfoModel;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private void openHelpWindow() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        LoginHelpWindow loginHelpWindow \u003d new LoginHelpWindow ();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginHelpWindow.show ();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 275
    }
  },
  {
    "path": "src/main/resources/view/BatchListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u003cLabel fx:id\u003d\"batchId\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel fx:id\u003d\"batchQuantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$batchQuantity\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel fx:id\u003d\"batchDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$batchDate\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 33
    }
  },
  {
    "path": "src/main/resources/view/BatchListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    \u003cListView fx:id\u003d\"batchListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ".anchorPane{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#ff851B,80%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ".anchorPane .title{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-font-size: 26pt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\", sans-serif;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ".anchorPane .subtitle{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\", sans-serif;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ".anchorPane .content{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\", sans-serif;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-font-weight: normal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-opacity: 0.85;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#001f3f, 30%);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    background-color: derive(#001f3f, 30%); /* Used in the default.html file */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-base: transparent;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-control-inner-background: transparent;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#001f3f, 15%);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-border-color: transparent transparent transparent derive(#001f3f, 15%);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#001f3f, 15%);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#001f3f, 40%);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#ff851B, 80%);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#ff851B, 50%);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#0074D9, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-border-color: derive(#001f3f, 30%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     -fx-background-color: #001f3f;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     -fx-background-color: derive(#001f3f, 15%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     -fx-border-color: derive(#001f3f, 15%);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#001f3f, 30%);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#001f3f, 15%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-border-color: derive(#001f3f, 15%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#001f3f, 15%);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#001f3f, 15%);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#001f3f, 30%);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "  -fx-background-color: derive(#001f3f, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-border-color: derive(#001f3f, 30%), derive(#001f3f, 30%);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-text-fill: derive(#001f3f, 30%);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color:derive(#001f3f, 15%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#001f3f, 30%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#001f3f, 30%);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: #001f3f;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: derive(#001f3f, 80%);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: transparent derive(#001f3f, 30%) transparent derive(#001f3f, 30%);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-border-color: derive(#001f3f, 30%) derive(#001f3f, 30%) derive(#001f3f, 30%) derive(#001f3f, 30%);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background-color: transparent, derive(#001f3f, 30%), transparent, derive(#001f3f, 30%);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ".trans_type {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    -fx-background-color: #af929d;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 10,
      "Lunastryke": 58,
      "-": 318
    }
  },
  {
    "path": "src/main/resources/view/DrinkDetailPane.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003cAnchorPane styleClass\u003d\"anchorPane\" minHeight\u003d\"400.0\" minWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003cHBox layoutX\u003d\"20.0\" layoutY\u003d\"20.0\" prefHeight\u003d\"37.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"title\" text\u003d\"Select a drink to view details\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003cHBox layoutX\u003d\"20.0\" layoutY\u003d\"90.0\" prefHeight\u003d\"20.0\" prefWidth\u003d\"450.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel styleClass\u003d\"subtitle\" prefWidth\u003d\"320.0\" text\u003d\"Selling Price:\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel fx:id\u003d\"sellingPrice\" styleClass\u003d\"content\" prefWidth\u003d\"350.0\" text\u003d\"\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003cHBox layoutX\u003d\"20.0\" layoutY\u003d\"115.0\" prefHeight\u003d\"20.0\" prefWidth\u003d\"450.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel styleClass\u003d\"subtitle\" prefWidth\u003d\"320.0\" text\u003d\"Quantity in Stock:\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"content\" prefWidth\u003d\"350.0\" text\u003d\"\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003cHBox layoutX\u003d\"20.0\" layoutY\u003d\"165.0\" prefHeight\u003d\"37.0\" prefWidth\u003d\"453.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel styleClass\u003d\"subtitle\" prefWidth\u003d\"320.0\" text\u003d\"Cost Price:\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel fx:id\u003d\"costPrice\" styleClass\u003d\"content\" prefWidth\u003d\"350.0\" text\u003d\"\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003cHBox layoutX\u003d\"20.0\" layoutY\u003d\"190.0\" prefHeight\u003d\"37.0\" prefWidth\u003d\"453.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel styleClass\u003d\"subtitle\" prefWidth\u003d\"320.0\" text\u003d\"Batches in Stock:\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel fx:id\u003d\"batchesInStock\" styleClass\u003d\"content\" prefWidth\u003d\"350.0\" text\u003d\"\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003cHBox layoutX\u003d\"20.0\" layoutY\u003d\"215.0\" prefHeight\u003d\"37.0\" prefWidth\u003d\"453.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel styleClass\u003d\"subtitle\" prefWidth\u003d\"320.0\" text\u003d\"Earliest Batch Date:\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel fx:id\u003d\"earliestBatchDate\" styleClass\u003d\"content\" prefWidth\u003d\"350.0\" text\u003d\"\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003cHBox layoutX\u003d\"20.0\" layoutY\u003d\"240.0\" prefHeight\u003d\"37.0\" prefWidth\u003d\"453.0\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel styleClass\u003d\"subtitle\" prefWidth\u003d\"320.0\" text\u003d\"Latest Batch Date:\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel fx:id\u003d\"latestBatchDate\" styleClass\u003d\"content\" prefWidth\u003d\"350.0\" text\u003d\"\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 52,
      "-": 1
    }
  },
  {
    "path": "src/main/resources/view/DrinkListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003cLabel fx:id\u003d\"stock\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$stock\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003cLabel fx:id\u003d\"retailPrice\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$retailPrice\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cLabel fx:id\u003d\"costPrice\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$costPrice\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 35,
      "Lunastryke": 1
    }
  },
  {
    "path": "src/main/resources/view/DrinkListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox style\u003d\"-fx-background-color: #0074D9;\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \u003cListView fx:id\u003d\"drinkListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 7,
      "-": 1
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-background: derive(#001f3f, 30%);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/resources/view/LoginPage.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "content": "\u003c!--//@@author tianhang--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "\u003c?import javafx.scene.control.PasswordField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"407.0\" prefWidth\u003d\"589.0\" style\u003d\"-fx-background-color: #ffffff;\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.address.ui.controller.LoginController\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cTextField fx:id\u003d\"usernameField\" layoutX\u003d\"357.0\" layoutY\u003d\"197.0\" onKeyPressed\u003d\"#handleEnterPressed\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel layoutX\u003d\"373.0\" layoutY\u003d\"82.0\" text\u003d\"Welcome to\" textFill\u003d\"#ed0505\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                \u003cFont name\u003d\"Lucida Console\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel layoutX\u003d\"365.0\" layoutY\u003d\"115.0\" text\u003d\"Drink I/O\" textFill\u003d\"#3b33e2\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                \u003cFont name\u003d\"Marlett\" size\u003d\"33.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel layoutX\u003d\"357.0\" layoutY\u003d\"167.0\" text\u003d\"Username\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                \u003cFont name\u003d\"Arial Black\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImageView fitHeight\u003d\"394.0\" fitWidth\u003d\"200.0\" layoutX\u003d\"6.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel layoutX\u003d\"359.0\" layoutY\u003d\"234.0\" text\u003d\"Password\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                \u003cFont name\u003d\"Arial Black\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cButton layoutX\u003d\"391.0\" layoutY\u003d\"334.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleLoginButtonClick\" prefHeight\u003d\"26.0\" prefWidth\u003d\"54.0\" style\u003d\"-fx-background-color: #6fa1f2;\" text\u003d\"Login\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImageView fitHeight\u003d\"109.0\" fitWidth\u003d\"54.0\" layoutX\u003d\"509.0\" layoutY\u003d\"55.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" style\u003d\"-fx-rotate: -20;\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \u003cimage\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                \u003cImage url\u003d\"@../images/login_page_pic_2.jpg\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \u003c/image\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"loginError\" layoutX\u003d\"356.0\" layoutY\u003d\"293.0\" prefHeight\u003d\"18.0\" prefWidth\u003d\"156.0\" textFill\u003d\"#fa0c0c\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cPasswordField fx:id\u003d\"passwordField\" layoutX\u003d\"357.0\" layoutY\u003d\"263.0\" onKeyPressed\u003d\"#handleEnterPressed\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel layoutX\u003d\"576.0\" layoutY\u003d\"28.0\" onMouseClicked\u003d\"#handleClose\" prefHeight\u003d\"18.0\" prefWidth\u003d\"19.0\" text\u003d\"x\" textFill\u003d\"#e20505\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                \u003cFont size\u003d\"17.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"commandBox\" layoutY\u003d\"2.0\" onKeyReleased\u003d\"#handleInputFromCommandBox\" prefHeight\u003d\"26.0\" prefWidth\u003d\"600.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fitHeight\u003d\"119.0\" fitWidth\u003d\"64.0\" layoutX\u003d\"518.0\" layoutY\u003d\"174.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cImage url\u003d\"@../images/login_page_pic_1.jpg\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fitHeight\u003d\"370.0\" fitWidth\u003d\"314.0\" layoutY\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cImage url\u003d\"@../images/login_page_pic_4.jpg\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cText layoutX\u003d\"314.0\" layoutY\u003d\"45.0\" onMouseClicked\u003d\"#handleHelpButtonClicked\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"HELP\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "liu-tianhang": 39,
      "-": 25
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "          \u003cVBox fx:id\u003d\"drinkListView\" minWidth\u003d\"300\" prefWidth\u003d\"300\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003cStackPane fx:id\u003d\"drinkListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "          \u003cVBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003cStackPane fx:id\u003d\"drinkDetailPanePlaceholder\" VBox.vgrow\u003d\"NEVER\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                       SplitPane.resizableWithParent\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "              \u003cStackPane fx:id\u003d\"transactionsPanelPlaceholder\" VBox.vgrow\u003d\"NEVER\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                         SplitPane.resizableWithParent\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "          \u003cVBox fx:id\u003d\"batchListView\" minWidth\u003d\"280\" prefWidth\u003d\"280\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \u003cStackPane fx:id\u003d\"batchListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 12,
      "Lunastryke": 9,
      "-": 64
    }
  },
  {
    "path": "src/main/resources/view/TransactionListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/9\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003cLabel fx:id\u003d\"transType\" text\u003d\"transType\" styleClass\u003d\"trans_type\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003cLabel fx:id\u003d\"transDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$transDate\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003cLabel fx:id\u003d\"transQuantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$transQuantity\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            \u003cLabel fx:id\u003d\"transAmount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$transAmount\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 39
    }
  },
  {
    "path": "src/main/resources/view/TransactionsListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003cVBox style\u003d\"-fx-background-color: #0074D9;\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \u003cListView fx:id\u003d\"transactionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 8
    }
  },
  {
    "path": "src/test/seedu/address/analysis/PurchaseTransactionPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.analysis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.BUY_PEPSI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.SALE_PEPSI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class PurchaseTransactionPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void test_isPurchaseTransaction_returnsTrue() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        PurchaseTransactionPredicate predicate \u003d new PurchaseTransactionPredicate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(predicate.test(BUY_PEPSI));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void test_isNotPurchaseTransaction_returnsFalse() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        PurchaseTransactionPredicate predicate \u003d new PurchaseTransactionPredicate();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(predicate.test(SALE_PEPSI));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 22
    }
  },
  {
    "path": "src/test/seedu/address/analysis/SaleTransactionPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.analysis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.BUY_PEPSI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.SALE_PEPSI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class SaleTransactionPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void test_isSaleTransaction_returnsTrue() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        SaleTransactionPredicate predicate \u003d new SaleTransactionPredicate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(predicate.test(SALE_PEPSI));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void test_isNotSaleTransaction_returnsFalse() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        SaleTransactionPredicate predicate \u003d new SaleTransactionPredicate();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(predicate.test(BUY_PEPSI));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 22
    }
  },
  {
    "path": "src/test/seedu/address/analysis/TransactionInADayPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.analysis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.SALE_PEPSI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.testutil.transaction.TransactionBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TransactionInADayPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void test_isWithinDay_returnsTrue() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        TransactionInDayPredicate predicate \u003d new TransactionInDayPredicate();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Transaction transactionToday \u003d new TransactionBuilder().withDrink(\"Pepsi\").withDateToday()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withTransactionType(\"sale\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withAmountMoney(\"5.00\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withQuantity(\"40\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(predicate.test(transactionToday));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void test_isNotWithinDay_returnsFalse() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        TransactionInDayPredicate predicate \u003d new TransactionInDayPredicate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Transaction transaction \u003d new TransactionBuilder(SALE_PEPSI).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(predicate.test(transaction));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 31
    }
  },
  {
    "path": "src/test/seedu/address/analysis/TransactionInSevenDaysPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.analysis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.SALE_PEPSI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.testutil.transaction.TransactionBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TransactionInSevenDaysPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void test_isWithinWeek_returnsTrue() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        TransactionInSevenDaysPredicate predicate \u003d new TransactionInSevenDaysPredicate();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // NOTE: transaction date should be set to a more recent date"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Transaction transaction \u003d new TransactionBuilder().withDrink(\"Pepsi\").withDateToday()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withTransactionType(\"sale\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withAmountMoney(\"5.00\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withQuantity(\"40\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withDate(\"9/11/2018\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(predicate.test(transaction));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void test_isNotWithinWeek_returnsFalse() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        TransactionInSevenDaysPredicate predicate \u003d new TransactionInSevenDaysPredicate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Transaction transaction \u003d new TransactionBuilder(SALE_PEPSI)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withDate(\"1/11/2018\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(predicate.test(transaction));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 34
    }
  },
  {
    "path": "src/test/seedu/address/analysis/TransactionWithinThirtyDaysPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.analysis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.SALE_PEPSI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.testutil.transaction.TransactionBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TransactionWithinThirtyDaysPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void test_isWithinMonth_returnsTrue() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        TransactionInThirtyDaysPredicate predicate \u003d new TransactionInThirtyDaysPredicate();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // NOTE: transaction date should be set to a more recent date"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Transaction transaction \u003d new TransactionBuilder().withDrink(\"Pepsi\").withDateToday()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withTransactionType(\"sale\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withAmountMoney(\"5.00\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withQuantity(\"40\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withDate(\"27/10/2018\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(predicate.test(transaction));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void test_isNotWithinMonth_returnsFalse() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        TransactionInThirtyDaysPredicate predicate \u003d new TransactionInThirtyDaysPredicate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Transaction transaction \u003d new TransactionBuilder(SALE_PEPSI)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withDate(\"1/10/2018\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(predicate.test(transaction));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 34
    }
  },
  {
    "path": "src/test/seedu/address/authentication/LoginUtilsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.authentication;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.LoginInfoManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class LoginUtilsTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private LoginUtils loginUtilsUserNameEmpty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private LoginUtils loginUtilsUserPasswordEmpty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private LoginUtils validUser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void typicalAccount() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        UserName correctUserName \u003d new UserName (\"tester\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        UserName wrongUserName \u003d new UserName (\"tester2\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Password correctPassword \u003d new Password(\"123\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Password wrongPassword \u003d new Password (\"1234\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginUtilsUserNameEmpty \u003d new LoginUtils (wrongUserName, correctPassword , new LoginInfoManager ());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginUtilsUserPasswordEmpty \u003d new LoginUtils (correctUserName, wrongPassword , new LoginInfoManager ());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        validUser \u003d new LoginUtils (correctUserName, correctPassword , new LoginInfoManager ());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void isPasswordAndUserNameValidTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertFalse (loginUtilsUserNameEmpty.isPasswordAndUserNameValid ());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertFalse (loginUtilsUserPasswordEmpty.isPasswordAndUserNameValid ());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertTrue (validUser.isPasswordAndUserNameValid ());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 38
    }
  },
  {
    "path": "src/test/seedu/address/authentication/PasswordUtilsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package authentication;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.authentication.PasswordUtils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class PasswordUtilsTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void generateSecurePasswordTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String expected \u003d \"Gcf70h4aWQ1T9NMxE03XM3nq3nCmFGihnO4xMzHMgP0\u003d\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String actual \u003d PasswordUtils.generateSecurePassword(\"123\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        expected \u003d \"HhaNvzTsVYwS/x/zbYXlLOE3ETMXQgllqrDaJY9PD/U\u003d\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        actual \u003d PasswordUtils.generateSecurePassword (\"myPassword123\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        expected \u003d \"Xk2lFYYrsGuPMF6iOp/AwvLyvR17BWMcpaNcyo6ziGo\u003d\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        actual \u003d PasswordUtils.generateSecurePassword (\"ePYHc~dS*)8$+V-\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void verifyUserPasswordTest() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        //expect to pass"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        boolean result \u003d PasswordUtils.verifyUserPassword (\"myPassword123\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                \"HhaNvzTsVYwS/x/zbYXlLOE3ETMXQgllqrDaJY9PD/U\u003d\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertTrue (result);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        result \u003d PasswordUtils.verifyUserPassword (\"ePYHc~dS*)8$+V-\", \"Xk2lFYYrsGuPMF6iOp/AwvLyvR17BWMcpaNcyo6ziGo\u003d\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertTrue (result);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        //expected to fail"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        result \u003d PasswordUtils.verifyUserPassword (\"\", \"Xk2lFYYrsGuPMF6iOp/AwvLyvR17BWMcpaNcyo6ziGo\u003d\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        result \u003d PasswordUtils.verifyUserPassword (\"ePYHc~dS*)8$+V-\", \"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        result \u003d PasswordUtils.verifyUserPassword (\"ePYHc~dS*)8$+V-\", \"Xk2lFYYrsGuPMF6iOp/AwvLyvR17BWMcpaNcyo6ziGo\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 47,
      "-": 1
    }
  },
  {
    "path": "src/test/seedu/address/logic/commands/AddDrinkCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.testutil.drinks.TypicalDrinks.FNN_GRAPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.testutil.inventory.TypicalInventoryList.getTypicalInventoryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.manager.AddDrinkCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.LoginInfoManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.manager.ManagerModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.manager.ManagerModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.testutil.drinks.DrinkBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.testutil.inventory.InventoryListBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class AddDrinkCommandIntegrationTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private ManagerModel acutalManagerModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        InventoryListBuilder inventoryListBuilder \u003d new InventoryListBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        inventoryListBuilder.withDrink (FNN_GRAPE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        acutalManagerModel \u003d new ManagerModelManager (getTypicalInventoryList(), new UserPrefs (),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                        new LoginInfoManager (), new TransactionList ());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void execute_newDrink_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Drink validDrink \u003d new DrinkBuilder().build ();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        InventoryListBuilder inventoryListBuilder \u003d new InventoryListBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ManagerModel expectedModel \u003d new ManagerModelManager (getTypicalInventoryList(), new UserPrefs (),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                        new LoginInfoManager (), new TransactionList ());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        expectedModel.addDrink (validDrink);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertCommandSuccess(new AddDrinkCommand (validDrink), acutalManagerModel, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                String.format(AddDrinkCommand.MESSAGE_SUCCESS, validDrink.toString ()), expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Drink drinkInList \u003d acutalManagerModel.getFilteredDrinkList ().get(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertCommandFailure(new AddDrinkCommand(drinkInList), acutalManagerModel, commandHistory,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                AddDrinkCommand.MESSAGE_DUPLICATE_DRINK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 57
    }
  },
  {
    "path": "src/test/seedu/address/logic/commands/AddDrinkCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.getTypicalTransactions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.LoginInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.manager.AddDrinkCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.InventoryList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ReadOnlyInventoryList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.manager.ManagerModel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.testutil.drinks.DrinkBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class AddDrinkCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        new AddDrinkCommand (null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void execute_drinkAcceptedByManagerModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ManagerModelStubAcceptingPersonAdded modelStub \u003d new ManagerModelStubAcceptingPersonAdded ();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Drink validDrink \u003d new DrinkBuilder ().build ();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        CommandResult commandResult \u003d new AddDrinkCommand(validDrink).execute (modelStub, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertEquals(String.format(AddDrinkCommand.MESSAGE_SUCCESS, validDrink.toString ()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                    commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertEquals (Arrays.asList (validDrink), modelStub.drinksAdded);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Drink validDrink \u003d new DrinkBuilder ().build ();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        AddDrinkCommand addDrinkCommand \u003d new AddDrinkCommand (validDrink);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ManagerModelStub modelStub \u003d new ManagerModelStubWithDrink(validDrink);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        thrown.expectMessage(AddDrinkCommand.MESSAGE_DUPLICATE_DRINK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        addDrinkCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Drink coke \u003d new DrinkBuilder().withName (\"coca cola\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Drink pepsi \u003d new DrinkBuilder().withName (\"pepsi\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        AddDrinkCommand addCokeCommand \u003d new AddDrinkCommand(coke);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        AddDrinkCommand addPepsiCommand \u003d new AddDrinkCommand(pepsi);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertTrue(addCokeCommand.equals(addCokeCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        AddDrinkCommand addCokeCommandCopy \u003d new AddDrinkCommand(coke);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertTrue(addCokeCommand.equals(addCokeCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertFalse(addCokeCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertFalse(addCokeCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertFalse(addCokeCommand.equals(addPepsiCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private class ManagerModelStub implements ManagerModel {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void createNewAccount (LoginInfo loginInfo) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void deleteAccount (UserName userName) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void resetData (ReadOnlyInventoryList newData) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public ReadOnlyInventoryList getInventoryList () {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public boolean hasDrink (Drink drink) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void deleteDrink (Drink target) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void addDrink (Drink drink) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public ObservableList\u003cDrink\u003e getFilteredDrinkList () {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void updateFilteredDrinkList (Predicate\u003cDrink\u003e predicate) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public ReadOnlyTransactionList getTransactionList () {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return FXCollections.observableList(getTypicalTransactions());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void updateSellingPrice(Drink drinkToEdit, Price newSellingPrice) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void updateCostPrice(Drink drinkToEdit, Price newCostPrice) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void updateTags(Drink drinkToEdit, Set\u003cTag\u003e newTags) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void changePassword (UserName userName, Password newHashedPassword) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public LoginInfo getLoginInfo (UserName userName) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public boolean isUserNameExist (UserName userName) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * A model stub that contains a single drink"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private class ManagerModelStubWithDrink extends ManagerModelStub {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        private final Drink drink;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ManagerModelStubWithDrink(Drink drink) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            requireNonNull(drink);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            this.drink \u003d drink;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public boolean hasDrink (Drink drink) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            requireNonNull (drink);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return this.drink.isSameDrink (drink);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * A model stub that always accept the drink being added."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public class ManagerModelStubAcceptingPersonAdded extends ManagerModelStub {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        final ArrayList\u003cDrink\u003e drinksAdded \u003d new ArrayList\u003c\u003e ();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public boolean hasDrink (Drink drink) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            requireNonNull (drink);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return drinksAdded.stream ().anyMatch (drink:: isSameDrink);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void addDrink (Drink drink) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            requireNonNull (drink);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            drinksAdded.add (drink);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public ReadOnlyInventoryList getInventoryList () {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return new InventoryList ();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 228,
      "-": 1
    }
  },
  {
    "path": "src/test/seedu/address/logic/commands/ChangePasswordCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.testutil.user.TypicalAccount.getTypicalSingleAccount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.CurrentUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.user.ChangePasswordCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.InventoryList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.AuthenticationLevel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.manager.ManagerModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.manager.ManagerModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class ChangePasswordCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private ManagerModel model \u003d new ManagerModelManager (new InventoryList () , new UserPrefs (),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            getTypicalSingleAccount(), new TransactionList ());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        new ChangePasswordCommand (null, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void execute_changePassword_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ChangePasswordCommand changePasswordCommand \u003d new ChangePasswordCommand (new Password (\"123\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                                                    new Password (\"1234\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        CurrentUser.setLoginInfo (new UserName (\"tester\"), new AuthenticationLevel (\"ADMIN\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        CommandResult commandResult \u003d changePasswordCommand.execute (model, commandHistory);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertEquals(String.format (ChangePasswordCommand.MESSAGE_SUCCESS, \"1234\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void execute_changePassword_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ChangePasswordCommand changePasswordCommand \u003d new ChangePasswordCommand (new Password (\"wrongPassword\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                new Password (\"1234\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        CurrentUser.setLoginInfo (new UserName (\"tester\"), new AuthenticationLevel (\"ADMIN\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        CommandResult commandResult \u003d changePasswordCommand.execute (model, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertEquals(ChangePasswordCommand.MESSAGE_WRONG_PASSWORD,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                        commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 54
    }
  },
  {
    "path": "src/test/seedu/address/logic/commands/CreateAccountCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.getTypicalTransactions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.LoginInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.user.CreateAccountCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ReadOnlyInventoryList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.manager.ManagerModel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.testutil.user.AccountBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class CreateAccountCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        new CreateAccountCommand (null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void execute_accountAcceptedByManagerModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ManagerModelStubAcceptingAccountAdded modelStub \u003d new ManagerModelStubAcceptingAccountAdded ();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        LoginInfo validAccount \u003d new AccountBuilder ().build ();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        CommandResult commandResult \u003d new CreateAccountCommand (validAccount).execute (modelStub, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertEquals(CreateAccountCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertEquals (Arrays.asList (validAccount), modelStub.loginInfoArrayList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private class ManagerModelStub implements ManagerModel {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void createNewAccount (LoginInfo loginInfo) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void deleteAccount (UserName userName) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void resetData (ReadOnlyInventoryList newData) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public ReadOnlyInventoryList getInventoryList () {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public boolean hasDrink (Drink drink) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void deleteDrink (Drink target) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void addDrink (Drink drink) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public ObservableList\u003cDrink\u003e getFilteredDrinkList () {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void updateFilteredDrinkList (Predicate\u003cDrink\u003e predicate) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public ReadOnlyTransactionList getTransactionList () {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return FXCollections.observableList(getTypicalTransactions());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void updateSellingPrice(Drink drinkToEdit, Price newSellingPrice) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void updateCostPrice(Drink drinkToEdit, Price newCostPrice) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void updateTags(Drink drinkToEdit, Set\u003cTag\u003e newTags) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void changePassword (UserName userName, Password newHashedPassword) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public LoginInfo getLoginInfo (UserName userName) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public boolean isUserNameExist (UserName userName) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * A model stub that always accept the account being added."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public class ManagerModelStubAcceptingAccountAdded extends CreateAccountCommandTest.ManagerModelStub {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        final ArrayList\u003cLoginInfo\u003e loginInfoArrayList \u003d new ArrayList\u003c\u003e ();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public boolean isUserNameExist (UserName userName) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            requireNonNull (userName);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            LoginInfo loginInfo \u003d new AccountBuilder ().withUserName (userName).build ();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return loginInfoArrayList.contains (loginInfo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void createNewAccount (LoginInfo loginInfo) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            requireNonNull (loginInfo);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            loginInfoArrayList.add (loginInfo);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 177
    }
  },
  {
    "path": "src/test/seedu/address/logic/commands/DeleteAccountCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.getTypicalTransactions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.testutil.user.TypicalAccount.ADMIN_ACCOUNT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.LoginInfo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.commands.user.DeleteAccountCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ReadOnlyInventoryList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.manager.ManagerModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class DeleteAccountCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        new DeleteAccountCommand (null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void execute_accountAcceptedByManagerModel_deleteSuccessful() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ManagerModelStubAcceptingAccountAdded modelStub \u003d new ManagerModelStubAcceptingAccountAdded ();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        LoginInfo validAccount \u003d ADMIN_ACCOUNT;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        modelStub.createNewAccount (validAccount);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        CommandResult commandResult \u003d new DeleteAccountCommand (validAccount.getUserName ())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                            .execute (modelStub, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertEquals(DeleteAccountCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertTrue(modelStub.loginInfoArrayList.isEmpty ());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void execute_accountNonExistInManagerModel_deleteFail() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ManagerModelStubAcceptingAccountAdded modelStub \u003d new ManagerModelStubAcceptingAccountAdded ();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        LoginInfo validAccount \u003d ADMIN_ACCOUNT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        CommandResult commandResult \u003d new DeleteAccountCommand (validAccount.getUserName ())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                            .execute (modelStub, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertEquals(DeleteAccountCommand.MESSAGE_USERNAME_DO_NOT_EXIST, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private class ManagerModelStub implements ManagerModel {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void createNewAccount (LoginInfo loginInfo) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void deleteAccount (UserName userName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void resetData (ReadOnlyInventoryList newData) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public ReadOnlyInventoryList getInventoryList () {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public boolean hasDrink (Drink drink) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void deleteDrink (Drink target) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void addDrink (Drink drink) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public ObservableList\u003cDrink\u003e getFilteredDrinkList () {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void updateFilteredDrinkList (Predicate\u003cDrink\u003e predicate) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public ReadOnlyTransactionList getTransactionList () {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return FXCollections.observableList(getTypicalTransactions());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void updateSellingPrice(Drink drinkToEdit, Price newSellingPrice) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void updateCostPrice(Drink drinkToEdit, Price newCostPrice) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void updateTags(Drink drinkToEdit, Set\u003cTag\u003e newTags) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void changePassword (UserName userName, Password newHashedPassword) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public LoginInfo getLoginInfo (UserName userName) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public boolean isUserNameExist (UserName userName) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * A model stub that contains a single drink"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private class ManagerModelStubWithAccount extends DeleteAccountCommandTest.ManagerModelStub {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        private final LoginInfo loginInfo;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ManagerModelStubWithAccount(LoginInfo loginInfo) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            requireNonNull(loginInfo);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            this.loginInfo \u003d loginInfo;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public boolean isUserNameExist (UserName userName) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            requireNonNull (loginInfo);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return this.loginInfo.isUserNameMatched (userName);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * A model stub that always accept the drink being added."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public class ManagerModelStubAcceptingAccountAdded extends DeleteAccountCommandTest.ManagerModelStub {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        final ArrayList\u003cLoginInfo\u003e loginInfoArrayList \u003d new ArrayList\u003c\u003e ();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public boolean isUserNameExist (UserName userName) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            requireNonNull (userName);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            LoginInfo loginInfo \u003d ADMIN_ACCOUNT;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return loginInfoArrayList.contains (loginInfo);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void createNewAccount (LoginInfo loginInfo) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            requireNonNull (loginInfo);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            loginInfoArrayList.add (loginInfo);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        public void deleteAccount(UserName userName) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            requireNonNull (userName);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            loginInfoArrayList.remove (0);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 211,
      "-": 1
    }
  },
  {
    "path": "src/test/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.testutil.drinks.TypicalDrinks.getTypicalInventoryList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.testutil.index.TypicalIndexes.INDEX_FIRST_DRINK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.showDrinkAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.LoginInfoManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        model \u003d new ModelManager(getTypicalInventoryList(), new UserPrefs(), new LoginInfoManagerStub(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                new TransactionListStub());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getInventoryList(), new UserPrefs(), new LoginInfoManagerStub(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                new TransactionListStub());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                String.format(ListCommand.MESSAGE_SUCCESS, model.getInventoryList().toString()), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        showDrinkAtIndex(model, INDEX_FIRST_DRINK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                String.format(ListCommand.MESSAGE_SUCCESS, model.getInventoryList().toString()), expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private class LoginInfoManagerStub extends LoginInfoManager {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        public LoginInfoManagerStub() {}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private class TransactionListStub extends TransactionList {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        public TransactionListStub() {}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 55
    }
  },
  {
    "path": "src/test/seedu/address/model/InventoryListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.drinks.TypicalDrinks.GREEN_TEA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.drinks.TypicalDrinks.PEPSI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.drinks.TypicalDrinks.getTypicalInventoryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_COST_PRICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.exceptions.DuplicateDrinkException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.drinks.DrinkBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class InventoryListTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final InventoryList inventoryList \u003d new InventoryList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertEquals(Collections.emptyList(), inventoryList.getDrinkList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        inventoryList.resetData(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void resetData_withValidReadOnlyInventoryList_replacesData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        InventoryList newData \u003d getTypicalInventoryList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        inventoryList.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertEquals(newData, inventoryList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void resetData_withDuplicateDrinks_throwsDuplicateDrinkException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // Two drinks with the same identity field (name)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink editedPepsi \u003d new DrinkBuilder (PEPSI).withCostPrice(VALID_DRINK_COST_PRICE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        List\u003cDrink\u003e newDrinks \u003d Arrays.asList(PEPSI, editedPepsi);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        InventoryListStub newData \u003d new InventoryListStub(newDrinks);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(DuplicateDrinkException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        inventoryList.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void hasDrink_nullDrink_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        inventoryList.hasDrink(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void hasDrink_drinkNotInInventoryList_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(inventoryList.hasDrink(PEPSI));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void hasDrink_drinkInInventoryList_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        inventoryList.addDrink(PEPSI);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(inventoryList.hasDrink(PEPSI));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void hasDrink_drinkithSameIdentityFieldsInInventoryList_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        inventoryList.addDrink(PEPSI);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink editedPepsi \u003d new DrinkBuilder(GREEN_TEA).withName(\"Pepsi\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(inventoryList.hasDrink(editedPepsi));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void getDrinkList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        inventoryList.getDrinkList().remove(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * A stub ReadOnlyInventoryList whose drink list can violate interface constraints."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private static class InventoryListStub implements ReadOnlyInventoryList {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        private final ObservableList\u003cDrink\u003e drinks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        InventoryListStub(Collection\u003cDrink\u003e drinks) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            this.drinks.setAll(drinks);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        public ObservableList\u003cDrink\u003e getDrinkList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return drinks;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 101,
      "-": 8
    }
  },
  {
    "path": "src/test/seedu/address/model/drink/DateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "//@@author Lunastryke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "class DateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Date (null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void constructor_nonExistingDate_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        String invalidDate \u003d \"30/2/2018\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Assert.assertThrows(DateTimeParseException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void constructor_emptyField_accepted() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date defaultDate \u003d new Date();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertTrue(defaultDate.getDate().equals(localDate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void isValidDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // invalid date string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isValidDate(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isValidDate(\"*1/10/2018\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isValidDate(\"2018/10/15\")); // date format YYYY/MM/DD"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isValidDate(\"2018/15/10\")); // date format YYYY/DD/MM"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isValidDate(\"10/15/2018\")); // date format MM/DD/YYYY"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isValidDate(\"15/10/18\")); // date format DD/MM/YY"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isValidDate(\"15-10-2018\")); // other date separators"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // valid date string"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertTrue(Date.isValidDate(\"30/02/2018\")); // Non-existing date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertTrue(Date.isValidDate(\"15/10/2018\")); // date format DD/MM/YYYY"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertTrue(Date.isValidDate(\"15/1/2018\")); // date format DD/M/YYYY"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertTrue(Date.isValidDate(\"1/10/2018\")); // date format D/MM/YYYY"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertTrue(Date.isValidDate(\"1/1/2018\")); // date format D/M/YYYY"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void isExistingDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isExistingDate(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isExistingDate(\"\")); // empty string"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isExistingDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isExistingDate(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isExistingDate(\"*1/10/2018\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isExistingDate(\"2018/10/15\")); // date format YYYY/MM/DD"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isExistingDate(\"2018/15/10\")); // date format YYYY/DD/MM"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isExistingDate(\"10/15/2018\")); // date format MM/DD/YYYY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isExistingDate(\"15/10/18\")); // date format DD/MM/YY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isExistingDate(\"15/1/2018\")); // date format DD/M/YYYY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isExistingDate(\"1/1/2018\")); // date format D/M/YYYY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isExistingDate(\"15-10-2018\")); // other date separators"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(Date.isExistingDate(\"30/02/2018\")); // Non-existing date"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertTrue(Date.isExistingDate(\"15/10/2018\")); // date format DD/MM/YYYY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertTrue(Date.isExistingDate(\"1/10/2018\")); // date format D/MM/YYYY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void isBefore() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        String validDate \u003d \"22/10/2018\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date date \u003d new Date(validDate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date dateBefore \u003d new Date(\"21/10/2018\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date dateAfter \u003d new Date(\"23/10/2018\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date dateEquals \u003d new Date(validDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // not before"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(date.isBefore(dateBefore));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(date.isBefore(dateEquals));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // is before"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertTrue(date.isBefore(dateAfter));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void isAfter() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        String validDate \u003d \"22/10/2018\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date date \u003d new Date(validDate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date dateBefore \u003d new Date(\"21/10/2018\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date dateAfter \u003d new Date(\"23/10/2018\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date dateEquals \u003d new Date(validDate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // not after"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(date.isAfter(dateAfter));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(date.isAfter(dateEquals));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // is after"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertTrue(date.isAfter(dateBefore));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void getDateSixDaysBefore() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        LocalDate expectedSixDaysBeforeDate \u003d currentDate.getDate().minusDays(6);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date modifiedDate \u003d new Date();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date actualSixDaysBeforeDate \u003d modifiedDate.getDateSixDaysBefore();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(expectedSixDaysBeforeDate, actualSixDaysBeforeDate.getDate());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void getDateThirtyDaysBefore() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        LocalDate expectedThirtyDaysBeforeDate \u003d currentDate.getDate().minusDays(29);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date modifiedDate \u003d new Date();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date actualThirtyDaysBeforeDate \u003d modifiedDate.getDateTwentyNineDaysBefore();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(expectedThirtyDaysBeforeDate, actualThirtyDaysBeforeDate.getDate());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void isBetween_notBetweenTwoDates_returnsFalse() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date dateToTest \u003d new Date().getDateTwentyNineDaysBefore();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date endDate \u003d new Date();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date startDate \u003d new Date().getDateSixDaysBefore();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(dateToTest.isBetween(startDate, endDate));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void isBetween_isBetweenTwoDates_returnsTrue() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date dateToTest \u003d new Date().getDateSixDaysBefore();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date endDate \u003d new Date();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Date startDate \u003d new Date().getDateTwentyNineDaysBefore();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertTrue(dateToTest.isBetween(startDate, endDate));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 156
    }
  },
  {
    "path": "src/test/seedu/address/model/drink/DrinkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.drinks.TypicalDrinks.FNN_GRAPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.drinks.TypicalDrinks.FNN_GRAPE_COPY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_COST_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_NAME_COCA_COLA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_RETAIL_PRICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_TAG_SOFTDRINK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_TAG_TEA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.drinks.DrinkBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class DrinkTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink drink \u003d new DrinkBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drink.getTags().remove(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void isSameDrink() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(FNN_GRAPE.isSameDrink(FNN_GRAPE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // same name, different attributes -\u003e return true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(FNN_GRAPE.isSameDrink(FNN_GRAPE_COPY));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(FNN_GRAPE.isSameDrink(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(FNN_GRAPE.equals(FNN_GRAPE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // same values -\u003e return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink grapeTrueCopy \u003d new DrinkBuilder(FNN_GRAPE).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(FNN_GRAPE.equals(grapeTrueCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // not a drink object (different type) -\u003e return false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(FNN_GRAPE.equals(3));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(FNN_GRAPE.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // different name, else same attributes -\u003e return false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink editedGrape \u003d new DrinkBuilder(FNN_GRAPE).withName(VALID_DRINK_NAME_COCA_COLA).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(FNN_GRAPE.equals(editedGrape));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // different retail price, else same attributes -\u003e return false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        editedGrape \u003d new DrinkBuilder(FNN_GRAPE).withRetailPrice(VALID_DRINK_RETAIL_PRICE).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(FNN_GRAPE.equals(editedGrape));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // different cost price, else same attributes -\u003e return false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        editedGrape \u003d new DrinkBuilder(FNN_GRAPE).withCostPrice(VALID_DRINK_COST_PRICE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(FNN_GRAPE.equals(editedGrape));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        //TODO: Need fix this"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // different quantity, else same attributes -\u003e return false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        //        editedGrape \u003d new DrinkBuilder(FNN_GRAPE).withQuantity(VALID_DRINK_QUANTITY).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertFalse(FNN_GRAPE.equals(editedGrape));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // different tags, else same attributes -\u003e return false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        editedGrape \u003d new DrinkBuilder(FNN_GRAPE).withTags(VALID_DRINK_TAG_TEA, VALID_DRINK_TAG_SOFTDRINK).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(FNN_GRAPE.equals(editedGrape));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    //public void increaseQuantity_"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 73,
      "-": 13
    }
  },
  {
    "path": "src/test/seedu/address/model/drink/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.drinks.DrinkBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // different drink -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Coke\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(predicate.test(new DrinkBuilder().withName(\"Coke Zero\").build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Coke\", \"Zero\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(predicate.test(new DrinkBuilder().withName(\"Coke Zero\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Coke\", \"Lemon\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(predicate.test(new DrinkBuilder().withName(\"Coke Zero\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"cOkE\", \"lemON\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(predicate.test(new DrinkBuilder().withName(\"Coke Lemon\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(predicate.test(new DrinkBuilder().withName(\"Coke\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Pepsi\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(predicate.test(new DrinkBuilder().withName(\"Coke\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // Keywords match retail, cost prices, quantity, tags, but different name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"1.20\", \"5.40\", \"50\", \"Pepsi\", \"softDrink\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(predicate.test(new DrinkBuilder().withName(\"Coke\").withCostPrice(\"1.20\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withRetailPrice(\"5.40\").withQuantity(\"50\").withTags(\"softDrink\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 73,
      "-": 1
    }
  },
  {
    "path": "src/test/seedu/address/model/drink/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name (null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Name.isValidName(\"coke*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(Name.isValidName(\"pokka ice lemon tea\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(Name.isValidName(\"100\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(Name.isValidName(\"100 plus\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(Name.isValidName(\"Caps Pokka\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(Name.isValidName(\"Heaven and Earth Green Tea with Honey Lemon\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 38,
      "-": 2
    }
  },
  {
    "path": "src/test/seedu/address/model/drink/PriceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_COST_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_RETAIL_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Price (null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        String invalidPrice \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Price(\"bla\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setValue_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Price price \u003d new Price(VALID_DRINK_COST_PRICE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        price.setValue(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setValue_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Price price \u003d new Price(VALID_DRINK_COST_PRICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        price.setValue(\"bla\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setValue_validPrice_checkValueSet() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Price price \u003d new Price(VALID_DRINK_COST_PRICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        price.setValue(VALID_DRINK_RETAIL_PRICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Price otherPrice \u003d new Price(VALID_DRINK_RETAIL_PRICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertEquals(price, otherPrice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void isValidPrice() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // null price"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // invalid prices"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Price.isValidPrice(\"\")); // empty string"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Price.isValidPrice(\" \")); // spaces only"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9.1234395893\")); // more than 2 decimal digits"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Price.isValidPrice(\".25\")); // only decimal digits"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Price.isValidPrice(\".\")); // only decimal dot"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Price.isValidPrice(\"12.\")); // nothing after decimal dot"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Price.isValidPrice(\"price\")); // non-numeric"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Price.isValidPrice(\"123456789023456789012345678901234567890123456789012345678901234567890\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // very large prices, more than Float.MAX_VALUE"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Price.isValidPrice(\"-1.25\")); // negative values"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // valid prices"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(Price.isValidPrice(\"0\")); // 0"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(Price.isValidPrice(\"9\")); // 1 digit"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(Price.isValidPrice(\"9.2\")); // 1 digit with 1 decimal digit"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(Price.isValidPrice(\"9.31\")); // 1 digit with 2 decimal digits"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(Price.isValidPrice(\"92231.23\")); // reasonably large prices, less than Float.MAX_VALUE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 77,
      "-": 4
    }
  },
  {
    "path": "src/test/seedu/address/model/drink/QuantityTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class QuantityTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Quantity (null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        String invalidQuantity \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Quantity(invalidQuantity));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void isValidQuantity() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // null quantity"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Quantity.isValidQuantity(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // invalid quantities"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"-1\")); // \"negative\" quantity, with minus sign"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"bla\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"2948j3d\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"234 323\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"2147483648\")); // 2^31, integer overflow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"911\")); // only numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"93121534\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"2147483647\")); // large quantities, 2^31 - 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 39,
      "-": 3
    }
  },
  {
    "path": "src/test/seedu/address/model/drink/UniqueBatchListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "//@@author Lunastryke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static seedu.address.testutil.batch.TypicalBatches.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.exceptions.BatchNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.exceptions.DuplicateBatchException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.exceptions.EmptyBatchListException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.exceptions.InsufficientQuantityException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.testutil.batch.TypicalBatches;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "class UniqueBatchListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private final UniqueBatchList uniqueBatchList \u003d new UniqueBatchList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void contains_nullBatch_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueBatchList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void contains_batchNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        UniqueBatchList uniqueBatchList \u003d new UniqueBatchList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertFalse(uniqueBatchList.contains(COKE2));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void contains_batchInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.addBatch(COKE2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertTrue(uniqueBatchList.contains(COKE2));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void add_nullBatch_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueBatchList.addBatch(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void add_duplicateBatch_throwsDuplicateBatchException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.addBatch(COKE4);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Assert.assertThrows(DuplicateBatchException.class, () -\u003e uniqueBatchList.addBatch(COKE7));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void addSameDateBatch() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.addBatch(COKE4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.addBatch(COKE9);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(uniqueBatchList.getNumberBatches(), 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void setBatch_nullTargetBatch_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueBatchList.setBatch(null, COKE2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void setBatch_nullEditedBatch_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueBatchList.setBatch(COKE2, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void setBatch_targetBatchNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Assert.assertThrows(BatchNotFoundException.class, () -\u003e uniqueBatchList.setBatch(COKE2, COKE2));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void setBatch_editedBatchIsSameBatch_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.addBatch(COKE2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.setBatch(COKE2, COKE2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        UniqueBatchList expectedUniqueBatchList \u003d new UniqueBatchList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        expectedUniqueBatchList.addBatch(COKE2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(expectedUniqueBatchList, uniqueBatchList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void sortBatches() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // Sets uniqueBatchList"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.setBatches(TypicalBatches.getTypicalUniqueBatchList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // Calls sort method to sort batch list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.sortBatches();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        // Checks for order of batches"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(uniqueBatchList.getBatch(0), COKE6);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(uniqueBatchList.getBatch(1), COKE1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(uniqueBatchList.getBatch(2), COKE2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(uniqueBatchList.getBatch(3), COKE3);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(uniqueBatchList.getBatch(4), COKE4);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(uniqueBatchList.getBatch(5), COKE5);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void updateTotalQuantity() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.setBatches(TypicalBatches.getTypicalUniqueBatchList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.updateTotalQuantity();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(uniqueBatchList.getTotalQuantity(), new Quantity(\"310\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void clearEmptyBatches() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.setBatches(TypicalBatches.getTypicalUniqueBatchList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.addBatch(COKE10);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(uniqueBatchList.getNumberBatches(), 7);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.clearEmptyBatches();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(uniqueBatchList.getNumberBatches(), 6);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void getEarliestBatch() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.setBatches(TypicalBatches.getTypicalUniqueBatchList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(uniqueBatchList.getEarliestBatch(), COKE6);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void getLatestBatch() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.setBatches(TypicalBatches.getTypicalUniqueBatchList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(uniqueBatchList.getLatestBatch(), COKE5);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void getEarliestBatchDate() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.setBatches(TypicalBatches.getTypicalUniqueBatchList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(uniqueBatchList.getEarliestBatchDate(), COKE6.getBatchDate());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void getLatestBatchDate() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.setBatches(TypicalBatches.getTypicalUniqueBatchList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertEquals(uniqueBatchList.getLatestBatchDate(), COKE5.getBatchDate());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void batchSameDate() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.setBatches(TypicalBatches.getTypicalUniqueBatchList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        assertTrue(uniqueBatchList.batchSameDate(COKE9));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void updateBatchTransaction_throwsInsufficientQuantityException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        uniqueBatchList.setBatches(TypicalBatches.getTypicalUniqueBatchList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Assert.assertThrows(InsufficientQuantityException.class,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                () -\u003e uniqueBatchList.updateBatchTransaction(new Quantity(\"400\")));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    void updateBatchTransaction_throwsEmptyBatchListException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        Assert.assertThrows(EmptyBatchListException.class,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                () -\u003e uniqueBatchList.updateBatchTransaction(new Quantity(\"400\")));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 162
    }
  },
  {
    "path": "src/test/seedu/address/model/drink/UniqueDrinkListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.drink;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.drinks.TypicalDrinks.GREEN_TEA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.drinks.TypicalDrinks.PEPSI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_COST_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_NAME_COCA_COLA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_QUANTITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_RETAIL_PRICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_TAG_SOFTDRINK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.exceptions.DrinkNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.exceptions.DuplicateDrinkException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.drinks.DrinkBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class UniqueDrinkListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private final UniqueDrinkList uniqueDrinkList \u003d new UniqueDrinkList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void contains_nullDrink_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.contains(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void contains_drinkNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertFalse(uniqueDrinkList.contains(PEPSI));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void contains_drinkInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.add(PEPSI);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(uniqueDrinkList.contains(PEPSI));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void contains_drinkWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.add(PEPSI);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink editedPepsi \u003d new DrinkBuilder(PEPSI).withQuantity(VALID_DRINK_QUANTITY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withRetailPrice(VALID_DRINK_RETAIL_PRICE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withCostPrice(VALID_DRINK_COST_PRICE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .withTags(VALID_DRINK_TAG_SOFTDRINK)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(uniqueDrinkList.contains(editedPepsi));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void add_nullDrink_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.add(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void add_duplicateDrink_throwsDuplicateDrinkException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.add(PEPSI);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(DuplicateDrinkException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.add(PEPSI);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void remove_nullDrink_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.remove(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void remove_drinkDoesNotExist_throwsDrinkNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(DrinkNotFoundException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.remove(PEPSI);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void remove_existingDrink_removesDrink() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.add(PEPSI);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.remove(PEPSI);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        UniqueDrinkList expectedUniqueDrinkList \u003d new UniqueDrinkList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertEquals(expectedUniqueDrinkList, uniqueDrinkList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setDrinks_nullUniqueDrinkList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.setDrinks((UniqueDrinkList) null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setDrink_uniqueDrinkList_replacesOwnListWithProvidedUniqueDrinkList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.add(PEPSI);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        UniqueDrinkList uniqueDrinkList \u003d new UniqueDrinkList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.add(GREEN_TEA);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.uniqueDrinkList.setDrinks(uniqueDrinkList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertEquals(uniqueDrinkList, this.uniqueDrinkList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setDrinks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.setDrinks((List\u003cDrink\u003e) null);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setDrinks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.add(PEPSI);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        List\u003cDrink\u003e drinkList \u003d Collections.singletonList(GREEN_TEA);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.setDrinks(drinkList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        UniqueDrinkList expectedUniqueDrinkList \u003d new UniqueDrinkList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        expectedUniqueDrinkList.add(GREEN_TEA);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertEquals(expectedUniqueDrinkList, uniqueDrinkList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void setDrinks_listWithDuplicateDrinks_throwsDuplicateDrinkException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        List\u003cDrink\u003e listWithDuplicateDrinks \u003d Arrays.asList(PEPSI, PEPSI);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(DuplicateDrinkException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.setDrinks(listWithDuplicateDrinks);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void findByName_drinkInList_returnDrinkRef() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink drinkToFind \u003d PEPSI;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.add(drinkToFind);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.add(GREEN_TEA);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink drinkToFindCopy \u003d new DrinkBuilder(drinkToFind).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertEquals(drinkToFind, uniqueDrinkList.findByName(drinkToFindCopy));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void findByName_drinkNotInList_throwsDrinkNotFoundException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink drinkToFind \u003d PEPSI;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.add(drinkToFind);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.add(GREEN_TEA);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink differentDrink \u003d new DrinkBuilder(PEPSI).withName(VALID_DRINK_NAME_COCA_COLA).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        thrown.expect(DrinkNotFoundException.class);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        uniqueDrinkList.findByName(differentDrink);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 146,
      "-": 10
    }
  },
  {
    "path": "src/test/seedu/address/model/tag/TagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag (null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 24,
      "-": 3
    }
  },
  {
    "path": "src/test/seedu/address/model/transaction/TransactionListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.getTypicalTransactionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class TransactionListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TransactionList transactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertEquals(Collections.emptyList(), transactionList.getTransactionList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        transactionList.resetData(null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidTransactionList_replacesData() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        TransactionList newData \u003d getTypicalTransactionList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        transactionList.resetData(newData);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, transactionList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/seedu/address/model/transaction/TransactionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.model.transaction.TransactionType.PURCHASE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.model.transaction.TransactionType.SALE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_TRANSACTION_AMOUNT_MONEY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_TRANSACTION_QUANTITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.SALE_COKE_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.SALE_COKE_2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.SALE_PEPSI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.drinks.DrinkBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.transaction.TransactionBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TransactionTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink drink \u003d new DrinkBuilder ().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // transaction type null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Transaction (null,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                drink, new Quantity(VALID_TRANSACTION_QUANTITY), new Price(VALID_TRANSACTION_AMOUNT_MONEY)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // drink null, with transaction type sale"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Transaction(SALE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                null, new Quantity(VALID_DRINK_QUANTITY), new Price(VALID_TRANSACTION_AMOUNT_MONEY)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // drink null, with transaction type purchase"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Transaction(PURCHASE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                null, new Quantity(VALID_DRINK_QUANTITY), new Price(VALID_TRANSACTION_AMOUNT_MONEY)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // quantity null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Transaction(SALE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                drink, null, new Price(VALID_TRANSACTION_AMOUNT_MONEY)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // amount money null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Transaction(SALE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                drink, new Quantity(VALID_DRINK_QUANTITY), null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // same values, same id -\u003e return true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertEquals(SALE_COKE_1, SALE_COKE_1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // same values , but different id based on time -\u003e return false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Transaction transaction \u003d new TransactionBuilder (SALE_COKE_2).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertNotEquals(SALE_COKE_1, transaction);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // different drink -\u003e return false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertNotEquals(SALE_COKE_1, SALE_PEPSI);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 57,
      "-": 12
    }
  },
  {
    "path": "src/test/seedu/address/model/transaction/TransactionTypeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.BUY_PEPSI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.SALE_COKE_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TransactionTypeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private TransactionType saleType \u003d TransactionType.SALE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private TransactionType importType \u003d TransactionType.PURCHASE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: decide whether these are necessary"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void constructor_sale_returnSale() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertEquals(saleType, TransactionType.valueOf(\"SALE\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void constructor_purchaseLowerCase_returnPurchase() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertEquals(importType, TransactionType.valueOf(\"purchase\".toUpperCase()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void toString_print_printCorrectFormat() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertEquals(\"SALE\", SALE_COKE_1.getTransactionType().toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Assert.assertEquals(\"PURCHASE\", BUY_PEPSI.getTransactionType().toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 25,
      "-": 4
    }
  },
  {
    "path": "src/test/seedu/address/model/user/AuthenticationLevelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class AuthenticationLevelTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new AuthenticationLevel (null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void constructor_invalidUserName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        String invalidAuthenticationLevel \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new AuthenticationLevel(invalidAuthenticationLevel));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void isValidUserName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        // null AuthenticationLevel"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e AuthenticationLevel.isAuthenticationLevelValid (null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        // invalid AuthenticationLevel"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertFalse(AuthenticationLevel.isAuthenticationLevelValid(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertFalse(AuthenticationLevel.isAuthenticationLevelValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertFalse(AuthenticationLevel.isAuthenticationLevelValid(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertFalse(AuthenticationLevel.isAuthenticationLevelValid(\"accountant\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        // invalide name as it require all caps"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        // valid AuthenticationLevel"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertTrue(AuthenticationLevel.isAuthenticationLevelValid(\"ADMIN\")); // for admin AuthenticationLevel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertTrue(AuthenticationLevel.isAuthenticationLevelValid(\"MANAGER\")); // for manager AuthenticationLevel"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertTrue(AuthenticationLevel.isAuthenticationLevelValid(\"STOCKTAKER\")); // for stock taker AuthenticationLevel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        assertTrue(AuthenticationLevel.isAuthenticationLevelValid(\"ACCOUNTANT\")); // for accountant AuthenticationLevel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 41
    }
  },
  {
    "path": "src/test/seedu/address/model/user/PasswordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class PasswordTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Password (null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidUserName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPassword \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Password (invalidPassword));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPassword() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Password.isValidPassword (null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid userName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Password.isValidPassword(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Password.isValidPassword(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Password.isValidPassword(\"password password\")); //contain space"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid userName"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Password.isValidPassword(\"myPassword\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Password.isValidPassword(\"myPassword123\")); // numbers and alphabets"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue (Password.isValidPassword (\"myPassword123^*(\")); //with non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue (Password.isValidPassword (\"Gcf70h4aWQ1T9NMxE03XM3nq3nCmFGihnO4xMzHMgP0\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUserNameTooLong() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Password.isPasswordTooLong (null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        //invalid userName"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue (Password.isPasswordTooLong"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                (\"sjkflasdhfjklashfjklashfjklashfjklashfjklsdhafjklhasdkflhaslfjkhaslkfsdfggdfsgs\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // longer than 30 words"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        //valid userName"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse (Password.isPasswordTooLong(\"Gcf70h4aWQ1T9NMxE03XM3nq3nCmFGihnO4xMzHMgP0\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        //long hashed that is less than 50 char"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse (Password.isPasswordTooLong(\"tester123tester123tester123\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //long password that is less than 50 char"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 3,
      "-": 50
    }
  },
  {
    "path": "src/test/seedu/address/model/user/UserNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserNameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new UserName (null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidUserName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidUserName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new UserName(invalidUserName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidUserName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e UserName.isValidUserName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid userName"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(UserName.isValidUserName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(UserName.isValidUserName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(UserName.isValidUserName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(UserName.isValidUserName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(UserName.isValidUserName(\"tester tester\")); //contain space"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid userName"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(UserName.isValidUserName(\"tester\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(UserName.isValidUserName(\"tester123\")); // numbers and alphabets"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUserNameTooLong() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e UserName.isUserNameTooLong(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        //invalid userName"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(UserName.isUserNameTooLong"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                (\"sjkflasdhfjklashfjklashfjklashfjklashfjklsdhafjklhasdkflhaslfjkhaslkfsdfggdfsgs\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        // longer than 30 words"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        //valid userName"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(UserName.isUserNameTooLong(\"tester123tester123tester123\")); //long name that is less than 30 char"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 8,
      "liu-tianhang": 2,
      "-": 44
    }
  },
  {
    "path": "src/test/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return Index.fromOneBased(model.getFilteredDrinkList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return Index.fromOneBased(model.getFilteredDrinkList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return model.getFilteredDrinkList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 8,
      "liu-tianhang": 3,
      "-": 49
    }
  },
  {
    "path": "src/test/seedu/address/testutil/batch/BatchBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil.batch;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Batch;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.BatchDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.BatchId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.BatchPrice;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.BatchQuantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * A utility class to help with building Batch objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class BatchBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String DEFAULT_BATCH_ID \u003d \"1000000001\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String DEFAULT_BATCH_QUANTITY \u003d \"30\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String DEFAULT_BATCH_DATE \u003d \"1/11/2018\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private BatchId batchId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private BatchQuantity batchQuantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private BatchDate batchDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchId \u003d new BatchId(DEFAULT_BATCH_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchQuantity \u003d new BatchQuantity(DEFAULT_BATCH_QUANTITY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchDate \u003d new BatchDate(DEFAULT_BATCH_DATE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Initializes the BatchBuilder with the data of {@code batchToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchBuilder(Batch batchToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchId \u003d batchToCopy.getBatchId();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchQuantity \u003d batchToCopy.getBatchQuantity();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        batchDate \u003d batchToCopy.getBatchDate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Sets the {@code BatchId} of the {@code Batch} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchBuilder withId(String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchId \u003d new BatchId(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Sets the {@code BatchId} of the {@code Batch} that we are building with the automatically generated batch Id."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchBuilder withId() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchId \u003d new BatchId();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Sets the {@code BatchQuantity} of the {@code Batch} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchBuilder withQuantity(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchQuantity \u003d new BatchQuantity(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public BatchBuilder withDate(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.batchDate \u003d new BatchDate(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Batch build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Batch(batchId, batchQuantity, batchDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 69,
      "-": 2
    }
  },
  {
    "path": "src/test/seedu/address/testutil/batch/TypicalBatches.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil.batch;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.Batch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import seedu.address.model.drink.UniqueBatchList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * A utility class containing a list of {@code Batch} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class TypicalBatches {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    // In inventory list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch COKE1 \u003d new BatchBuilder().withId(\"100000002\").withQuantity(\"40\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            .withDate(\"01/10/2018\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch COKE2 \u003d new BatchBuilder().withId(\"100000003\").withQuantity(\"20\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            .withDate(\"15/10/2018\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch COKE3 \u003d new BatchBuilder().withId(\"100000004\").withQuantity(\"30\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            .withDate(\"01/11/2018\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch COKE4 \u003d new BatchBuilder().withId(\"100000005\").withQuantity(\"50\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            .withDate(\"04/11/2018\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch COKE5 \u003d new BatchBuilder().withId(\"100000006\").withQuantity(\"80\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            .withDate(\"11/11/2018\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch COKE6 \u003d new BatchBuilder().withId(\"100000007\").withQuantity(\"90\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            .withDate(\"30/09/2018\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    // Same id as COKE4 to test for duplicates;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch COKE7 \u003d new BatchBuilder().withId(\"100000005\").withQuantity(\"70\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            .withDate(\"29/10/2018\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch COKE8 \u003d new BatchBuilder().withId(\"100000010\").withQuantity(\"80\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            .withDate(\"28/10/2018\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    // Same date as COKE4 to test for compiling of batches"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch COKE9 \u003d new BatchBuilder().withId(\"100000008\").withQuantity(\"70\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            .withDate(\"04/11/2018\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    // Batch with no quantity"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final Batch COKE10 \u003d new BatchBuilder().withId(\"100000009\").withQuantity(\"0\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            .withDate(\"05/11/2018\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private TypicalBatches() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns an {@code } with all the typical persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static UniqueBatchList getTypicalUniqueBatchList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        UniqueBatchList ubl \u003d new UniqueBatchList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        for (Batch batch :getTypicalBatches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            ubl.addBatch(batch);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return ubl;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static List\u003cBatch\u003e getTypicalBatches() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(COKE1, COKE2, COKE3, COKE4, COKE5, COKE6));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 56,
      "-": 2
    }
  },
  {
    "path": "src/test/seedu/address/testutil/drinks/DrinkBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil.drinks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.UniqueBatchList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * A utility class to help with building Drink objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class DrinkBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Coke\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String DEFAULT_COST_PRICE \u003d \"1.00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String DEFAULT_RETAIL_PRICE \u003d \"5.00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"10\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Price costPrice;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Price retailPrice;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private UniqueBatchList uniqueBatchList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public DrinkBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        costPrice \u003d new Price(DEFAULT_COST_PRICE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        retailPrice \u003d new Price(DEFAULT_RETAIL_PRICE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        quantity \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Initializes the DrinkBuilder with the data of {@code drinkToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public DrinkBuilder(Drink drinkToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        name \u003d drinkToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        costPrice \u003d drinkToCopy.getCostPrice();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        retailPrice \u003d drinkToCopy.getRetailPrice();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        quantity \u003d drinkToCopy.getQuantity();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(drinkToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Sets the {@code Name} of the {@code Drink} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public DrinkBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Drink} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public DrinkBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Sets the {@code costPrice} of the {@code Drink} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public DrinkBuilder withCostPrice(String price) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.costPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Sets the {@code retailPrice} of the {@code Drink} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public DrinkBuilder withRetailPrice(String price) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.retailPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public DrinkBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.quantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Drink build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Drink(name, costPrice, retailPrice, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 92,
      "-": 2
    }
  },
  {
    "path": "src/test/seedu/address/testutil/drinks/TypicalDrinks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil.drinks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_COST_PRICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_NAME_COCA_COLA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_RETAIL_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.logic.commands.CommandTestUtil.VALID_DRINK_TAG_SOFTDRINK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.InventoryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * A utility class containing a list of {@code Drink} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TypicalDrinks {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Drink FNN_GRAPE \u003d new DrinkBuilder().withName(\"FnN Grape\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withCostPrice(\"1.00\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withRetailPrice(\"5.00\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withQuantity(\"45\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withTags(\"softDrink\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Drink FNN_GRAPE_COPY \u003d new DrinkBuilder().withName(\"FnN Grape\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withCostPrice(\"1.50\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withRetailPrice(\"5.20\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withQuantity(\"46\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withTags(\"softDrink\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Drink PEPSI \u003d new DrinkBuilder().withName(\"Pepsi\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withCostPrice(\"1.20\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withRetailPrice(\"6.00\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withQuantity(\"40\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withTags(\"softDrink\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Drink GREEN_TEA \u003d new DrinkBuilder().withName(\"Heaven and Earth Green Tea\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withCostPrice(\"0.80\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withRetailPrice(\"4.00\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withQuantity(\"90\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withTags(\"Tea\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Drink ICE_LEMON_TEA \u003d new DrinkBuilder().withName(\"Pokka Ice Lemon Tea\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withCostPrice(\"1.3\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withRetailPrice(\"4.50\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withQuantity(\"20\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withTags(\"Tea\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // Manually added - Drink\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Drink COKE \u003d new DrinkBuilder().withName(VALID_DRINK_NAME_COCA_COLA)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withCostPrice(VALID_DRINK_COST_PRICE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withRetailPrice(VALID_DRINK_RETAIL_PRICE)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withQuantity(VALID_DRINK_QUANTITY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withTags(VALID_DRINK_TAG_SOFTDRINK)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String KEYWORD_MATCHING_TEA \u003d \"Tea\"; // A keyword that matches Tea"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private TypicalDrinks() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code inventoryList} with all the typical drinks."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static InventoryList getTypicalInventoryList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        InventoryList list \u003d new InventoryList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        for (Drink drink : getTypicalDrinks()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            list.addDrink(drink);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static List\u003cDrink\u003e getTypicalDrinks() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FNN_GRAPE, PEPSI, GREEN_TEA, ICE_LEMON_TEA));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 72,
      "-": 9
    }
  },
  {
    "path": "src/test/seedu/address/testutil/index/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.testutil.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Index INDEX_FIRST_DRINK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Index INDEX_SECOND_DRINK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Index INDEX_THIRD_DRINK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 12
    }
  },
  {
    "path": "src/test/seedu/address/testutil/inventory/InventoryListBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.InventoryList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * A utility class to help with building InventoryList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * {@code InventoryList list \u003d new InventoryListBuilder().withDrink(coke).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class InventoryListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private InventoryList inventoryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public InventoryListBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        inventoryList \u003d new InventoryList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public InventoryListBuilder(InventoryList inventoryList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.inventoryList \u003d inventoryList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param drink"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public InventoryListBuilder withDrink(Drink drink) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        inventoryList.addDrink(drink);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public InventoryList build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return inventoryList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 34,
      "-": 1
    }
  },
  {
    "path": "src/test/seedu/address/testutil/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.InventoryList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.manager.ManagerModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String VALID_DRINK_NAME_COCA_COLA \u003d \"Coca Cola\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String VALID_DRINK_RETAIL_PRICE \u003d \"25.23\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String VALID_DRINK_COST_PRICE \u003d \"4.00\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String VALID_DRINK_QUANTITY \u003d \"300\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String VALID_DRINK_TAG_SOFTDRINK \u003d \"softDrink\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String VALID_DRINK_TAG_TEA \u003d \"tea\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String VALID_TRANSACTION_AMOUNT_MONEY \u003d \"10.00\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String VALID_TRANSACTION_QUANTITY \u003d \"10\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, ManagerModel actualModel,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                                            CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, ManagerModel expectedModel) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        InventoryList expectedInventoryList \u003d new InventoryList(actualModel.getInventoryList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        List\u003cDrink\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredDrinkList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            assertEquals(expectedInventoryList, actualModel.getInventoryList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredDrinkList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the drink at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code model}\u0027s inventory list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static void showDrinkAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredDrinkList().size());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Drink drink \u003d model.getFilteredDrinkList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        final String[] splitName \u003d drink.getName().name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        model.updateFilteredDrinkList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        assertEquals(1, model.getFilteredDrinkList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 92,
      "-": 21
    }
  },
  {
    "path": "src/test/seedu/address/testutil/transaction/TransactionBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Drink;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * A utility class to help with building Transaction objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TransactionBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Coca Cola\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String DEFAULT_TRANSACTION_TYPE \u003d \"SALE\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String DEFAULT_DATE \u003d new Date().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"200\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String DEFAULT_AMOUNT_EARNED \u003d \"10.00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final String DEFAULT_ID \u003d \"10001\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private TransactionType transactionType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Date transactionDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Drink drinkTransacted;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Quantity quantityTransacted;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Price amountMoney;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private TransactionId id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionBuilder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionType \u003d TransactionType.valueOf(DEFAULT_TRANSACTION_TYPE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionDate \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinkTransacted \u003d new Drink(new Name(DEFAULT_NAME));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        quantityTransacted \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        amountMoney \u003d new Price(DEFAULT_AMOUNT_EARNED);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        id \u003d new TransactionId(DEFAULT_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Initializes the TransactionBuilder with the data of {@code transactionToCopy}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param transactionToCopy"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionBuilder(Transaction transactionToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionType \u003d transactionToCopy.getTransactionType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionDate \u003d transactionToCopy.getTransactionDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinkTransacted \u003d transactionToCopy.getDrinkTransacted();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        quantityTransacted \u003d transactionToCopy.getQuantityTransacted();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        amountMoney \u003d transactionToCopy.getAmountMoney();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionDate \u003d transactionToCopy.getTransactionDate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        id \u003d transactionToCopy.getTransactionId();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Sets the {@code TransactionType} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionBuilder withTransactionType(String type) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionType \u003d TransactionType.valueOf(type.toUpperCase());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Sets the {@code Date} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionBuilder withDate(String date) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionDate \u003d new Date(date);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Sets the {@code Date} of the {@code Transaction} that we are building to the current date"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionBuilder withDateToday() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        transactionDate \u003d new Date();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Sets the {@code Date} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionBuilder withDrink(String drinkName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        drinkTransacted \u003d new Drink(new Name(drinkName));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        quantityTransacted \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Sets the {@code Price amountMoney} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public TransactionBuilder withAmountMoney(String amountMoney) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.amountMoney \u003d new Price(amountMoney);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Creates and returns a new Transaction object with given attributes"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Transaction build() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return new Transaction(transactionType, transactionDate, drinkTransacted, quantityTransacted, amountMoney, id);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 109,
      "-": 1
    }
  },
  {
    "path": "src/test/seedu/address/testutil/transaction/TypicalTransactions.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * A utility class containing {@code Transaction} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class TypicalTransactions {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction SALE_COKE_1 \u003d new TransactionBuilder().withTransactionType(\"sale\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withDate(\"11/08/2018\").withDrink(\"Coke Zero\").withQuantity(\"19\").withAmountMoney(\"40.05\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction SALE_COKE_2 \u003d new TransactionBuilder().withTransactionType(\"sale\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withDate(\"11/08/2018\").withDrink(\"Coke Zero\").withQuantity(\"19\").withAmountMoney(\"40.05\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction SALE_PEPSI \u003d new TransactionBuilder().withTransactionType(\"sale\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withDate(\"11/08/2018\").withDrink(\"Pepsi woohoo\").withQuantity(\"19\").withAmountMoney(\"40.05\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static final Transaction BUY_PEPSI \u003d new TransactionBuilder().withTransactionType(\"purchase\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            .withDate(\"11/08/2018\").withDrink(\"Pepsi woohoo\").withQuantity(\"19\").withAmountMoney(\"40.05\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalTransactions() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code TransactionList} with all the typical transactions."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static TransactionList getTypicalTransactionList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        TransactionList list \u003d new TransactionList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Transaction transaction : getTypicalTransactions()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            list.addTransaction(transaction);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cTransaction\u003e getTypicalTransactions() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SALE_COKE_1, BUY_PEPSI));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public static FilteredList\u003cTransaction\u003e getTypicalFilteredTransactions() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return new FilteredList\u003c\u003e(FXCollections.observableArrayList(SALE_COKE_1, BUY_PEPSI));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 24,
      "-": 25
    }
  },
  {
    "path": "src/test/seedu/address/testutil/user/AccountBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.testutil.user;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.LoginInfo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.AuthenticationLevel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * A utility class to help with building LoginInfo objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class AccountBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String DEFAULT_USER_NAME \u003d \"tester\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String DEFAULT_PASSWORD \u003d \"Gcf70h4aWQ1T9NMxE03XM3nq3nCmFGihnO4xMzHMgP0\u003d\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String DEFAULT_AUTHENTICATION_LEVEL \u003d \"ADMIN\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private UserName userName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private Password password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private AuthenticationLevel authenticationLevel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private LoginInfo loginInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AccountBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        userName \u003d new UserName (DEFAULT_USER_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        password \u003d new Password (DEFAULT_PASSWORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        authenticationLevel \u003d new AuthenticationLevel (DEFAULT_AUTHENTICATION_LEVEL);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginInfo \u003d new LoginInfo (userName, password, authenticationLevel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AccountBuilder(LoginInfo loginInfo) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.loginInfo \u003d loginInfo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AccountBuilder(UserName userName, Password password, AuthenticationLevel authenticationLevel) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.authenticationLevel \u003d authenticationLevel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginInfo \u003d new LoginInfo (userName, password, authenticationLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Set the {@code userName} of the {@code loginInfo}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AccountBuilder withUserName(UserName userName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Set the {@code password} of the {@code loginInfo}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AccountBuilder withPassword(Password password) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Set the {@code authenticationLevel} of the {@code loginInfo}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public AccountBuilder withAuthenticationLevel(AuthenticationLevel authenticationLevel) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        this.authenticationLevel \u003d authenticationLevel;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns a loginInfo object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public LoginInfo build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new LoginInfo (userName, password, authenticationLevel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 67
    }
  },
  {
    "path": "src/test/seedu/address/testutil/user/TypicalAccount.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//@@author liu-tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.testutil.user;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.commons.core.LoginInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.LoginInfoManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.AuthenticationLevel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.user.UserName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * A utility class containing {@code LoginInfo} objects to be used in tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class TypicalAccount {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final LoginInfo ADMIN_ACCOUNT \u003d new AccountBuilder ().withUserName (new UserName (\"tester\"))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                    .withPassword (new Password ("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                            \"Gcf70h4aWQ1T9NMxE03XM3nq3nCmFGihnO4xMzHMgP0\u003d\"))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                    .withAuthenticationLevel ("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                            new AuthenticationLevel (\"ADMIN\")).build ();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final LoginInfo MANAGER_ACCOUNT \u003d new AccountBuilder ()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                    .withUserName (new UserName (\"manager\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                    .withPassword (new Password ("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                            \"Gcf70h4aWQ1T9NMxE03XM3nq3nCmFGihnO4xMzHMgP0\u003d\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                    .withAuthenticationLevel ("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                            new AuthenticationLevel (\"MANAGER\")).build ();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final LoginInfo STOCK_TAKER_ACCOUNT \u003d new AccountBuilder ().withUserName (new UserName (\"stocktaker\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                    .withPassword (new Password ("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                            \"Gcf70h4aWQ1T9NMxE03XM3nq3nCmFGihnO4xMzHMgP0\u003d\"))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                    .withAuthenticationLevel ("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                            new AuthenticationLevel (\"STOCKTAKER\")).build ();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final LoginInfo ACCOUNTANT_ACCOUNT \u003d new AccountBuilder ().withUserName (new UserName (\"accountant\"))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                    .withPassword (new Password ("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                            \"Gcf70h4aWQ1T9NMxE03XM3nq3nCmFGihnO4xMzHMgP0\u003d\"))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                    .withAuthenticationLevel ("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                            new AuthenticationLevel (\"ACCOUNTANT\")).build ();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private TypicalAccount(){}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static LoginInfoManager getTypicalSingleAccount() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ArrayList\u003c LoginInfo \u003e loginInfoList \u003d new ArrayList \u003c\u003e ();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        loginInfoList.add (ADMIN_ACCOUNT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new LoginInfoManager (loginInfoList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static List\u003cLoginInfo\u003e getTypicalAccount() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return new ArrayList\u003c\u003e (Arrays.asList(ADMIN_ACCOUNT , MANAGER_ACCOUNT ,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                                                STOCK_TAKER_ACCOUNT , ACCOUNTANT_ACCOUNT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 51
    }
  },
  {
    "path": "test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Drink I/O\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "-": 31
    }
  },
  {
    "path": "test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model MANAGER data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 2,
      "-": 122
    }
  },
  {
    "path": "test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Contains integration tests (interaction with the DrinkModel) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 3,
      "-": 46
    }
  },
  {
    "path": "test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * A DrinkModel stub that contains a single person."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * A DrinkModel stub that always accept the person being added."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 3,
      "-": 201
    }
  },
  {
    "path": "test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 2,
      "-": 35
    }
  },
  {
    "path": "test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "-": 140
    }
  },
  {
    "path": "test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Contains integration tests (interaction with the DrinkModel, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 3,
      "-": 174
    }
  },
  {
    "path": "test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Contains integration tests (interaction with the DrinkModel, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 4,
      "-": 245
    }
  },
  {
    "path": "test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d new ExitCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MESSAGE_EXIT_ACKNOWLEDGEMENT, result.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 2,
      "-": 28
    }
  },
  {
    "path": "test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Contains integration tests (interaction with the DrinkModel) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 3,
      "-": 82
    }
  },
  {
    "path": "test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, SHOWING_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 2,
      "-": 28
    }
  },
  {
    "path": "test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 2,
      "-": 33
    }
  },
  {
    "path": "test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Contains integration tests (interaction with the DrinkModel) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 3,
      "-": 38
    }
  },
  {
    "path": "test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 2,
      "-": 47
    }
  },
  {
    "path": "test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Contains integration tests (interaction with the DrinkModel) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 3,
      "-": 115
    }
  },
  {
    "path": "test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 2,
      "-": 43
    }
  },
  {
    "path": "test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 2,
      "-": 83
    }
  },
  {
    "path": "test/java/seedu/address/model/testUtil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 1,
      "-": 33
    }
  },
  {
    "path": "test/java/seedu/address/model/testUtil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 1,
      "-": 86
    }
  },
  {
    "path": "test/java/seedu/address/model/testUtil/EventsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods related to events."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers. This method will return successfully after the {@code event}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * has been posted to all subscribers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postNow(BaseEvent event) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers at some unspecified time in the future."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postLater(BaseEvent event) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 1,
      "-": 25
    }
  },
  {
    "path": "test/java/seedu/address/model/testUtil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 1,
      "-": 92
    }
  },
  {
    "path": "test/java/seedu/address/model/testUtil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        person.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "Lunastryke": 1,
      "-": 58
    }
  },
  {
    "path": "test/java/seedu/address/model/testUtil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 1,
      "-": 71
    }
  },
  {
    "path": "test/java/seedu/address/model/testUtil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 1,
      "-": 11
    }
  },
  {
    "path": "test/java/seedu/address/model/testUtil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 2,
      "Lunastryke": 1,
      "-": 74
    }
  },
  {
    "path": "test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 2,
      "-": 155
    }
  },
  {
    "path": "test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(), new LogicManager(new ModelManager()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "-": 82
    }
  },
  {
    "path": "test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, DrinkModel)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, DrinkModel)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 7,
      "-": 245
    }
  },
  {
    "path": "test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 4,
      "-": 291
    }
  },
  {
    "path": "test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, DrinkModel)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, DrinkModel)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 7,
      "-": 97
    }
  },
  {
    "path": "test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "-": 57
    }
  },
  {
    "path": "test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, DrinkModel, String)}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, DrinkModel)}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, DrinkModel, String)} except that the"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * browser url"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, DrinkModel)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 11,
      "-": 188
    }
  },
  {
    "path": "test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, DrinkModel, String, Index)} and in"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, DrinkModel, String, Index)} except that the"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, DrinkModel)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, DrinkModel)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 12,
      "-": 293
    }
  },
  {
    "path": "test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, DrinkModel)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, DrinkModel)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 5,
      "-": 192
    }
  },
  {
    "path": "test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * Contains helper methods to set up {@code DrinkModel} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Predicate\u003cPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cPerson\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, Person... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Predicate\u003cPerson\u003e getPredicateMatching(Person other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 2,
      "-": 37
    }
  },
  {
    "path": "test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, DrinkModel)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, DrinkModel)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 5,
      "-": 151
    }
  },
  {
    "path": "unusedCode/fooditem/FoodItem.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.fooditem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Represents a Food Item in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class FoodItem {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private final FoodName foodName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private final FoodRecipe foodRecipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private FoodPrice foodPrice;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public FoodItem(FoodName name, FoodRecipe recipe, FoodPrice price) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireAllNonNull(name, recipe, price);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.foodName \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.foodRecipe \u003d recipe;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        this.foodPrice \u003d price;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public FoodName getFoodName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return foodName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public FoodRecipe getFoodRecipe() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return foodRecipe;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public FoodPrice getFoodPrice() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return foodPrice;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns true if both food items of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean isSameFoodItem(FoodItem otherFoodItem) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (otherFoodItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return otherFoodItem !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 otherFoodItem.getFoodName().equals(getFoodName())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 otherFoodItem.getFoodRecipe().equals(getFoodRecipe());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns true if both food items have the same identity and data fields."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * This defines a stronger notion of equality between two food items."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        if (!(other instanceof FoodItem)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        FoodItem otherFoodItem \u003d (FoodItem) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return otherFoodItem.getFoodName().equals(getFoodName())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 otherFoodItem.getFoodRecipe().equals(getFoodRecipe())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 otherFoodItem.getFoodPrice().equals(getFoodPrice());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        builder.append(getFoodName())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                .append(\" Price: $\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                .append(getFoodPrice())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                .append(\" Recipe: \")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                .append(getFoodRecipe());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 79
    }
  },
  {
    "path": "unusedCode/fooditem/FoodName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.fooditem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Represents a Food Item\u0027s name in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class FoodName extends Name {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public FoodName(String input) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 12
    }
  },
  {
    "path": "unusedCode/fooditem/FoodPrice.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.fooditem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Represents a Food Item\u0027s price in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Guarantees: Is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class FoodPrice {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String MESSAGE_PRICE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \"Price should contain only numbers and at most 1 decimal point. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                    + \"It must be least 1 digit long with a maximum of 2 digits after the decimal point\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String PRICE_VALIDATION_REGEX \u003d \"[0-9]+([.][0-9]{1,2})?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    private float foodPrice;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Constructs a {@code FoodPrice}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param price A valid price."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public FoodPrice(String price) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        foodPrice \u003d Float.parseFloat(price);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public float getPrice() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return foodPrice;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public void setPrice(String price) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        foodPrice \u003d Float.parseFloat(price);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return test.matches(PRICE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return (Float.toString(foodPrice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                || (other instanceof FoodPrice // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 (foodPrice \u003d\u003d (((FoodPrice) other).foodPrice))); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return Float.hashCode(foodPrice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 63
    }
  },
  {
    "path": "unusedCode/fooditem/FoodRecipe.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.fooditem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Represents a Food Item\u0027s recipe in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * A list of ingredients that enforces uniqueness between its element and does not allow nulls."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * An ingredient is considered unique...."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class FoodRecipe {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 14
    }
  },
  {
    "path": "unusedCode/fooditem/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.fooditem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Represents a Name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * @param input A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public Name(String input) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        checkArgument(isValidName(input), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        name \u003d input;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 56
    }
  },
  {
    "path": "unusedCode/fooditem/exceptions/DuplicateFoodItemException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.fooditem.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Signals that the operation will result in duplicate Food Items (Food Items are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class DuplicateFoodItemException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    public DuplicateFoodItemException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "        super(\"Operation would result in duplicate food items\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 12
    }
  },
  {
    "path": "unusedCode/fooditem/exceptions/FoodItemNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "package seedu.address.model.fooditem.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " * Signals that the operation is unable to find the specified food item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lunastryke"
        },
        "content": "public class FoodItemNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Lunastryke": 6
    }
  },
  {
    "path": "unusedCode/minjia/AnalysisManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.analysis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // analyseProfit"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // analyseCost"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // analyseRevenue"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // calculateTotalProfit"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // calculateTotalCost"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // calculateTotalRevenue"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void calculateTotalProfit() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Price actualProfit \u003d analysisManager.analyseProfit(AnalysisPeriodType.MONTH);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void calculateTotalCost() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void calculateTotalRevenue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.getTypicalFilteredTransactions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import static seedu.address.testutil.transaction.TypicalTransactions.getTypicalTransactionList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.drink.Price;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class AnalysisManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private AnalysisManager analysisManager \u003d new AnalysisManager(getTypicalTransactionList(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            getTypicalFilteredTransactions());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // analyseProfit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // analyseCost"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // analyseRevenue"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // calculateTotalProfit"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // calculateTotalCost"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    // calculateTotalRevenue"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void calculateTotalProfit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        Price actualProfit \u003d analysisManager.analyseProfit(AnalysisPeriodType.MONTH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void calculateTotalCost() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void calculateTotalRevenue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 67
    }
  },
  {
    "path": "unusedCode/minjia/IngredientManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ingredient.IceCream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ingredient.Topping;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ingredient.exceptions.DuplicateIngredientException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Represents the list of ingredients in the store"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public class IngredientManager implements IngredientModel {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private List\u003cTopping\u003e toppings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private List\u003cIceCream\u003e iceCreams;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public IngredientManager() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        // TODO: for now, always create new lists (i.e. doesn\u0027t save data yet)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        toppings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        iceCreams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void resetData() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        toppings.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        iceCreams.clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public List\u003cIngredient\u003e getAllIngredientsList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        // TODO: return an immutable list in the future"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        List\u003cIngredient\u003e allIngredients \u003d new ArrayList\u003c\u003e ();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        allIngredients.addAll(iceCreams);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        allIngredients.addAll(toppings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return allIngredients;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        // check if it is duplicate"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (containsIngredient(ingredient)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new DuplicateIngredientException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (ingredient instanceof IceCream) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            IceCream ingredientAsIceCream \u003d (IceCream) ingredient;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            iceCreams.add(ingredientAsIceCream);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else if (ingredient instanceof Topping) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            Topping ingredientAsTopping \u003d (Topping) ingredient;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            toppings.add(ingredientAsTopping);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @param toCheck is the potential duplicate ingredient"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @return true if {@code iceCreams} or {@code toppings} contains given ingredient."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private boolean containsIngredient(Ingredient toCheck) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (toCheck instanceof IceCream) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return iceCreams.stream().anyMatch(toCheck::isSameIngredient); // NOTE: only checks for same name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else if (toCheck instanceof Topping) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return toppings.stream().anyMatch(toCheck::isSameIngredient);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void updateIngredientQuantity(Ingredient ingredient, IngredientQuantity quantity) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!containsIngredient(ingredient)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Ingredient ingredientRef \u003d findIngredientByName(ingredient);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ingredientRef.setQuantity(quantity);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void decrementIngredientQuantity(Ingredient ingredient, IngredientQuantity quantity) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!containsIngredient(ingredient)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Ingredient ingredientRef \u003d findIngredientByName(ingredient);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        int currentStock \u003d ingredientRef.getQuantity().getValue();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        int newStock \u003d currentStock - quantity.getValue();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ingredientRef.getQuantity().setValue(newStock);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public void deleteIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (!containsIngredient(ingredient)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Ingredient ingredientRef \u003d findIngredientByName(ingredient);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (ingredient instanceof IceCream) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            iceCreams.remove(ingredientRef);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else if (ingredient instanceof Topping) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            toppings.remove(ingredientRef);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return containsIngredient(ingredient);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Gets reference to ingredient object that is in the list of ingredients."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @return reference to ingredient object."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private Ingredient findIngredientByName(Ingredient ingredient) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (ingredient instanceof IceCream) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            int index \u003d iceCreams.indexOf(ingredient);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return iceCreams.get(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else if (ingredient instanceof Topping) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            int index \u003d toppings.indexOf(ingredient);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return toppings.get(index);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 146,
      "-": 2
    }
  },
  {
    "path": "unusedCode/minjia/IngredientModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "// TODO: add more methods"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": " * The API of the Ingredient DrinkModel component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "public interface IngredientModel {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * TODO: use the new data to replace original data"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    void resetData();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @return the list of ingredients"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * TODO: supposed to be ReadOnlyIngredientList - to be added"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    List\u003cIngredient\u003e getAllIngredientsList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Adds the given ingredient."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * {@code ingredient} must not already exist in the ingredient list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    void addIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Updates the quantity of the given {@code ingredient}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * {@code quantity} should have an integer value that is positive or 0."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    void updateIngredientQuantity(Ingredient ingredient, IngredientQuantity quantity);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Decrements the quantity of the given {@code ingredient} by stated quantity."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * {@code quantity} should have an integer value that is greater than 0."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    void decrementIngredientQuantity(Ingredient ingredient, IngredientQuantity quantity);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Deletes given ingredient."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * {@code ingredient} must exist in the ingredient list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    void deleteIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @return true if an ingredient with the same identity as {@code ingredient}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * exists in the list of ingredients."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    boolean hasIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "liu-tianhang": 55,
      "-": 1
    }
  },
  {
    "path": "unusedCode/minjia/JsonTransactionListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "package seedu.address.storage.transactions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.ReadOnlyTransactionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "public class JsonTransactionListStorage implements TransactionListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public JsonTransactionListStorage(Path filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Path getTransactionListFilePath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Optional\u003cReadOnlyTransactionList\u003e readTransactionList() throws DataConversionException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        //return readTransactionList(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        if (readTransactionList(filePath).isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            ReadOnlyTransactionList transactionList \u003d readTransactionList(filePath).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return Optional.of(transactionList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * Similar to {@link #readTransactionList()}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @param transactionsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public Optional\u003cTransactionList\u003e readTransactionList(Path transactionsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        return JsonUtil.readJsonFile(transactionsFilePath, TransactionList.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    public void saveTransactionList(ReadOnlyTransactionList transactionList) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        JsonUtil.saveJsonFile(transactionList, filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 50
    }
  },
  {
    "path": "unusedCode/minjia/ingredient/Ingredient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an ingredient that makes up a food item"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: TODO"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Ingredient {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity field"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final IngredientName name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected IngredientQuantity quantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: ingredient cost"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ingredient(IngredientName name, IngredientQuantity quantity) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ingredient(IngredientName name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        quantity \u003d new IngredientQuantity(\"0\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public IngredientName getName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public IngredientQuantity getQuantity() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setQuantity(IngredientQuantity quantity) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @param ingredient is the ingredient to check."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @return true if both ingredients of the same name have"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * at least one other identity field that is the same."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public boolean isSameIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (ingredient \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return ingredient !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                \u0026\u0026 ingredient.getName().equals(getName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                // \u0026\u0026 (ingredient.getQuantity().equals(getQuantity()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                // TODO: consider whether this is necessary"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract int hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 1,
      "liu-tianhang": 15,
      "-": 43
    }
  },
  {
    "path": "unusedCode/minjia/transactionlist.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "  \"transactions\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"transactionType\" : \"PURCHASE\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"transactionDate\" : {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"date\" : \"2018-11-11\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    },"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"drinkTransacted\" : {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"name\" : {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \"name\" : \"Coke\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"costPrice\" : {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \"value\" : 0.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"retailPrice\" : {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \"value\" : 0.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"uniqueBatchList\" : null,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"quantity\" : {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \"value\" : 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      },"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"tags\" : [ ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"quantityTransacted\" : {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"value\" : 15"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    },"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"amountMoney\" : {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"value\" : 22.5"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    },"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"id\" : 1541928745301"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"transactionType\" : \"PURCHASE\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"transactionDate\" : {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"date\" : \"2018-11-11\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"drinkTransacted\" : {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"name\" : {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \"name\" : \"Green Tea\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      },"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"costPrice\" : {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \"value\" : 0.0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      },"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"retailPrice\" : {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \"value\" : 0.0"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      },"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"uniqueBatchList\" : null,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"quantity\" : {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "        \"value\" : 0"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      },"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"tags\" : [ ]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    },"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"quantityTransacted\" : {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"value\" : 10"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    },"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"amountMoney\" : {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "      \"value\" : 15.0"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    },"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"id\" : 1541928895751"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "  \"lastUpdateDate\" : {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "    \"date\" : \"2018-11-11\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "  }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bluein-green": 62
    }
  },
  {
    "path": "unusedCode/tianhang/Ingredient/AddIceCreamCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//author @tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.Ingredient;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.IngredientModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ingredient.IceCream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddIceCreamCommand extends IngredientCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New IceCream added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ICE_CREAM \u003d \"This ice cream has already been added\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final IceCream toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddIceCreamCommand (IceCream iceCream) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull (iceCream);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d iceCream;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public CommandResult execute(IngredientModel ingredientModel, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireNonNull(ingredientModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (ingredientModel.hasIngredient(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ICE_CREAM);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ingredientModel.addIngredient (toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        //TODO: this is for version format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        //model.commitAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddIceCreamCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals((( AddIceCreamCommand ) other).toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 10,
      "-": 66
    }
  },
  {
    "path": "unusedCode/tianhang/Ingredient/AddIceCreamCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//author @tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.Ingredient;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_ICECREAM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Ingredient.AddIceCreamCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ingredient.IceCream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddIceCreamCommandParser implements Parser\u003c AddIceCreamCommand \u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddIceCreamCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_ICECREAM);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INGREDIENT_ICECREAM)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIceCreamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                .parseIngredientName (argMultimap.getValue (PREFIX_INGREDIENT_ICECREAM).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        IceCream iceCream \u003d new IceCream (ingredientName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddIceCreamCommand (iceCream);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 3,
      "-": 51
    }
  },
  {
    "path": "unusedCode/tianhang/Ingredient/AddIngredientParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "//author @tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.Ingredient;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_ICECREAM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_TOPPING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Ingredient.IngredientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " * Parse command under batch"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddIngredientParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final Pattern ICE_CREAM_CHECKER \u003d Pattern.compile (\"(?\u003ciceCream\u003ei/)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern TOPPING_CHECKER \u003d Pattern.compile (\"(?\u003ctopping\u003et/)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Split command into individual parsers"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @param args Input string of all item e.g i/ice"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @return the result of the command execution"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public IngredientCommand split (String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_ICECREAM, PREFIX_INGREDIENT_TOPPING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if ((!arePrefixesPresent(argMultimap, PREFIX_INGREDIENT_ICECREAM)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_INGREDIENT_TOPPING))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, IngredientCommand.MESSAGE_USAGE_ADD_INGREDIENT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Matcher m \u003d ICE_CREAM_CHECKER.matcher (args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        System.out.println (m);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (m.find ()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            System.out.println (1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddIceCreamCommandParser ().parse (args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        m \u003d TOPPING_CHECKER.matcher (args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        System.out.println (m);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (m.find ()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            System.out.println (2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddToppingCommandParser ().parse (args);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new IngredientCommand ();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 51,
      "-": 12
    }
  },
  {
    "path": "unusedCode/tianhang/Ingredient/AddToppingCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//author @tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.Ingredient;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.IngredientModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ingredient.Topping;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddToppingCommand extends IngredientCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Topping added: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TOPPING \u003d \"This ingredient has already been added\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Topping toAdd;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddToppingCommand (Topping topping) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull (topping);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d topping;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public CommandResult execute(IngredientModel ingredientModel, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        requireNonNull(ingredientModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (ingredientModel.hasIngredient(toAdd)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TOPPING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ingredientModel.addIngredient (toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        //TODO: this is for version format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        //model.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddToppingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals((( AddToppingCommand ) other).toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 11,
      "-": 45
    }
  },
  {
    "path": "unusedCode/tianhang/Ingredient/AddToppingCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//author @tianhang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.Ingredient;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_TOPPING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Ingredient.AddToppingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ingredient.Topping;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddToppingCommandParser implements Parser\u003c AddToppingCommand \u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddToppingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_TOPPING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INGREDIENT_TOPPING)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToppingCommand.MESSAGE_USAGE_ADD_INGREDIENT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                .parseIngredientName (argMultimap.getValue (PREFIX_INGREDIENT_TOPPING).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Topping topping \u003d new Topping (ingredientName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddToppingCommand (topping);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 4,
      "-": 50
    }
  },
  {
    "path": "unusedCode/tianhang/Ingredient/IngredientCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.Ingredient;"
      },
      {
        "lineNumber": 3,
        "content": "//@@author tianhang"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_ICECREAM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_TOPPING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bluein-green"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import seedu.address.model.IngredientModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class IngredientCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addIngredient\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE_ADD_INGREDIENT \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + PREFIX_INGREDIENT_ICECREAM + \"ice cream name \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + \"or \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            + PREFIX_INGREDIENT_TOPPING + \"ice cream topping \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New IceCream added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public IngredientCommand () {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public CommandResult execute (IngredientModel ingredientModel, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute (Model model , CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "bluein-green": 1,
      "liu-tianhang": 14,
      "-": 34
    }
  },
  {
    "path": "unusedCode/tianhang/Ingredient/UpdateIngredientQuantityParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.Ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Ingredient.IngredientCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_ICECREAM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_TOPPING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UpdateIngredientQuantityParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    public static final Pattern ICE_CREAM_CHECKER \u003d Pattern.compile (\"(?\u003ciceCream\u003ei/)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern TOPPING_CHECKER \u003d Pattern.compile (\"(?\u003ctopping\u003et/)\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Split command into individual parsers"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @param args Input string of all item e.g i/ice"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @return the result of the command execution"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public IngredientCommand split (String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_ICECREAM, PREFIX_INGREDIENT_TOPPING);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if ((!arePrefixesPresent(argMultimap, PREFIX_INGREDIENT_ICECREAM)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_INGREDIENT_TOPPING))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, IngredientCommand.MESSAGE_USAGE_ADD_INGREDIENT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        Matcher m \u003d ICE_CREAM_CHECKER.matcher (args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        System.out.println (m);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (m.find ()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            System.out.println (1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddIceCreamCommandParser ().parse (args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        m \u003d TOPPING_CHECKER.matcher (args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        System.out.println (m);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        if (m.find ()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "            System.out.println (2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddToppingCommandParser ().parse (args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new IngredientCommand ();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liu-tianhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liu-tianhang": 42,
      "-": 16
    }
  }
]
