[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "# Invités"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S1-F09-3/main[image:https://travis-ci.org/CS2113-AY1819S1-F09-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/aaryamNUS/main[image:https://ci.appveyor.com/api/projects/status/bdt6xr7o98ea332r?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S1-F09-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S1-F09-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://cs2113-ay1819s1-f09-3.github.io/main/[image:https://img.shields.io/badge/Documentation-Online-green.svg[Documentation Link]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Invités is a web application that caters to organisers of different events (such as weddings, orientation camps, networking sessions, product launches, etc). It helps event planners reduce their workload during the planning phase by providing them"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "a convenient platform to manage guest lists, organise catering services, as well as keep track of payments. Our main target audience are event managers and planners, who wish to utilise a streamlined and efficient approach towards organising their"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "events. The application also caters to nearly every type of event specialising by providing customised themes for different events."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "## Our Purpose"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "To streamline, digitise, and revamp the process of managing events, and benefit both the guests and the planners by doing so."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "### Features:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "The following list highlights the main features our application provides, ranging from mass messaging to all guests to payment and dietary tracking."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### __For an event __"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "1. *Overarching detail fields*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    a. Name of event"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    b. Date and Time of event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    c. Venue of event"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    d. Dress code for event"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    e. Number of guests so far"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    f. Number of days to event"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "2. *Table of details of guests*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    a. Name of guest"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    b. Mobile number of guest"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    c. Email address of guest"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    d. Dietary Requirement of guest"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    e. Ticket number of guest for mass attendance-marking"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    f. Status of guest (e.g. VIP)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    g. Status of Payment of guest (e.g. PAID)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Some parts of this application were adapted from the sample application: https://github.com/se-edu/addressbook-level4[Address Book Level 4] by *_SE-EDU_*."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "#### Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "### Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 14,
      "SarahTaaherBonna": 32,
      "wm28": 7,
      "-": 13,
      "SandhyaGopakumar": 1
    }
  },
  {
    "path": "SE-EDU.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "# SE-EDU"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\EditCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getPayment().equals(e.getPayment())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getAttendance().equals(e.getAttendance())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 54
    }
  },
  {
    "path": "SandhyaGopakumar.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "# SandhyaGopakumar"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\AddEventCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Adds an event to the application."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_event\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the application. \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_NAME + \"Wedding \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_TAG + \"18 Sep 2018 10AM \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"An event already exists in the application\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (model.hasEvent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\DeleteEventCommand.java"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_event\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \": Deletes the event in the addressbook currently.\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Parameters: none\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted event details.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_NO_EVENT_DETAILS \u003d \"Event details have not been put in yet.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!model.hasEvent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new CommandException(MESSAGE_NO_EVENT_DETAILS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        model.deleteEvent();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                || (other instanceof DeleteEventCommand); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddEventCommandParser.java"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Parses input arguments and creates a new AddEventCommand object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        EventName eventName \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Event event \u003d new Event(eventName, tagList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new AddEventCommand(event);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParser.java"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParser.java"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return new DeleteEventCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBook.java"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final Event eventDetails;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBook.java"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void setEvent(Event event) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.eventDetails.setEvent(event);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBook.java"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    //event-level operations"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void addEvent(Event e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        eventDetails.addEvent(e);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /** Deletes the event details stored in the addressbook. */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void deleteEvent() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        eventDetails.deleteEvent();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean hasEvent() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return eventDetails.isUserInitialised();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBook.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public Event getEventDetails() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return eventDetails;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\event\\Event.java"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Represents an event."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private EventName eventName;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private Set\u003cTag\u003e eventTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private boolean isNotInitialisedByUser;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public Event(EventName eventName, Set\u003cTag\u003e eventTags) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireAllNonNull(eventName, eventTags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.eventTags.addAll(eventTags);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.isNotInitialisedByUser \u003d false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public Event() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        EventName eventName \u003d new EventName(\"event not created yet\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.isNotInitialisedByUser \u003d true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return eventName.getEventName();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void setEvent(Event event) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!this.equals(event)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.eventName.setEventName(event.getName());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.eventTags \u003d event.eventTags;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /** Adds user-given details of the event. */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!this.equals(event)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.eventName.setEventName(event.getName());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.eventTags \u003d event.eventTags;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.isNotInitialisedByUser \u003d false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /** Deletes user-given details of the event. */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void deleteEvent() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Event event \u003d new Event();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.eventName.setEventName(event.getName());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.eventTags \u003d event.eventTags;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.isNotInitialisedByUser \u003d true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean isUserInitialised() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return !isNotInitialisedByUser;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public Set\u003cTag\u003e getEventTags() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return Collections.unmodifiableSet(eventTags);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Returns true if both events of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean isSameEvent(seedu.address.model.event.Event otherEvent) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 otherEvent.getName().equals(getName());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Returns true if both events have the same identity and data fields."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!(other instanceof seedu.address.model.event.Event)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        seedu.address.model.event.Event otherEvent \u003d (seedu.address.model.event.Event) other;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return otherEvent.getName().equals(getName())"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 otherEvent.getEventTags().equals(getEventTags());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return Objects.hash(eventName, eventTags);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        getEventTags().forEach(builder::append);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\event\\EventName.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class EventName {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_EVENTNAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            \"Event names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String EVENTNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private String fullEventName;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Constructs a {@code eventName}."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param eventName A valid event name."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public EventName(String eventName) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        checkArgument(isValidEventName(eventName), MESSAGE_EVENTNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        fullEventName \u003d eventName;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Accessor method for eventName"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public String getEventName() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return this.fullEventName;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Setter method for eventName"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void setEventName(String eventName) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.fullEventName \u003d eventName;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Returns true if a given string is a valid event name."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static boolean isValidEventName(String test) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return test.matches(EVENTNAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return fullEventName;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                || (other instanceof EventName // instanceof handles nulls"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 fullEventName.equals(((EventName) other).fullEventName)); // state check"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return fullEventName.hashCode();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\event\\exceptions\\DuplicateEventException.java"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\event\\exceptions\\EventNotFoundException.java"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class EventNotFoundException extends RuntimeException {}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\Model.java"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the application."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    boolean hasEvent();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * An event must have been initialised by the user in the application."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    void deleteEvent();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Adds the given event."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * {@code event} must not already exist in the application."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Replaces the given event {@code target} with {@code editedEvent}."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * {@code target} must exist in the application."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * The person identity of {@code editedEvent} must not be the same as another existing event in the application."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    //void updateEvent(Event target, Event editedEvent);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\Model.java"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /** Returns the details of the event currently residing in the addressbook. */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    Event getEventDetails();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\ModelManager.java"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        versionedAddressBook.addEvent(event);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void deleteEvent() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        versionedAddressBook.deleteEvent();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean hasEvent() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return versionedAddressBook.hasEvent();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /** Returns the details of the event currently residing in the addressbook. */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public Event getEventDetails() {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return versionedAddressBook.getEventDetails();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\ReadOnlyAddressBook.java"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    Event getEventDetails();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 411
    }
  },
  {
    "path": "Sarah.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "# Sarah"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\EditCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setPayment(Payment payment) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.payment \u003d payment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cPayment\u003e getPayment() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(payment);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setAttendance(Attendance attendance) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cAttendance\u003e getAttendance() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(attendance);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\FilterCommand.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose tags contain all of \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Parameters: KEYWORD MORE_KEYWORDS...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/NAME p/PHONE NUMBER e/EMAIL \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"pa/PAYMENT_STATUS a/ATTENDANCE_STATUS \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"t/TAG...\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final ContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public FilterCommand(ContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\MarkCommand.java"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Payment updatedPayment \u003d personToEdit.getPayment();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\MarkCommand.java"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setPayment(Payment payment) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.payment \u003d payment;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cPayment\u003e getPayment() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(payment);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParser.java"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\CliSyntax.java"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final Prefix PREFIX_PAYMENT \u003d new Prefix(\"pa/\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final Prefix PREFIX_ATTENDANCE \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\EditCommandParser.java"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PAYMENT).isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            editPersonDescriptor.setPayment(ParserUtil.parsePayment(argMultimap.getValue(PREFIX_PAYMENT).get()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ATTENDANCE).isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            editPersonDescriptor.setAttendance(ParserUtil.parseAttendance("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    argMultimap.getValue(PREFIX_ATTENDANCE).get()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\FilterCommandParser.java"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * and returns an FilterCommand object for execution."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        ArrayList\u003cString\u003e checking \u003d new ArrayList\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        for (int i \u003d 0; i \u003c checking.size(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            if ((checking.get(i).charAt(0) \u003d\u003d \u0027n\u0027 || checking.get(i).charAt(0) \u003d\u003d \u0027e\u0027"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    || (checking.get(i).charAt(0) \u003d\u003d \u0027p\u0027 \u0026\u0026 checking.get(i).charAt(1) \u003d\u003d \u0027/\u0027)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    || (checking.get(i).charAt(0) \u003d\u003d \u0027p\u0027 \u0026\u0026 checking.get(i).charAt(1) \u003d\u003d \u0027a\u0027)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    || checking.get(i).charAt(0) \u003d\u003d \u0027a\u0027 || checking.get(i).charAt(0) \u003d\u003d \u0027t\u0027)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 (checking.get(i).charAt(1) \u003d\u003d \u0027/\u0027 || checking.get(i).charAt(2) \u003d\u003d \u0027/\u0027)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                return new FilterCommand(new ContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new FilterCommand(new ContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\ParserUtil.java"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Parses a {@code String attendance} into an {@code attendance}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static Attendance parseAttendance(String attendance) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(attendance);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String trimmedAttendance \u003d attendance.trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!Attendance.isValidAttendance(trimmedAttendance)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException(Attendance.MESSAGE_ATTENDANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new Attendance(trimmedAttendance);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\ParserUtil.java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Parses a {@code String Payment} into an {@code Payment}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws ParseException if the given {@code payment} is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static Payment parsePayment(String payment) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(payment);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String trimmedPayment \u003d payment.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!Payment.isValidPayment(trimmedPayment)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException(Payment.MESSAGE_PAYMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new Payment(trimmedPayment);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\ContainsKeywordsPredicate.java"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code payment, attendance and tags etc.} matches all of the keywords given."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class ContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final ArrayList\u003cString\u003e checkKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public ContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param person containing details such as"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *               payment status, attendance status and tags"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @return the details that match keywords in the person\u0027s details, as mentioned above"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        HashSet\u003cseedu.address.model.tag.Tag\u003e set \u003d new HashSet\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String strTags \u003d \"\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        checkKeywords.clear();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            String str \u003d keywords.get(i);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            String[] arrStr \u003d str.split(\"/\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            if (arrStr[j].equals(\"pa\")) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                checkKeywords.add(i, arrStr[j + 1]);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strTags +\u003d \" \";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strTags +\u003d person.getPayment();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            } else if (arrStr[j].equals(\"t\")) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                checkKeywords.add(i, arrStr[j + 1]);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strTags \u003d \"\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                for (Tag tag : set) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    strTags +\u003d \" \";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    strTags +\u003d tag.tagName;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        final String checkStr \u003d strTags;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return checkKeywords.stream()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .allMatch(checkKeywords -\u003e StringUtil.containsWordIgnoreCase(checkStr, checkKeywords));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                || (other instanceof ContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 keywords.equals(((ContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\NameContainsKeywordsPredicate.java"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name, Phone or Email} matches any of the keywords given."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final ArrayList\u003cString\u003e checkKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String strToCheck \u003d \"\";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        checkKeywords.clear();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            String str \u003d keywords.get(i);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            String[] arrStr \u003d str.split(\"/\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            if (arrStr[j].equals(\"n\")) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                checkKeywords.add(i, arrStr[j + 1]);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strToCheck +\u003d \" \";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strToCheck +\u003d person.getName();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            } else if (arrStr[j].equals(\"p\")) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                checkKeywords.add(i, arrStr[j + 1]);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strToCheck +\u003d \" \";"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strToCheck +\u003d person.getPhone();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            } else if (arrStr[j].equals(\"e\")) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                checkKeywords.add(i, arrStr[j + 1]);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strToCheck +\u003d \" \";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strToCheck +\u003d person.getEmail();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        final String checkStr \u003d strToCheck;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return checkKeywords.stream()"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .anyMatch(checkKeywords -\u003e StringUtil.containsWordIgnoreCase(checkStr, checkKeywords));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\Payment.java"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Represents a Person\u0027s payment in the address book."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPayment(String)}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class Payment {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_PAYMENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            \"Payment should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String PAYMENT_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public final String paymentValue;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Constructs a {@code Payment}."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param payment A valid payment."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public Payment(String payment) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(payment);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        checkArgument(isValidPayment(payment), MESSAGE_PAYMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        paymentValue \u003d payment;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Returns true if a given string is a valid attendance."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static boolean isValidPayment(String test) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return test.matches(PAYMENT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return paymentValue;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                || (other instanceof Payment // instanceof handles nulls"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 paymentValue.equals(((Payment) other).paymentValue)); // state check"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return paymentValue.hashCode();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\Person.java"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public Payment getPayment() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return payment;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public Attendance getAttendance() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\storage\\XmlAdaptedPerson.java"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (payment \u003d\u003d null) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Payment.class.getSimpleName()));"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!Payment.isValidPayment(payment)) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new IllegalValueException(Payment.MESSAGE_PAYMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        final Payment modelPayment \u003d new Payment(payment);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (attendance \u003d\u003d null) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new IllegalValueException(String"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    .format(MISSING_FIELD_MESSAGE_FORMAT, Attendance.class.getSimpleName()));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!Attendance.isValidAttendance(attendance)) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new IllegalValueException(Attendance.MESSAGE_ATTENDANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        final Attendance modelAttendance \u003d new Attendance(attendance);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 381
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \"githubId\": \"SandhyaGopakumar\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \"displayName\": \"SAN...MAR\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \"authorNames\": [\"SANDHYA\\\\sandh\", \"SandhyaGopakumar\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \"githubId\": \"SarahTaaherBonna\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \"displayName\": \"SAR...NNA\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \"authorNames\": [\"SarahTaaherBonna\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \"githubId\": \"aaryamNUS\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \"displayName\": \"SRI...YAM\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \"authorNames\": [\"aaryamNUS\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \"githubId\": \"kronicler\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \"displayName\": \"TAN...ANG\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \"authorNames\": [\"kronicler\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \"githubId\": \"wm28\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \"displayName\": \"TAN...ING\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \"authorNames\": [\"wm28\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SandhyaGopakumar": 30
    }
  },
  {
    "path": "aaryamNUS.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "# aaryamNUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\AddTagCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Adds a set of tags from all the people in the current GuestList"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTag\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the specified tags from all \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"persons in the list.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_TAG + \"VIP \" + PREFIX_TAG + \"Paid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_ADDED_TAG_SUCCESS \u003d \"Successfully added all tags to %1$d persons\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String MESSAGE_NO_PERSON_IN_LIST \u003d \"No persons in the list!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"execute\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final Set\u003cTag\u003e tagsToAdd;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param tagsToAdd of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public AddTagCommand(Set\u003cTag\u003e tagsToAdd) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(tagsToAdd);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.tagsToAdd \u003d tagsToAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        ReadOnlyAddressBook currentAddressBookReadOnly \u003d model.getAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // Uses edited AddressBook API to make an editable AddressBook for removeTag() to work"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        AddressBook currentAddressBook \u003d new AddressBook(currentAddressBookReadOnly);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        List\u003cPerson\u003e currentList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (currentList.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PERSON_IN_LIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            for (Tag tagToBeAdded: tagsToAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                currentAddressBook.addTag(tagToBeAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            logger.log(Level.INFO, \"All tags added successfully\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            model.resetData(currentAddressBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ADDED_TAG_SUCCESS, currentList.size()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!(other instanceof MarkCommand)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        AddTagCommand e \u003d (AddTagCommand) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return tagsToAdd.equals(e.tagsToAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\MailCommand.java"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Sends an email to the specified person in the guest list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class MailCommand extends Command {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"email\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sends an email to the specified person \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"provided by INDEX.\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String MESSAGE_MAIL_PERSON_SUCCESS \u003d \"Successfully sent email!\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"execute\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public MailCommand(Index index) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Sends an email to the person at the specified INDEX"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Note: the following code was adapted from the SendEmail.java class code provided by @Rish on stackoverflow"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assert index !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person personToMail \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assert personToMail !\u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        final String username \u003d \"eventmanager2k18@gmail.com\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        final String password \u003d \"cs2113t2018\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Properties props \u003d new Properties();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        props.put(\"mail.smtp.auth\", \"true\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        props.put(\"mail.smtp.starttls.enable\", \"true\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        props.put(\"mail.smtp.host\", \"smtp.gmail.com\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        props.put(\"mail.smtp.port\", \"587\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Session session \u003d Session.getInstance(props,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new javax.mail.Authenticator() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    protected PasswordAuthentication getPasswordAuthentication() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        return new PasswordAuthentication(username, password);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            Message message \u003d new MimeMessage(session);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            message.setFrom(new InternetAddress(\"eventmanager2k18@gmail.com\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            message.setRecipients(Message.RecipientType.TO,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    InternetAddress.parse(personToMail.getEmail().toString()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            message.setSubject(\"Booking confirmation for Avengers Infinity War Part 3\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            message.setText(\"Dear valued customer,\\n\\nYou are our lucky customer! \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    + \"We hope you will continue to support Invites and remain a \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    + \"loyal customer. Please accept this gold-plated AddressBook as \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    + \"a token of our appreciation.\\n\\nYours Sincerely,\\nThe Invites Team\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            Transport.send(message);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        } catch (MessagingException mex) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            logger.log(Level.SEVERE, \"Error: could not send email, have you\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    + \"given Invites application access to your Gmail account?\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            mex.printStackTrace();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        logger.log(Level.INFO, \"Email sent successfully\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new CommandResult(MESSAGE_MAIL_PERSON_SUCCESS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!(other instanceof MailCommand)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        MailCommand e \u003d (MailCommand) other;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\RemoveTagCommand.java"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Removes a set of tags from all the people in the current GuestList"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class RemoveTagCommand extends Command {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removeTag\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes the specified tag \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"from all persons in the list.\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_TAG + \"VIP \" + PREFIX_TAG + \"Paid\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_REMOVED_TAG_SUCCESS \u003d \"Successfully removed all tags from %1$d persons\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_NO_PERSON_WITH_TAG \u003d \"No persons in the list have the specified tags\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"calculateNumberOfPeopleToChange\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private int numberOfPeopleToChange \u003d 0;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final Set\u003cTag\u003e tagsToRemove;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param tagsToRemove of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public RemoveTagCommand(Set\u003cTag\u003e tagsToRemove) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(tagsToRemove);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.tagsToRemove \u003d tagsToRemove;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        List\u003cPerson\u003e currentList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        ReadOnlyAddressBook currentAddressBookReadOnly \u003d model.getAddressBook();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // Uses edited AddressBook API to make an editable AddressBook for removeTag() to work"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        AddressBook currentAddressBook \u003d new AddressBook(currentAddressBookReadOnly);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        calculateNumberOfPeopleToChange(currentList);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (numberOfPeopleToChange \u003d\u003d 0) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PERSON_WITH_TAG);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            for (Tag tagToBeRemoved: tagsToRemove) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                currentAddressBook.removeTag(tagToBeRemoved);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            logger.log(Level.INFO, \"All tags removed successfully\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            model.resetData(currentAddressBook);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_REMOVED_TAG_SUCCESS, numberOfPeopleToChange));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!(other instanceof MarkCommand)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        RemoveTagCommand e \u003d (RemoveTagCommand) other;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return tagsToRemove.equals(e.tagsToRemove);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Calculates how many people in the list have at least one tag matching with the set of"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * tags to be removed."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param currentList the current list of guests"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private void calculateNumberOfPeopleToChange(List\u003cPerson\u003e currentList) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assert numberOfPeopleToChange \u003d\u003d 0 : \"numberOfPeopleToChange should start at 0\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Set\u003cTag\u003e currentTags;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        for (Person personToBeEdited : currentList) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            currentTags \u003d personToBeEdited.getTags();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            for (Tag tagToBeRemoved: tagsToRemove) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    if (currentTags.contains(tagToBeRemoved)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        numberOfPeopleToChange++;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    logger.log(Level.WARNING, \"Incorrect format for tags\", ex);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddTagCommandParser.java"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Parses input arguments and creates a new AddTagCommand object"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTagCommand"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * and returns an AddTagCommand object for execution."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public AddTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!AddTagCommandParser.arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new AddTagCommand(tagList);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Returns true if the tag prefix does not return empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\MailCommandParser.java"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class MailCommandParser implements Parser\u003cMailCommand\u003e {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MailCommand"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * and returns a MailCommand object for execution."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public MailCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        //ensure the arguments are not empty"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assert args !\u003d null;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    MailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new MailCommand(index);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\RemoveTagCommandParser.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Parses input arguments and creates a new RemoveTagCommand object"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class RemoveTagCommandParser implements Parser\u003cRemoveTagCommand\u003e {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveTagCommand"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * and returns an RemoveTagCommand object for execution."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public RemoveTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new RemoveTagCommand(tagList);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Returns true if the tag prefix does not return empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBook.java"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Removes {@code tag} from {@code person} in this {@code AddressBook}."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Note: This code snippet was inspired from the PR \"Model: Add deleteTag(Tag)\" by @yamgent"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private void removeTagFromPerson(Tag tag, Person person) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!newTags.remove(tag)) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person newPerson \u003d"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new Person (person.getName(), person.getPhone(), person.getEmail(), person.getPayment(),"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                            person.getAttendance(), newTags);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        updatePerson(person, newPerson);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Removes {@code tag} from all persons in this {@code AddressBook}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void removeTag(Tag tag) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        persons.forEach(person -\u003e removeTagFromPerson(tag, person));"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Adds {@code tag} from {@code person} in this {@code AddressBook}."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Note: This code snippet was inspired from the PR \"Model: Add deleteTag(Tag)\" by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private void addTagFromPerson(Tag tag, Person person) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!newTags.add(tag)) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person newPerson \u003d"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new Person (person.getName(), person.getPhone(), person.getEmail(), person.getPayment(),"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                            person.getAttendance(), newTags);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        updatePerson(person, newPerson);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Adds {@code tag} to all persons in this {@code AddressBook}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        persons.forEach(person -\u003e addTagFromPerson(tag, person));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBook.java"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\ui\\PersonCard.java"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Method createTags initialises the tag labels for {@code person}"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private void createTags(Person person) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColor(tag.tagName));"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        });"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\ui\\PersonDisplay.java"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Method createTags initialises the tag labels for {@code person}"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private void createTags(Person person) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColor(tag.tagName));"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        });"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\ui\\UiPart.java"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     Method getTagColor returns the specific color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public String getTagColor(String tagName) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * Using the hashcode of the tag name ensures the color of the tag remains consistent"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * during different iterations of the code by generating a random color"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         */"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        switch (tagName.replaceAll(\"\\\\s+\", \"\").toLowerCase()) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        case \"absent\":"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return TAG_COLORS[0];"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        case \"present\":"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return TAG_COLORS[1];"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        case \"vip\":"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return TAG_COLORS[2];"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        case \"guestspeaker\":"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return TAG_COLORS[3];"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        case \"bronze\":"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return TAG_COLORS[4];"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        case \"silver\":"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return TAG_COLORS[5];"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        case \"gold\":"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return TAG_COLORS[6];"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        case \"platinum\":"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return TAG_COLORS[7];"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        case \"veg\":"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return TAG_COLORS[8];"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        case \"halal\":"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return TAG_COLORS[9];"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return TAG_COLORS[10];"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\resources\\view\\DarkTheme.css"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` css"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "* Adding the definitions for the tag labels"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "*/"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-background-color: #ff9900;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-background-color: #cb9d1d;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "#tags .lightblue {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-background-color: #96e1f0;"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "#tags .white {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "#tags .bronze {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-background-color: #cd7f32;"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "#tags .silver {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-background-color: #C0C0C0;"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "#tags .gold {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-background-color: #DAA520;"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "#tags .platinum {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-background-color: #E5E4E2;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "#tags .veg {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-background-color: #228B22;"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "#tags .halal {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-background-color: #ADFF2F;"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "#tags .default {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-text-fill: red;"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "#tags .transparent {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-text-fill: red;"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    -fx-background-color: null !important;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 565
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    // https://mvnrepository.com/artifact/javax.mail/mail"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    compile group: \u0027javax.mail\u0027, name: \u0027mail\u0027, version: \u00271.4.5\u0027"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    // https://mvnrepository.com/artifact/javax.activation/activation"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    compile group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wm28"
        },
        "content": "    // https://mvnrepository.com/artifact/com.google.zxing/core"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wm28"
        },
        "content": "    compile \u0027com.google.zxing:core:3.3.3\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "//allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027Invités\u0027,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2113-AY1819S1-F09-3/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 6,
      "wm28": 4,
      "-": 247
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "Invités was developed by the CS2113T AY18/19 F09-3 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "_ +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003d\u003d\u003d Srivastava Aaryam"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "image::aaryamnus.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "{empty}[http://github.com/aaryamNUS[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "Role: Team lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": "Responsibilities: Mass email sending functionality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003d\u003d\u003d Sandhya Gopakumar"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wm28"
        },
        "content": "image::sandhyagopakumar.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": "{empty}[http://github.com/SandhyaGopakumar[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": "Responsibilities: Events functionality"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003d\u003d\u003d Sarah Taaher Bonna"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": "image::sarahtaaherbonna.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "{empty}[http://github.com/SarahTaaherBonna[github]] [\u003c\u003cSarahTaaherBonna#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wm28"
        },
        "content": "Responsibilities: Data filtering"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003d\u003d\u003d Tan Tze Guang"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wm28"
        },
        "content": "image::kronicler.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wm28"
        },
        "content": "{empty}[http://github.com/kronicler[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wm28"
        },
        "content": "Responsibilities: Attendance taking functionality"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003d\u003d\u003d Tan Wei Ming"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wm28"
        },
        "content": "image::wm28.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wm28"
        },
        "content": "{empty}[http://github.com/wm28[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wm28"
        },
        "content": "Responsibilities: Data importation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 3,
      "wm28": 21,
      "-": 32
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "\u003d Invités - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-F09-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "By: `Team F09-03`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Do not disable them. If you have disabled them, please go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "image::ModelComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "image:ModelComponentClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "// tag::filter[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "\u003d\u003d\u003d Filter feature"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "The filter mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "Given below is an example usage scenario and how the filter mechanism behaves at each step."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "will be initialized with the initial address book state."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "Step 2. The user executes `filter t/vegan pa/paid` command to obtain a list of people"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "who are Vegan *and* have paid."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "The `filter` command calls `Model#getFilteredPersonList()`."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "The following sequence diagram shows how the filter operation works:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "image::FilterSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "// end::filter[]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "\u003d\u003d\u003d Find feature"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "The find mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "Given below is an example usage scenario and how the find mechanism behaves at each step."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "will be initialized with the initial address book state."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "Step 2. The user executes `find n/Alex p/92743824 e/johndoe@gmail.com` command to obtain"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "a list of people who have the name `Alex`, phone number `92743824` *or* email address"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "`johndoe@gmail.com`."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "The `find` command calls `Model#getFilteredPersonList()`."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "The following sequence diagram shows how the find operation works:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "image::FindSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "\u003d\u003d\u003d Add/Delete Event feature"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "The add_event mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "Given below is an example usage scenario and how the add_event mechanism behaves at each step."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "Step 2. The user executes `add_event n/Wedding t/8thOct t/10AM` command to add in details about the event they are currently organising."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "The `add_event` command calls `Model#addEvent()` to add in the event details and \u0027Model#commitAddressBook()\u0027, causing the modified state of the address book after the `add_event n/Wedding t/8thOct t/10AM` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "If the user has added in the details of the event they are organising, then another set of event details should not be stored."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "The `add_event` command uses `Model#hasEvent()` to check if this is the case. If so, it will return an error to the user."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "Step 3. After the event has taken place, the user decides to organise another event with the same guest list and decides to delete the event details currently stored in the application using the \u0027delete_event\u0027 command."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "The `delete_event` command calls `Model#deleteEvent to delete the event\u0027s details. The command also calls Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "If the user has not added in the details of an event, then there are no specific event details to delete."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "The `delete_event` command uses `Model#hasEvent()` to check if this is the case. If so, it will return an error to the user."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "The following sequence diagram shows how the add_event operation works:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "image::AddDeleteEventSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d Add/Remove Tag generation feature"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "The addTag/removeTag mechanism is facilitated by `AddressBook` as it provides an editable form of a `ReadOnlyAddressBook` provided by the `Model` interface."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#getFilteredPersonList()`, and `Model#resetData()` respectively."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Given below is an example usage scenario and how the addTag/removeTag mechanism behaves at each step."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Step 1. The user launches the application for the first time. The `AddressBook` will be initialized with the initial address book state."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Step 2. The user executes the command `import guestlist.csv` to import a list of guests and add them to the current state of `AddressBook`."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Step 3. The user now decides to add a set of tags to all guests in the list and executes the command `addTag t/VIP t/Platinum` to add the tags `VIP` and `Platinum`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Step 4. A `ReadOnlyAddressBook` is created and an editable address book is created using `AddressBook`. To add to this, the current filtered list is accessed using `Model#getFilteredPersonList()`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Step 5. The set of tags are added to all guests in the editable address book via `AddressBook#addTag()` and `AddressBook#addTagFromPerson()`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Step 6. Finally, `Model#resetData()` and `Model#commitAddressBook()` are called to reset the current state of the list with the updated tags."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "The `removeTag` command does the opposite, and removes a set of tags from all persons in the guest list. However, the workflow is similar to `addTag`; a new `AddressBook` is created and edited accordingly as per the command."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "If there are no guests in the current list, or if the removeTag command tries to remove non-existent tags, the function will not execute and the current state of the list will be preserved."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "The following sequence diagram summarizes how the addTag() and removeTag() function work:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "The sequence diagram uses the case of addTag() to highlight how the application responds to this command. However, the same logic and sequence flow is applied to the removeTag() command."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "image::AddTagRemoveTagSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "wm28"
        },
        "content": "// tag::importexport[]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003d\u003d\u003d Import/Export Command"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "wm28"
        },
        "content": "The import and export command enables batch importation and exportation of people into and out of the guest list. Currently the commands only support comma-separated value file format (CSV), however, it is open for the addition of new formats."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "wm28"
        },
        "content": "The Import/Export features are mainly facilitated by objects of 2 classes. The `CsvFile` and `CsvConverter` objects. The following class diagram shows the relationship between the classes involved in the import/export."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "wm28"
        },
        "content": "image::ImportExportClassDiagram.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "wm28"
        },
        "content": "The CsvConverter class enables us decode/encode between the Person class and the desired format (CSV). The CsvConverter class implements PersonConverter interface which requires the implementing class to be able to decode/encode Person objects to the desired format."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "wm28"
        },
        "content": "The \u0027CsvFile\u0027 class enables us to read and write \u0027AdaptedPerson\u0027 to a file. `CsvFile` Implements the `SupportedFile` class which requires it to read and write lists of `AdaptedPerson` objects."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "wm28"
        },
        "content": "`CsvAdaptedPerson` extends `AdaptedPerson`, it represents a person in the respective file formats, which our case is CSV."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "wm28"
        },
        "content": "The import command will first read the csv file and loop through all the person data and add them into the model. Badly formatted csv lines will be skipped and the user are given feedback on the number of successful imports in the CommandResult Ui component. The following sequence diagram shows how the Import operation works:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "wm28"
        },
        "content": "|\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "wm28"
        },
        "content": "| image:ImportCommandSequenceDiagram.PNG[] | image:ImportSequenceRefFrame.PNG[]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "wm28"
        },
        "content": "|\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "wm28"
        },
        "content": "The export command will only export the currently filtered list so as to allow users to select specific groups of people. The following sequence diagram shows how the Export operation works:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "wm28"
        },
        "content": "|\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "wm28"
        },
        "content": "| image:ExportCommandSequenceDiagram.PNG[] | image:ExportSequenceRefFrame.PNG[]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "wm28"
        },
        "content": "|\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "wm28"
        },
        "content": "Given below is an example usage scenario and how to support new file formats (Eg. VCard)."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "wm28"
        },
        "content": "Step 1. Create new class to extend `AdaptedPerson` abstract class."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "wm28"
        },
        "content": "\t\tEg. VcardAdaptedPerson"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "wm28"
        },
        "content": "\t\tThis will represent the a person in the VCard file format."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "wm28"
        },
        "content": "Step 2. Create new class to implement `PersonConverter` interface. Implement the `encodePerson` and `decodePerson` method."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "wm28"
        },
        "content": "\t\tEg. VcardConverter"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "wm28"
        },
        "content": "\t\tThe methods in this class, contains the logic to convert between the `Person` and `AdaptedPerson` objects."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "wm28"
        },
        "content": "Step 3. Create new class to implement `CsvFile` interface. Implement `readAdaptedPersons` and `writeAdaptedPersons`."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "wm28"
        },
        "content": "\t\tEg. VcardFile"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "wm28"
        },
        "content": "\t\tThe above mentioned methods will allow you to interface with the underlying files."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "wm28"
        },
        "content": "Step 4. Add checks in the `ImportCommandParser` and `ExportCommandParser` to allow the application to call the classes that you have created."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to implement decoding/encoding functionality in Import/Export command"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "wm28"
        },
        "content": "*** Alternative 1 (current choice): import \u0026 export command be able to do accept a general PersonConverter"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "wm28"
        },
        "content": "** Pros: Reduction in code duplication when supporting other file-formats in the future. Easier to mock and do unit tests."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "wm28"
        },
        "content": "** Cons: More complicated to implement."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "wm28"
        },
        "content": "*** Alternative 2: Each format has its own command which knows how to do the required conversion"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "wm28"
        },
        "content": "** Pros: We do not need to check for the required import/export format required."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "wm28"
        },
        "content": "** Cons: Higher testing overhead for possible numerous types of export \u0026 import command. Duplicated boilerplate code."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d  Aspect: How to implement the reading/writing of file functionality in Import/Export command"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "wm28"
        },
        "content": "*** Alternative 1: Abstract the writing/reading of files into separate classes, `SupportedFile` interface and `CsvFile` class (current choice)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "wm28"
        },
        "content": "** Pros: Able to add support for other file formats with changing exisiting code."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "wm28"
        },
        "content": "** Cons: Increased code complexity."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "wm28"
        },
        "content": "*** Alternative 2: Use a utility class with static methods"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "wm28"
        },
        "content": "** Pros: Simple to implement."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "wm28"
        },
        "content": "** Cons: Violates open-close principle. Code will only work for CSV files. Tightly coupled."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "wm28"
        },
        "content": "// end::importexport[]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kronicler"
        },
        "content": "// tag::markunmark[]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kronicler"
        },
        "content": "\u003d\u003d\u003d Mark/Unmark Command"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kronicler"
        },
        "content": "The mark/unmark mechanism is facilitated by `Model`."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Given below is an example usage scenario and how the mark/unmark command executes at each step:"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state and the currentStatePointer pointing to that single address book state."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Step 2. The user executes the command `import guestlist.csv` to import a list of guest and add them to the current state of the `AddressBook`."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kronicler"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Alternatively, the user can execute the command `add n/John Doe p/98765432 e/johnd@gmail.com pa/PAID a/ABSENT t/NORMAL` to create an instance of one guest and add them to the current state of `AddressBook`."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Step 3. The user will execute the command `mark 98765432` to mark the attendance of the `Person`."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Step 4. An instance of `filteredPersonList` is retrieved from the `model` using `MODEL#getFliteredPersonList`. A linear search is then executed on the `filteredPersonList` to find a `Person` with the same phone number as `98765432`."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kronicler"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kronicler"
        },
        "content": "If there is no matching phone number found, a `COMMANDEXCEPTION` will be thrown to indicate nobody in the list has the phone number."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Step 5. After retrieving the information from the discovered `Person`, another `Person` is created with the same fields with the exception of the attendance field being changed from `ABSENT` to `PRESENT`."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Step 6. Finally, the entry is updated using `MODEL#updatePerson` to transfer the new information into the `filteredPersonList` before `commitAddressBook` is executed to save the state of the `AddressBook`."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kronicler"
        },
        "content": "The following sequence diagram shows how the add_event operation works:"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kronicler"
        },
        "content": "image::MarkUnmarkEventSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kronicler"
        },
        "content": "// end::markunmark[]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "_{We plan on implementing a data encryption feature such that when the user chooses to, the data stored in the addressbook will be encrypted and display ceases to show all information.}_"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "kronicler"
        },
        "content": "|`* * *` |event planner |be able to mark attendance of guests easily |minimise holdup as much as possible"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "|`* * *` |event planner |be able to send mass emails to guests |remind them about the event"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "|`* * *` |event planner |be able to tag guests with specific labels |take note of any extra details if necessary"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "|`* * *` |event planner specialising in large events such as weddings|tag all my guests in the list at once |save a lot of time and increase efficiency, as opposed to editing the tags of each individual person"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "|`* * *` |event planner specialising in large weddings |be able to track the guest list for each event |know how many guests there are in each event in order to know which event I should focus more on"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "|`* * *` |event planner specialising in concerts |be able to filter my guests to see who have not paid for the event |easily see who I need to remind"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "|`* * *` |event planner |be able to view all the important details of guests |get all the necessary details at one go for easier planning"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "|`* * *` |event planner specialising in concerts and arts festivals |be able to send the guests their tickets via email |ensure that all guests will have their tickets with them and there will be no complications"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "|`* * *` |event planner for a large event |be able to add large numbers of guests to the guest list efficiently |reduce time spent on adding them one at a time."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "|`* * *` |event planner for an event with a few organisers |be able to share the guest list for an event with my fellow organizers easily |I can inform them of any changes that I have made"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "|`* *` |event planner |filter my guests based on dietary requirements |so that I can plan my event accordingly"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "|`* *` |event planner specialising in conferences and recruitment talks |be able to specify the dress code of the event |ensure that the guests will be appropriately attired"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "|`* *` |event planner specialising in government and official conferences |be able to know who the VIP guests are and how many of them there are |make appropriate accommodation for them"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "kronicler"
        },
        "content": "|`*` |event planner |have the tickets to contain a QR code instead of using the guest’s phone number |scan them using a smart phone or any other phone with scanning capability"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "//_{More to be added}_"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "(For all use cases below, the *System* is `Invités` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "\u003d\u003d\u003d Use case: Import guest data and update payment status"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Actor: Application User - Event Planner"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "1. User opens application and either imports csv file or adds each guest in the application."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "kronicler"
        },
        "content": "2. System asks user to enter a command."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "kronicler"
        },
        "content": "3. User enters a command to mark those who have paid."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "kronicler"
        },
        "content": "4. System updates the file accordingly."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "\u003d\u003d\u003d Use case: Filter guest list based on status of payment and mass message those who have not paid"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "Actor: Application User - Event Planner"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "1. User opens application."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "2. System asks user to enter a command."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "3. User enters a command to filter out those who have yet to pay."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "4. System shows an indexed list of these guests with their names, phone numbers, email address, payment status,"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   attendance status and tags specified, if there are people in that category."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "5. User enters a command to email all in the currently displayed list, to remind them to make the payment."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "6. System sends all guests in the \"not paid\" list an email to remind them."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "kronicler"
        },
        "content": "\u003d\u003d\u003d Use case: Filter based on specific requirements and mass message all guests"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Actor: Application User - Event Planner"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "kronicler"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "1. User opens application and either imports csv file or adds each guest in the application."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "kronicler"
        },
        "content": "2. System asks user to enter a command."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "kronicler"
        },
        "content": "3. User enters a command to filter guests based on a requirement specified (e.g. dietary requirement)."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "4. System displays list of all such guests, displaying their name, phone number, email address, payment status,"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   attendance status and tags, if there are people in that category."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "kronicler"
        },
        "content": "5. User then enters command to list all guests."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "6. System displays everyone on the guest list along with their name, phone number, email address, payment status,"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   attendance status and tags."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "kronicler"
        },
        "content": "7. User enters command to remind all guests about the event."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "8. System sends all guests an email reminding them about the event."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "kronicler"
        },
        "content": "\u003d\u003d\u003d Use case: Review details while organising the event"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Actor: Application User - Event Planner"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "kronicler"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "1. User opens application and either imports csv file or adds each guest in the application."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "2. System will display the list of guests with details of each guest, such as name, phone number, email address, payment"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   status, attendance status and tags, such as, dietary requirements, VIP, etc in a row for ease of access. System will"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   display the general information of the event on the left of the list of guests, such as name, date, time and venue of"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   event, dress code, number of people attending the event so far, etc."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   System asks user to enter a command."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "3. User enters command to filter by some specific requirement, so that user is able to make arrangements accordingly."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "4. System lists all guests with the specified requirement, if available."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "kronicler"
        },
        "content": "\u003d\u003d\u003d Use case: Sending tickets to guests via email"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Actor: Application User - Event Planner"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "kronicler"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "1. User opens application and either imports csv file or adds each guest in the application."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "kronicler"
        },
        "content": "2. System asks user to enter a command."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "kronicler"
        },
        "content": "3. User keys in command to create tickets for each guest on the list."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "4. System copies and pastes the details of events, such as name, date, time and venue of event, dress code, etc"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   onto the ticket."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "5. System will print the guest’s index number, that is unique to each guest, onto each ticket,"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   obtained from either the csv file or data manually keyed in."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "kronicler"
        },
        "content": "6. System will inform user that the tickets have been created."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "kronicler"
        },
        "content": "7. User will then key in the command to email all guests their tickets."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "8. System will email all guests on the list their tickets, according to their unique index number."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* 3a. User can specify which guest to create tickets for, for example if the guest was late in signing up for the event."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* 3b. System will create the ticket for that particular guest."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* 8a. User can choose to key in command to email a particular guest his/her ticket."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* 8b. System will email the ticket to a particular guest instead of all guests on the list."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "kronicler"
        },
        "content": "\u003d\u003d\u003d Use case: Providing smooth registration on the day of the event"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Actor: Application User - Event Planner"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "kronicler"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "1. User opens application and imports csv file(if they were not using the application while planning) or"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   continues with the list on the application."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "kronicler"
        },
        "content": "2. System asks user to enter a command."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "kronicler"
        },
        "content": "3. User keys in command to start marking attendance."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "4. User (manning the reception/registration desk) manually keys in the guest’s index number found on the ticket."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "5. System runs a search to match the index number with those in the file."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "6. If index number is found, attendance of that guest is marked."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "7. System removes all ‘marked’ guests from display and displays only those who have yet to arrive/register."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "8. User can enter a command to send an email to all in the currently displayed list (comprising of guests"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   who have not arrived or registered yet)."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "9. System sends an email to each of those guests."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "kronicler"
        },
        "content": "10. User enters command to stop marking."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "kronicler"
        },
        "content": "11. System stops marking process."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "kronicler"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "* 6a. User enters command to unmark a guest who was marked as present accidentally."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* 6b. System unmarks the guest."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Use case resumes from step 7."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003d\u003d\u003d Use case:  Importing large number of guests into the guest list of an event"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "wm28"
        },
        "content": "Actor: Application User - Event Planner"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "wm28"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "1. User opens application."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "2. System asks user to enter a command."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "3. User keys in import command along with the file path of the csv file."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "4. System parses the csv file line by line."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "5. System adds all guests into the guest list."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "wm28"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "wm28"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "wm28"
        },
        "content": "* 3a. User keys in an invalid file path."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "wm28"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "wm28"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "* 4a. User provided malformed CSV file or inappropriate guest fields (eg. email with no @gmail.com)."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "** 4a1. System skips the addition of the guest into the guest list."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "** 4a2. System displays offending guest entry."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "wm28"
        },
        "content": "Use case resumes at step 4"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "* 5a. User provided CSV file with a guest that already exists in the current guest list."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "** 5a1. System skips the addition of the guest into the guest list."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "** 5a2. System displays both current and the new offending guest entry."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "wm28"
        },
        "content": "Use case resumes at step 4"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003d\u003d\u003d Use case:  Export guest list of an event (to CSV file format)"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "wm28"
        },
        "content": "Actor: Application User - Event Planner"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "wm28"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "wm28"
        },
        "content": "1. User opens application"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "wm28"
        },
        "content": "2. System asks user to enter a command"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "wm28"
        },
        "content": "3. User keys in export command along with the filename of the csv file"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "wm28"
        },
        "content": "4. System formats and saves guests into CSV format"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "wm28"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "wm28"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "wm28"
        },
        "content": "* 3a. User keys in an invalid filename or a filename that already exists"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "wm28"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "wm28"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands)"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "kronicler"
        },
        "content": ".  Command line interface has to be the primary source of input. GUI is to be used only to give visual feedback to the user."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ".  Data should be stored locally in a text file that can be edited by user. Database Management System (DBMS)"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   must not be used to store data."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "kronicler"
        },
        "content": ".  OOP has to be followed."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "kronicler"
        },
        "content": ".  The software has to be independent of platforms of any kind."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "kronicler"
        },
        "content": ".  The software should work without needing an installer."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ".  Only free, open-source, permissive license software that do not require any installation and do not violate any"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   other constraints can be used."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimal."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ".. Resize the window to an optimal size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "//_{ more test cases ... }_"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. There may be multiple persons in the list."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size),"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "   `delete y` (where y is smaller than 0), etc. +"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "//   _{give more}_"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "//_{ more test cases ... }_"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "//.. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "//_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 45,
      "kronicler": 102,
      "SarahTaaherBonna": 109,
      "wm28": 119,
      "-": 926,
      "SandhyaGopakumar": 46
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d Invités - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-F09-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "By: `Team F09-3`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Invités is an application targeted at event managers and planners, that allows you to better *organise, cater, and manage* the reception for large events such"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "as weddings, school gatherings, orientation camps, etc. Some of the main features include the ability to send mass emails, keep track of payments, as well as the tab"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "keeping of attendance of the guests. To add to this, by employing a standardised format, the application is able to take in Comma Separated Values (CSV) files and import data for a particular event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "This removes your need having to input all the information manually, as well as subsequently, gives you an alternative if you decide to organise another event using the same guest list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "This will give all you an easier time to manage the reception as you will be equipped with tools that will minimise errors in catering,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "organisation, and orders. Moreover, this application aims to reduce the frustrations for you when planning events and address your needs in a platform that is more user friendly, personalised, and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "efficient."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "The main purpose of this User Guide is to give you a detailed overview of all the features in our application and how to use them."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ".  Download the latest jar file from the GIT repository link:https://github.com/CS2113-AY1819S1-F09-3/main[here]."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ".  Place the jar file where your home directory resides"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ".  Double click on the jar file and wait a couple of seconds as the application loads. If you\u0027re successful, a main screen will load"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "   similar to the one shown below:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ".  As the Command Line Input is your primary method of manipulation, here are some"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "   example commands that you can use:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `help` : Displays a summary of the list of commands that the application offers."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `add` : Adds a guest to the guest list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `Delete` : Deletes an entry from the guest list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `Mark` : Marks the attendance of a guest from `ABSENT` to `PRESENT`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `Exit` : exits the application."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ".  You should type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ".  Please refer to \u003c\u003cFeatures\u003e\u003e subsection to see more detailed documentation of the functions that"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "   are included in this application"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ".  If you would like to perform emailing services through our application, please complete the steps as shown"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "   in the section \u003c\u003cSetting up your Gmail Account\u003e\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by you e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Bob Lee`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/Bob Lee t/VIP` or as `n/Bob Lee`."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/VIP`, `t/VIP t/Vegetarian` etc."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* You can specify parameters in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Displays a summary of the list of commands that the application offers +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d Adding a guest: `add`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Adds a guest to the guest list +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/PRESENT [t/TAG]...`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kronicler"
        },
        "content": "A guest can have any number of tags (including 0)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `add n/Bob Lee p/81720172 e/boblee@gmail.com a/Absent t/VIP t/Vegetarian t/Not Paid`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `add n/John Doe p/91028392 e/johndoe@gmail.com a/Present t/Groom t/Non-Vegetarian t/Paid`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d Listing all guests : `list`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Shows a list of all guests in the guest list. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d Editing a guest : `edit`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Edits an existing guest entry in the guest list. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/PRESENT]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "         [t/PERSON_TYPE] [t/DIET] [t/PAID]...`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* Edits the guest at the specified `INDEX`. The index refers to the index number shown in the displayed guest list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* When editing tags, the existing tags of the guest will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* You can remove all the guest\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `edit 2 n/Bob Chan` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Edits the name of the 2nd person to be `Bob Chan` respectively."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d Deleting a guest : `delete`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Deletes the specified guest from the guest list. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* Deletes the guest at the specified `INDEX`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* The index refers to the index number shown in the displayed guest list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Deletes the 2nd person in the guest list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d Removing a set of tags from all guests : `removeTag`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kronicler"
        },
        "content": "This command allows you to remove a set of tags from all guests in the guest list. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Format: `removeTag [t/TAG]...`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* The removeTag command will remove any number of tags provided by you from all guests"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* If the tags you provide are not shared by any of the guests in the current list, you will be informed of this"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* You must provide the tags to be removed, an input of `removeTag t/` will not do anything"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* You must provide tags that are alphanumeric, otherwise the system will inform you of the error"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `removeTag t/Veg t/VIP` +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kronicler"
        },
        "content": "You will remove the tags `Veg` and `VIP` from all guests in the current list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `removeTag t/` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "This will present you with an error in specifying the command, as you have not provided any tags to delete"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `removeTag t/@!*` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "This will present you with an error in specifying the command, as all your tags must be alphanumeric"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d Adding a set of tags to all guests : `addTag`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kronicler"
        },
        "content": "This command allows you to add a set of tags to all guests in the guest list. +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Format: `addTag [t/TAG]...`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "****"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* The addTag command will add any number of tags provided by you to all guests"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* You must provide tags that are alphanumeric, otherwise the system will inform you of the error in your input format"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "****"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `addTag t/Veg t/VIP` +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kronicler"
        },
        "content": "You will add the tags `Veg` and `VIP` to all guests in the current list"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `addTag t/@` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "This will present you with an error in specifying the command, as all your tags must be alphanumeric"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d Locating guests by name: `find`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Finds guests whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "Example: find n/NAME p/PHONE e/EMAIL"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "* Only names, phone numbers and email addresses are searched, depending on prefixes given."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "* Guests matching at least one keyword will be returned (i.e. `OR` search). e.g. `n/Hans n/Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "* `find n/John` +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kronicler"
        },
        "content": "You will be shown a list that contains the entries of `john` and `John Doe`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "* `find n/Betsy n/Tim n/John` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kronicler"
        },
        "content": "You will be show a list containing entries of any guest having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "* `find n/alex p/92746838 e/johndoe@gmail.com` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "You will be show a list containing entries of any guest having the name `Alex`,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "phone number `92746838`, or email address `johndoe@gmail.com`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d Import guests from CSV file : `import`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Imports guests with data from a CSV formatted file. The structure for the values in the CSV file is predefined. +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Format: `import FILE_PATH`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `import directory/subdirectory/guestlist.csv` +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kronicler"
        },
        "content": "You will populate the guest list with the data imported from the CSV file in the specified path."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d Exporting guests to CSV file : `export`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Exports guests\u0027 data to a CSV formatted file. The structure for the values in the CSV file is predefined. +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wm28"
        },
        "content": "Format: `export FILE_PATH`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wm28"
        },
        "content": "* `export directory/subdirectory/guestlist.csv` +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kronicler"
        },
        "content": "You will export the current guest list entries into a CSV file in the specified path."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d Marking a guest as present : `mark`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Marks a guest as present using a unique number assigned to them. This will also change the"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "`a/PRESENT`​ tag associated with the guest to Present. +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Format: `mark [p/PHONE_NUMBER]`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `mark 81927291` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kronicler"
        },
        "content": "You will mark the guest with phone number `81927291` as present."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d Marking a guest as absent : `unmark`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Marks a guest as absent using their unique number. This will also change the"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "`a/PRESENT`​ tag associated with the guest to Absent. +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Format: `unmark [p/PHONE_NUMBER]`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `unmark 81927291` +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kronicler"
        },
        "content": "You will mark the guest with phone number `81927291` as absent."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d  Start mass attendance marking : `start_marking`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Start the mass attendance marking mode. Allows you to mark attendance without using"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "the mark prefix. +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Format: `start_marking [TICKET_ID]...`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `start_marking` + `87654321` + `87654322` + `87654323` + `87654324...` +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kronicler"
        },
        "content": "You will mark the guests with unique numbers 87654321, 87654322, 87654323, 87654324 as present"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d  Stop mass attendance marking : `stop_marking`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Stop the mass attendance marking mode. +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Format: `stop_marking`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "// tag::filter[]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d  Filter list based on specified parameters : `filter`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "Filter guest list based on filter guest attributes. Only filters based on"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "payment status, attendance status and tags. +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "Format: `filter [pa/PAYMENT_STATUS] [a/ATTENDANCE_STATUS]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         [t/DIET] [t/PERSON_TYPE] [t/...]`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `filter a/Present t/Vegetarian` +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kronicler"
        },
        "content": "You will be shown a list with guests who are present and have a vegetarian dietary requirement."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "// end::filter[]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d   Sending emails to individual guests : `email`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Sends an email to the guest at a specific Index +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Format: `email INDEX`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* Sends an email to the guest at the specified `INDEX`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* The index refers to the index number shown in the displayed guest list."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "All email subjects and messages have been pre-written and are available in the file at `src/main/resources/EmailData/Message.txt`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "You are free to edit these messages to suit your own needs."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `email 2` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kronicler"
        },
        "content": "You will send an email to the 2nd person in the list."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d Sending an email to all guests : `emailAll`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Sends an email to all of the guests in the current list +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Format: `emailAll`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `emailAll` +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Sends an email to all the guests in the list."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d Sending emails to specified guests, ignoring potential spam : `forceEmail`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Sends an email to the guest specified by the index, regardless of how many emails have been sent to that guest +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Format: `forceEmail INDEX`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "****"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* Sends an email to the guest at the specified `INDEX`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* The index refers to the index number shown in the displayed guest list."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "****"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "If you try to send multiple emails to the same guest, the system will inform you of this and not allow you to spam the guest."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "However, the `forceEmail` command will allow you to send another email, regardless of how many emails have been sent before."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `forceEmail` +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Forces an email to be sent to the guest specified by INDEX."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d   Creating a new event : `add_event`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Creates a new event +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "Format: `add_event n/EVENT_NAME [t/DATE_TIME]`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "* `add_event n/CFG career talk t/18 Sep 2018 10AM` +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kronicler"
        },
        "content": "You will create an event called `CFG career talk` on the 18th of September at 10AM."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d\u003d   Editing an event : `edit_event`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Edit the currently selected event +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Format: `edit_event [n/EVENT_NAME] [t/...]`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "* `edit_event n/CFG career talk t/18 Sep 2018 11AM` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kronicler"
        },
        "content": "You will change the data and time of the event `CFG career talk` to 18th of September at 11AM."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "\u003d\u003d\u003d   Deleting event : `delete_event`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "Deletes an event by specifying its name"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "Format: `delete_event [NAME]`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "* `delete_event wedding` +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kronicler"
        },
        "content": "You will delete the event named wedding."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Restores the guest list to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Undoable commands: those commands that modify the guest list\u0027s content (`add`, `delete`, `edit`, `removeTag`, `addTag`, and `clear`)."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kronicler"
        },
        "content": "As the guest list data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kronicler"
        },
        "content": "There is no need for you to save manually."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kronicler"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous guest list. +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kronicler"
        },
        "content": "Alternatively, you could export the data from your current computer using the export command. Using this data you can launch the application on a different computer and import the data."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kronicler"
        },
        "content": "*Q*: ​How do I import my existing data on a CSV into the application? +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kronicler"
        },
        "content": "*A*: Firstly, create a new event within the application. After this, use the import function and specify the path to the file."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kronicler"
        },
        "content": "You will see the guest list populate itself with the data from the specified CSV file."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "\u003d\u003d Setting up your Gmail Account"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "In order for you to use the commands `email`, `emailAll`, and `forceEmail`, you must allow Invités to access your email account and"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "send emails. Currently, our application only supports Gmail accounts, but we do plan on supporting"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "other email domains."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "If you do have a Gmail account, please follow these steps to enable email services:"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "1. Login to your Gmail account using your preferred online browser (e.g. Chrome, Firefox)."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "2. Click on your profile picture on the top right, and click on `Google Account`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "3. Once you are re-directed, under the `Sign-in and security` section, click on `Apps with account access`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "4. Scroll down till you find the section `Allow less secure apps` on the right. Set this option to `ON`."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "5. In the Invités application, please specify your username and password in the file `Credentials.txt` at `/src/main/resources/EmailData/` in your project folder."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "6. Please specify an email subject and message in the file `Message.txt` also at `/src/main/resources/EmailData/` in your project folder."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "7. You are now ready to send emails to your guests through Invités!"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "Currently there is no other way to enable mailing services than to let your Gmail account allow less secure apps, and hence your account may be"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "susceptible to an increased number of spam emails from untrusted applications. However, our team is working quickly to find a more secure replacement."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `help` : ​Displays a help sheet containing useful commands."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* `add` : ​Creates an entry for a guest to attend the event."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* `edit` :​ Modifies the entry of a specified guest based on name."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* `delete` : ​Removes an entry of a specified guest based on name."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* `removeTag` : Removes a set of tags from all the guests in the current list."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* `addtag` : Adds a set of tags to all the guests in the current list."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "* `find` : Finds guests whose names, phone numbers or email addresses contain any of the given keywords."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `list` : Lists the current guest list."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `import` : ​Automatically generates guest list from a given CSV file."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "wm28"
        },
        "content": "* `export` : Exports guest list to a CSV file."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* `mark` : ​Tags a guest to note that they are currently at the event."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* `unmark` : ​Removes the tag of a guest attending the event based on name."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `start_marking` : ​Begins continuous marking of the people entering the event."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `stop_marking` : ​Stops the continuous marking of people."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "* `filter` : ​Filters the guest list based on keywords given."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* `email` : ​Sends individual emails to an entry of a specified guest based on index."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `emailAll` : Sends an email to all of the guests in the current list."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `forceEmail` : Sends an email to the guest specified by the index, regardless of how many emails have been sent to that guest."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `add_event` :​ Adds an event to the application."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `select_event` : ​Redirects the user to the guest list of the event given."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `event_delete` : ​Removes the specified event."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kronicler"
        },
        "content": "* `undo` : Restores the guest list to the state before the previous undoable command was executed."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `redo` : Reverses the most recent undo command."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* `exit` : ​Exits the application."
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 199,
      "kronicler": 47,
      "SarahTaaherBonna": 19,
      "wm28": 5,
      "-": 184,
      "SandhyaGopakumar": 7
    }
  },
  {
    "path": "docs/team/SarahTaaherBonna.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "\u003d Sarah Taaher Bonna - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "\u003d\u003d PROJECT: Invités"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "//Add in team details"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "Invités - An event management system. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "* *Major enhancement*: added *the ability to filter data*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "** What it does: allows the user to filter data based on keywords provided by user,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                 such as payment status, attendance status and/or tags."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "** Justification: This feature improves the product significantly because a user can find people who have yet to pay or are absent on the day of the event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                  This will help users to be able to find people that fit the conditions they are looking for, without having to traverse the list manually."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "* *Minor enhancement*: modified find command that allows the user to find guests with the name(s), phone number(s) and/or email address(es)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                       so that the user can find a group of people at one go, instead of doing it one-by-one."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "//Done"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "* *Other contributions*: Created Payment and Attendance attributes of a person"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "//Need to change this"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from % to % (Pull requests https://github.com[#TBC], https://github.com[#TBC])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[TBC], https://github.com[TBC], https://github.com[TBC])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "//Done"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfilter]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfind]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "//Done"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfilter]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfind]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "\u003d\u003d PROJECT: Invités"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 64
    }
  },
  {
    "path": "kronicler.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "# kronicler"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\MarkCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class MarkCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mark\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks a person as present \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"using their unique phone number. \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"This will also change the a/ tag associated with the person to Present.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"[PHONE] \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"91234567 \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_MARK_PERSON_SUCCESS \u003d \"Marked Person: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"Phone number not found in the address book\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param phone of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public MarkCommand(Phone phone) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Scans through the list and compares the phone numbers to the one that is being searched"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Assigns the index of the found person to the index of the command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param lastShownList {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws CommandException if there are no matching persons in the list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void retrieveIndex(List\u003cPerson\u003e lastShownList) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        int x \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        boolean isNotFound \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        for (Person p : lastShownList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            Phone temp \u003d p.getPhone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            if (phone.equals(temp)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                isNotFound \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            x++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (isNotFound) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        index \u003d Index.fromZeroBased(x);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        retrieveIndex(lastShownList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Name updatedName \u003d personToEdit.getName();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Phone updatedPhone \u003d personToEdit.getPhone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Email updatedEmail \u003d personToEdit.getEmail();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\MarkCommand.java"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Attendance updatedAttendance \u003d editPersonDescriptor.getAttendance().orElse(personToEdit.getAttendance());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedPayment,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                updatedAttendance, updatedTags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!(other instanceof MarkCommand)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        MarkCommand e \u003d (MarkCommand) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        private Payment payment;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        private Attendance attendance;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            setName(null);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            setPhone(null);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            setEmail(null);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            setPayment(null);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            setAttendance(new Attendance(\"PRESENT\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            setTags(null);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\MarkCommand.java"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setAttendance(Attendance attendance) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cAttendance\u003e getAttendance() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(attendance);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getPayment().equals(e.getPayment())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getAttendance().equals(e.getAttendance())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\UnmarkCommand.java"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class UnmarkCommand extends Command {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unmark\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks a person as absent \""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"using their unique phone number. \""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"This will also change the attendance associated with the person to Absent.\\n\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"[PHONE] \""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"91234567 \";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_MARK_PERSON_SUCCESS \u003d \"Marked Person: %1$s\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"Phone number not found in the address book\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param phone of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public UnmarkCommand(Phone phone) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Scans through the list and compares the phone numbers to the one that is being searched"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Assigns the index of the found person to the index of the command."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param lastShownList {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws CommandException if there are no matching persons in the list"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void retrieveIndex(List\u003cPerson\u003e lastShownList) throws CommandException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        int x \u003d 0;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        boolean isNotFound \u003d true;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        for (Person p : lastShownList) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            Phone temp \u003d p.getPhone();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            if (phone.equals(temp)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                isNotFound \u003d false;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            x++;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (isNotFound) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        index \u003d Index.fromZeroBased(x);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        retrieveIndex(lastShownList);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Name updatedName \u003d personToEdit.getName();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Phone updatedPhone \u003d personToEdit.getPhone();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Email updatedEmail \u003d personToEdit.getEmail();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Payment updatedPayment \u003d personToEdit.getPayment();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Attendance updatedAttendance \u003d editPersonDescriptor.getAttendance().orElse(personToEdit.getAttendance());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedPayment,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                updatedAttendance, updatedTags);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!(other instanceof UnmarkCommand)) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        UnmarkCommand e \u003d (UnmarkCommand) other;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        private Payment payment;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        private Attendance attendance;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            setName(null);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            setPhone(null);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            setEmail(null);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            setPayment(null);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            setAttendance(new Attendance(\"ABSENT\"));"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            setTags(null);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setPayment(Payment payment) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.payment \u003d payment;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cPayment\u003e getPayment() {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(payment);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setAttendance(Attendance attendance) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cAttendance\u003e getAttendance() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(attendance);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "         */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getPayment().equals(e.getPayment())"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getAttendance().equals(e.getAttendance())"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\MarkCommandParser.java"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\MarkCommandParser.java"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class MarkCommandParser implements Parser\u003cMarkCommand\u003e {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public MarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Phone phone;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            phone \u003d ParserUtil.parsePhone(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new MarkCommand(phone);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\UnmarkCommandParser.java"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class UnmarkCommandParser implements Parser\u003cUnmarkCommand\u003e {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public UnmarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Phone phone;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            phone \u003d ParserUtil.parsePhone(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnmarkCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new UnmarkCommand(phone);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 488
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * This is the main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 1,
      "-": 206,
      "SandhyaGopakumar": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private String appTitle \u003d \"Invités\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_EXTENSION \u003d \"Invalid file extension! \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_PATH \u003d \"Invalid file path! \\n%1$s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"%1$s does not exists!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String MESSAGE_FILE_ALREADY_EXIST \u003d \"%1$s already exists!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String MESSAGE_USERNAME_NOT_PROVIDED \u003d \"Error: you have not provided your username \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                                                + \"for authentication in the file src/main/\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                                                + \"resources/EmailData/Credentials.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String MESSAGE_PASSWORD_NOT_PROVIDED \u003d \"Error: you have not provided your password \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                                                + \"for authentication in the file src/main/\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                                                + \"resources/EmailData/Credentials.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String MESSAGE_EMAIL_SUBJECT_NOT_PROVIDED \u003d \"Error: you have not included the subject \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                                                    + \"of your email in the file src/main/\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                                                    + \"resources/EmailData/Message.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String MESSAGE_EMAIL_MESSAGE_NOT_PROVIDED \u003d \"Error: you have not included the message \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                                                    + \"of your email in the file src/main/\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                                                    + \"resources/EmailData/Message.txt\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String MESSAGE_PARSE_ERROR_MESSAGE \u003d \"Error: You have not provided either your \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                                             + \"email message, email subject, password, or \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                                             + \"username in Credentials.txt or Message.txt. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                                             + \"Please ensure you enclose all the parameters \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                                             + \"within quotation marks!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_PERSONS_FILTERED_OVERVIEW \u003d \"Filtered by: %1$s\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 17,
      "SarahTaaherBonna": 1,
      "wm28": 4,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ReadOnlyAddressBook data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"number of persons \" + data.getPersonList().size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public Event getNewDetails() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return this.data.getEventDetails();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "SandhyaGopakumar": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public final boolean isCorrectCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public NewResultAvailableEvent(String message, boolean isCorrectCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        this.isCorrectCommand \u003d isCorrectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/PersonPanelSelectionClearedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author wm28"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": " * Indicates that selection is cleared in the Person List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "public class PersonPanelSelectionClearedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wm28": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wm28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Returns true if {@code path} has the file extension, {@code extension}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wm28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @param path      A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @param extension A string representing the file extension type. Cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static boolean isValidFileExtension(String path, String extension) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wm28"
        },
        "content": "        extension \u003d extension.toLowerCase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wm28"
        },
        "content": "        path \u003d path.toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wm28"
        },
        "content": "        if (!path.endsWith(\".\" + extension)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wm28"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wm28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wm28": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/QrUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": "import com.google.zxing.BarcodeFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "import com.google.zxing.WriterException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "import com.google.zxing.common.BitMatrix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": "import com.google.zxing.qrcode.QRCodeWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "import javafx.embed.swing.SwingFXUtils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "import javafx.scene.image.PixelWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": " * Helper functions for generating QR codes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": "public class QrUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final int MAX_DATA_SIZE \u003d 100;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final int QR_SIZE \u003d 256;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Generates a QR code based on the input string. The current output is to an image file, however, depending"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * on the implementation of the mail sending API, this can be changed to return something more suitable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wm28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Limits data to MAX_DATA_SIZE to make QR code suitable for the current QR_SIZE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static void generateQr(String data) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wm28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wm28"
        },
        "content": "            if (data.length() \u003e MAX_DATA_SIZE) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wm28"
        },
        "content": "                throw new WriterException(\"Data size too large\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wm28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wm28"
        },
        "content": "            QRCodeWriter qrCodeWriter \u003d new QRCodeWriter();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wm28"
        },
        "content": "            BitMatrix bitMatrix \u003d qrCodeWriter.encode(data, BarcodeFormat.QR_CODE, QR_SIZE, QR_SIZE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wm28"
        },
        "content": "            //Solution below adapted from https://docs.oracle.com/javafx/2/image_ops/jfxpub-image_ops.htm"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wm28"
        },
        "content": "            WritableImage writableImage \u003d new WritableImage(256, 256);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wm28"
        },
        "content": "            PixelWriter pixelWriter \u003d writableImage.getPixelWriter();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wm28"
        },
        "content": "            for (int i \u003d 0; i \u003c bitMatrix.getHeight(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wm28"
        },
        "content": "                for (int j \u003d 0; j \u003c bitMatrix.getWidth(); j++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wm28"
        },
        "content": "                    if (bitMatrix.get(i, j)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wm28"
        },
        "content": "                        pixelWriter.setColor(i, j, Color.BLACK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wm28"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wm28"
        },
        "content": "                        pixelWriter.setColor(i, j, Color.WHITE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wm28"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wm28"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wm28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wm28"
        },
        "content": "            //@@author {wm28}-reused"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wm28"
        },
        "content": "            // Reused from https://community.oracle.com/thread/2450090?tstart\u003d0 with minor modifications"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wm28"
        },
        "content": "            File file \u003d new File(\"qr.png\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wm28"
        },
        "content": "            BufferedImage bufferedImage \u003d SwingFXUtils.fromFXImage(writableImage, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wm28"
        },
        "content": "            ImageIO.write(bufferedImage, \"png\", file);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wm28"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wm28"
        },
        "content": "        } catch (WriterException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wm28"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wm28"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wm28"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wm28": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    Event getEventDetails();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "SandhyaGopakumar": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public Event getEventDetails() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return model.getEventDetails();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "SandhyaGopakumar": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_PAYMENT + \"PAYMENT \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_ATTENDANCE + \"ATTENDANCE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@gmail.com \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_PAYMENT + \"PAID \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_ATTENDANCE + \"PRESENT \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_TAG + \"NORMAL \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_TAG + \"NoShrimp \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_TAG + \"NORMAL \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 10,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "//@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * Adds an event to the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_event\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the application. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            + PREFIX_NAME + \"NAME \" + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            + PREFIX_DATE + \"DATE\" + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            + PREFIX_VENUE + \"VENUE\" + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            + PREFIX_START_TIME + \"START TIME\" + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            + PREFIX_NAME + \"Wedding \" + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            + PREFIX_DATE + \"10/10/2018 \" + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            + PREFIX_VENUE + \"Mandarin Hotel, 5th floor, Room 1A\" + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            + PREFIX_START_TIME + \"10:00 AM\" + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            + PREFIX_TAG + \"ClassicTheme\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"An event already exists in the application\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (model.hasEvent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SandhyaGopakumar": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "//@@author aaryamNUS"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * Adds a set of tags from all the people in the current GuestBook"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTag\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the specified tags from all \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + \"persons in the list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + PREFIX_TAG + \"VIP \" + PREFIX_TAG + \"Paid\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String MESSAGE_ADDED_TAG_SUCCESS \u003d \"Successfully added all tags to %1$d persons\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static final String MESSAGE_NO_PERSON_IN_LIST \u003d \"No persons in the list!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"execute\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private final Set\u003cTag\u003e tagsToAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @param tagsToAdd of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public AddTagCommand(Set\u003cTag\u003e tagsToAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        requireNonNull(tagsToAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        this.tagsToAdd \u003d tagsToAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ReadOnlyAddressBook currentAddressBookReadOnly \u003d model.getAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // Uses edited AddressBook API to make an editable AddressBook for removeTag() to work"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddressBook currentAddressBook \u003d new AddressBook(currentAddressBookReadOnly);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        List\u003cPerson\u003e currentList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (currentList.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PERSON_IN_LIST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            for (Tag tagToBeAdded: tagsToAdd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                currentAddressBook.addTag(tagToBeAdded);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            logger.log(Level.INFO, \"All tags added successfully\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            model.resetData(currentAddressBook);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ADDED_TAG_SUCCESS, currentList.size()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (!(other instanceof MarkCommand)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddTagCommand e \u003d (AddTagCommand) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return tagsToAdd.equals(e.tagsToAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "//@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_event\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            + \": Deletes the event in the addressbook currently.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            + \"Parameters: none\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted event details.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String MESSAGE_NO_EVENT_DETAILS \u003d \"Event details have not been put in yet.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (!model.hasEvent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new CommandException(MESSAGE_NO_EVENT_DETAILS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        model.deleteEvent();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                || (other instanceof DeleteEventCommand); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SandhyaGopakumar": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"[\" + PREFIX_PAYMENT + \"PAYMENT] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"[\" + PREFIX_ATTENDANCE + \"ATTENDANCE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@gmail.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Payment updatedPayment \u003d editPersonDescriptor.getPayment().orElse(personToEdit.getPayment());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Attendance updatedAttendance \u003d editPersonDescriptor.getAttendance().orElse(personToEdit.getAttendance());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedPayment,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                updatedAttendance, updatedTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        private Payment payment;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        private Attendance attendance;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            setPayment(toCopy.payment);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            setAttendance(toCopy.attendance);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, payment,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    attendance, tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "content": "        //@@author Sarah"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setPayment(Payment payment) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.payment \u003d payment;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cPayment\u003e getPayment() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(payment);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setAttendance(Attendance attendance) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cAttendance\u003e getAttendance() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(attendance);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "content": "        //@@author SE-EDU"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getPayment().equals(e.getPayment())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 getAttendance().equals(e.getAttendance())"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "SarahTaaherBonna": 27,
      "-": 219
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import javax.mail.Message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import javax.mail.MessagingException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import javax.mail.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import javax.mail.Transport;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import javax.mail.internet.InternetAddress;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import javax.mail.internet.MimeMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "//@@author aaryamNUS"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * This abstract class is inherited by Mail, EMailAll, and ForceEmail commands,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * in order to reduce code duplicity."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "public abstract class Email extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Checks whether username, password, email subject and email message are"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * provided by the user. If any of the parameters are either null or an"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * empty string, the respective command exception is throw."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @throws CommandException whenever a field in the email of credentials is missing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void checkFields(String username, String password,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                            String emailSubject, String emailMessage) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (username \u003d\u003d null || username.replaceAll(\"\\\\s+\", \"\").equals(\"\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_USERNAME_NOT_PROVIDED);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } else if (password \u003d\u003d null || password.replaceAll(\"\\\\s+\", \"\").equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_PASSWORD_NOT_PROVIDED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } else if (emailSubject \u003d\u003d null || emailSubject.replaceAll(\"\\\\s+\", \"\").equals(\"\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EMAIL_SUBJECT_NOT_PROVIDED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } else if (emailMessage \u003d\u003d null || emailMessage.replaceAll(\"\\\\s+\", \"\").equals(\"\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EMAIL_MESSAGE_NOT_PROVIDED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Reads and parses the files Credentials.txt and Message.txt to retrieve"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * username, password, email message and email subject. Error handling is also performed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * through the try-catch block, which details with FileNotFoundExceptions as well as"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * General Exceptions. Once parsed, the private global variables in the MailCommand username,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * password, emailSubject, and emailMessage are set with the strings parsed from the .txt files"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public String[] retrieveInformation() throws FileNotFoundException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        String[] information \u003d new String[4];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            File credentials \u003d new File(\"src/main/resources/EmailData/Credentials.txt\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                    .getAbsoluteFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            Scanner credentialsScanner \u003d new Scanner(credentials);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            // Retrieve the two strings in Credentials.txt"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            String unmodifiedUsername \u003d credentialsScanner.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            String unmodifiedPassword \u003d credentialsScanner.nextLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            // Parse the strings to retrieve the username and password within quotation marks"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            information[0] \u003d unmodifiedUsername.split(\"\\\"\")[1];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            information[1] \u003d unmodifiedPassword.split(\"\\\"\")[1];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } catch (FileNotFoundException fe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new FileNotFoundException(\"Error: The file Credentials.txt was not found!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ae) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException(Messages.MESSAGE_PARSE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } catch (NoSuchElementException ne) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new NoSuchElementException(\"Error: Please specify your credentials, email message, \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                    + \"and email subject in Credentials.txt and Message.txt\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            File message \u003d new File(\"src/main/resources/EmailData/Message.txt\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                    .getAbsoluteFile();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            Scanner messageScanner \u003d new Scanner(message);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            String unmodifiedSubject \u003d messageScanner.nextLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            StringBuilder unmodifiedMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            while (messageScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                unmodifiedMessage.append(messageScanner.nextLine());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                unmodifiedMessage.append(\"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            information[2] \u003d unmodifiedSubject.split(\"\\\"\")[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            information[3] \u003d unmodifiedMessage.toString().split(\"\\\"\")[1];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } catch (FileNotFoundException fe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new FileNotFoundException(\"Error: The file Message.txt was not found!\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } catch (NoSuchElementException ne) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new NoSuchElementException(\"Error: Please specify your credentials, email message, \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                    + \"and email subject in Credentials.txt and Message.txt\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ae) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException(Messages.MESSAGE_PARSE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return information;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Creates a connection to the host gmail account via gmail\u0027s smtp port"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @return the properties of the host domain server, in this case gmail"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public Properties createPropertiesConfiguration() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // Connects to Gmail using it\u0027s smtp port and previous authorization"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return new Properties() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                put(\"mail.smtp.auth\", \"true\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                put(\"mail.smtp.starttls.enable\", \"true\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                put(\"mail.smtp.host\", \"smtp.gmail.com\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                put(\"mail.smtp.port\", \"587\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        };"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Creates the message of the email using the emailMessage and emailSubject parameters"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * provided, and sends the email using Transport.send(). Moreover, the \u0027to\u0027 and \u0027from\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * fields are provided by the child classes"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void createAndSendEmail(String username, String emailSubject, String emailMessage,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                              String recipient, Session session) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            // Creates a default MimeMessage object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            Message message \u003d new MimeMessage(session);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            // Set the email of the host"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            message.setFrom(new InternetAddress(username));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            // Set the email of the guest"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            message.setRecipients(Message.RecipientType.TO,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                    InternetAddress.parse(recipient));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            // Set email subject and message"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            message.setSubject(emailSubject);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            message.setText(emailMessage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            Transport.send(message);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } catch (MessagingException mex) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new CommandException(\"Error: could not send email, please ensure you have strong \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                    + \"internet connectivity.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * This method checks whether a given email address has the valid format, through the use"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * of a Java Regular expression, which is a special sequence of characters that allows you"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * to match and find other strings or sets of strings"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * A basic outline of the \u0027expression\u0027 string is given below:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Subexpression                                Meaning"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *      ^                           Matches the beginning of the line"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *      $                           Matches the end of the line"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *    [...]                         Matches with any character in the brackets"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *     \\w                           Matches any word characters"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *    {2,4}                         Matches between 2 and 4 occurrences of preceding expressions"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @param guestAddress is the address of the guest you wish to send an email to"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @return a boolean that determines whether the given email address is of the correct format"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * The following regular expression was adapted from zParacha.com,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Source: http://zparacha.com/ultimate-java-regular-expression-to-validate-email-address"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public boolean isValidEmail (String guestAddress) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        String expression \u003d \"^[\\\\w\\\\-]([\\\\w])+[\\\\w]+@([\\\\w\\\\-]+\\\\.)+[A-Z]{2,4}$\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // Create a pattern object using the expression provided"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(expression, Pattern.CASE_INSENSITIVE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // Create the corresponding matcher object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(guestAddress);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return matcher.matches();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 185
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EmailAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import javax.mail.Authenticator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import javax.mail.PasswordAuthentication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import javax.mail.Session;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "//@@author aaryamNUS"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * Sends an email to the specified person in the guest list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "public class EmailAllCommand extends Email {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"emailAll\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sends an email to all guests in the \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + \"current filtered list\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static final String MESSAGE_MAIL_ALL_PERSON_SUCCESS \u003d \"Successfully sent an email to %1$d persons, \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + \"could not send an email to %2$d guests will addresses: %3$s!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"execute\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static EmailAllCommand emailCommandSimpleton \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static String username;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static String password;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private EmailAllCommand() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Applying the Simpleton design pattern to EmailAllCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static EmailAllCommand getInstance() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (emailCommandSimpleton \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            emailCommandSimpleton \u003d new EmailAllCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return emailCommandSimpleton;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Sends an email to all the persons in the current filtered list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @param model is instantiated to get the latest filtered person list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        String emailSubject;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        String emailMessage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        StringBuilder invalidEmails \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        int successfulEmails \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        int failedEmails \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        for (Person personToMail : lastShownList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            assert personToMail !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            if (!isValidEmail(personToMail.getEmail().toString())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                failedEmails++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                String invalidEmail \u003d \" || \" + personToMail.getEmail().toString() + \" || \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                invalidEmails.append(invalidEmail);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            // Retrieve all email fields and user credentials and validate that they are not null"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                // Array of strings to store all the necessary information"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                String[] information;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                // Retrieve the information through a method in the super class Email"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                information \u003d retrieveInformation();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                emailSubject \u003d information[2];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                emailMessage \u003d information[3];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                username \u003d information[0];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                password \u003d information[1];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                // Verify the information exists through the method in the super class Email"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                checkFields(username, password, emailSubject, emailMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            } catch (FileNotFoundException | NoSuchElementException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                failedEmails \u003d lastShownList.size();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                successfulEmails \u003d 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                for (Person person : lastShownList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                    String personEmail \u003d person.getEmail().toString() + \" \";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                    invalidEmails.append(personEmail);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            // Creates a new session with the user gmail account as the host"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            Properties props \u003d createPropertiesConfiguration();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            // Authenticate the user credentials"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            EmailPasswordAuthenticator authenticate \u003d new EmailPasswordAuthenticator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            // Create a new session using the authenticated credentials and the properties of"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            // the Gmail host"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            Session session \u003d Session.getDefaultInstance(props, authenticate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            createAndSendEmail(username, emailSubject, emailMessage,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                    personToMail.getEmail().toString(), session);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            successfulEmails++;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        logger.log(Level.INFO, \"All emails sent successfully!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MAIL_ALL_PERSON_SUCCESS, successfulEmails,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                failedEmails, invalidEmails));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public Properties createPropertiesConfiguration() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return super.createPropertiesConfiguration();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public String[] retrieveInformation() throws FileNotFoundException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return super.retrieveInformation();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void checkFields(String username, String password, String emailSubject,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                            String emailMessage) throws CommandException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        super.checkFields(username, password, emailSubject, emailMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        logger.log(Level.INFO, \"All fields from Credentials.txt and Message.txt\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                + \"received successfully\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Authenticates the user account based on the credentials provided"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static class EmailPasswordAuthenticator extends Authenticator {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        public PasswordAuthentication getPasswordAuthentication() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return new PasswordAuthentication(username, password);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void createAndSendEmail(String username, String emailSubject, String emailMessage,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                   String recipient, Session session) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        super.createAndSendEmail(username, emailSubject, emailMessage, recipient, session);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public boolean isValidEmail(String guestAddress) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return super.isValidEmail(guestAddress);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (!(other instanceof EmailAllCommand)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        EmailAllCommand e \u003d (EmailAllCommand) other;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return e.equals(other);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 178
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.PersonConverter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.exceptions.PersonEncodingException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.AdaptedPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.SupportedFile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author wm28"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": " * Exports currently filtered guest list to a CSV file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wm28"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports guests to a CSV file. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + \"Parameters: FILE_PATH\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" guestbook.csv\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String MESSAGE_EXPORT_CSV_RESULT \u003d \"Successfully exported %1$d/%2$d guests to %3$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String MESSAGE_NO_PERSONS \u003d \"There are no persons to export!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private SupportedFile supportedFile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private PersonConverter personConverter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private int totalPersons;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private int successfulExports;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public ExportCommand(SupportedFile supportedFile, PersonConverter personConverter) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wm28"
        },
        "content": "        assert supportedFile !\u003d null : \"supportedFile cannot be null\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wm28"
        },
        "content": "        assert personConverter !\u003d null : \"personConverter cannot be null\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wm28"
        },
        "content": "        assert personConverter.getSupportedFileFormat().equals(supportedFile.getSupportedFileFormat())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wm28"
        },
        "content": "                : \"supportedFile and personConverter does not support the same file format\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wm28"
        },
        "content": "        this.personConverter \u003d personConverter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wm28"
        },
        "content": "        this.supportedFile \u003d supportedFile;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wm28"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wm28"
        },
        "content": "        ObservableList\u003cPerson\u003e filteredList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wm28"
        },
        "content": "        if (filteredList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wm28"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PERSONS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wm28"
        },
        "content": "        totalPersons \u003d filteredList.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wm28"
        },
        "content": "        successfulExports \u003d totalPersons;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wm28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wm28"
        },
        "content": "            List\u003cAdaptedPerson\u003e result \u003d exportPersons(filteredList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wm28"
        },
        "content": "            supportedFile.writeAdaptedPersons(result);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wm28"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wm28"
        },
        "content": "            throw new CommandException(ioe.getMessage(), ioe);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXPORT_CSV_RESULT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wm28"
        },
        "content": "                successfulExports, totalPersons, supportedFile.getFileName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Exports persons to csv-formatted strings"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private List\u003cAdaptedPerson\u003e exportPersons(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wm28"
        },
        "content": "        List\u003cAdaptedPerson\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wm28"
        },
        "content": "        for (Person person : personList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wm28"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wm28"
        },
        "content": "                result.add(personConverter.encodePerson(person));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wm28"
        },
        "content": "            } catch (PersonEncodingException pee) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wm28"
        },
        "content": "                successfulExports--;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wm28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "wm28": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "content": "//@@author Sarah"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose tags contain all of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Parameters: KEYWORD MORE_KEYWORDS...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/NAME p/PHONE NUMBER e/EMAIL \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"pa/PAYMENT_STATUS a/ATTENDANCE_STATUS \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"t/TAG...\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final ContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public FilterCommand(ContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "SarahTaaherBonna": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Finds and lists all persons in address book whose name, phone number or email"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names, phone number\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \" or email contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/alice n/bob n/charlie p/82736479 e/alice@u.nus.edu\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 5,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.PersonConverter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.exceptions.PersonDecodingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.AdaptedPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.SupportedFile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author wm28"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": " * Imports multiple guests into the guest list of the current event via a CSV file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports guests into current event through a CSV file. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + \"Parameters: FILE_PATH\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" guestbook.csv\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String MESSAGE_IMPORT_CSV_RESULT \u003d \"Successfully imported %1$d of %2$d guests from %3$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private SupportedFile supportedFile;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private final PersonConverter personConverter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private int successfulImports;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private int totalImports;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public ImportCommand(SupportedFile supportedFile, PersonConverter personConverter) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wm28"
        },
        "content": "        assert supportedFile !\u003d null : \"SupportedFile cannot be null\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wm28"
        },
        "content": "        assert personConverter !\u003d null : \"personConverter cannot be null\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wm28"
        },
        "content": "        assert personConverter.getSupportedFileFormat().equals(supportedFile.getSupportedFileFormat())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wm28"
        },
        "content": "                : \"supportedFile and personConverter does not support the same file format\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wm28"
        },
        "content": "        this.supportedFile \u003d supportedFile;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wm28"
        },
        "content": "        this.personConverter \u003d personConverter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wm28"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wm28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wm28"
        },
        "content": "            List\u003cAdaptedPerson\u003e persons \u003d supportedFile.readAdaptedPersons();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wm28"
        },
        "content": "            successfulImports \u003d persons.size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wm28"
        },
        "content": "            totalImports \u003d successfulImports;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wm28"
        },
        "content": "            importPersons(persons, model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wm28"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wm28"
        },
        "content": "            throw new CommandException(ioe.getMessage(), ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wm28"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wm28"
        },
        "content": "                String.format(MESSAGE_IMPORT_CSV_RESULT, successfulImports, totalImports, supportedFile.getFileName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Imports persons to the guest list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private void importPersons(List\u003cAdaptedPerson\u003e persons, Model model) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wm28"
        },
        "content": "        for (AdaptedPerson person : persons) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wm28"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wm28"
        },
        "content": "                Person toAdd \u003d personConverter.decodePerson(person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wm28"
        },
        "content": "                addPerson(toAdd, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wm28"
        },
        "content": "            } catch (PersonDecodingException pe) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wm28"
        },
        "content": "                successfulImports--;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wm28"
        },
        "content": "            } catch (CommandException ce) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wm28"
        },
        "content": "                successfulImports--;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wm28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Adds a person to the guest list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private void addPerson(Person toAdd, Model model) throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wm28"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wm28"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wm28"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wm28"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wm28"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wm28"
        },
        "content": "        if (!(other instanceof ImportCommand)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wm28"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wm28"
        },
        "content": "        ImportCommand otherIc \u003d (ImportCommand) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return supportedFile.getFileName().equals(otherIc.supportedFile.getFileName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wm28"
        },
        "content": "                \u0026\u0026 personConverter.getSupportedFileFormat().equals(otherIc.personConverter.getSupportedFileFormat());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "wm28": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MailCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import javax.mail.Authenticator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import javax.mail.PasswordAuthentication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import javax.mail.Session;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "//@@author aaryamNUS"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * Sends an email to the specified person in the guest list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "public class MailCommand extends Email {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"email\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sends an email to the specified person \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + \"provided by INDEX.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static final String MESSAGE_MAIL_PERSON_SUCCESS \u003d \"Successfully sent email!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"execute\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static String username;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static String password;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public MailCommand(Index index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Sends an email to the person at the specified INDEX"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: the following code was adapted from the SendEmail.java class code provided by @Rish on stackoverflow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        String emailSubject;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        String emailMessage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assert index !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Person personToMail \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assert personToMail !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (!isValidEmail(personToMail.getEmail().toString())) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new CommandException(\"Error: The email of the recipient is invalid!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // Retrieve all email fields and user credentials and validate that they are not null"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            // Array of strings to store all the necessary information"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            String[] information;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            // Retrieve the information through a method in the super class Email"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            information \u003d retrieveInformation();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            username \u003d information[0];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            password \u003d information[1];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            emailSubject \u003d information[2];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            emailMessage \u003d information[3];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            // Verify the information exists through the method in the super class Email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            checkFields(username, password, emailSubject, emailMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } catch (FileNotFoundException fe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new CommandException(\"Error: The file Credentials.txt or Message.txt was not found!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } catch (NoSuchElementException ne) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new CommandException(\"Error: Please specify your credentials, email message, \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                    + \"and email subject in Credentials.txt and Message.txt\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ae) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_PARSE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // Creates a new session with the user gmail account as the host"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Properties props \u003d createPropertiesConfiguration();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // Authenticate the user credentials"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        EmailPasswordAuthenticator authenticate \u003d new EmailPasswordAuthenticator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // Create a new session using the authenticated credentials and the properties of"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // the gmail host"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Session session \u003d Session.getDefaultInstance(props, authenticate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        createAndSendEmail(username, emailSubject, emailMessage,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                personToMail.getEmail().toString(), session);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        logger.log(Level.INFO, \"Email sent successfully\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return new CommandResult(MESSAGE_MAIL_PERSON_SUCCESS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public Properties createPropertiesConfiguration() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return super.createPropertiesConfiguration();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public String[] retrieveInformation() throws FileNotFoundException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return super.retrieveInformation();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void checkFields(String username, String password, String emailSubject,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                            String emailMessage) throws CommandException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        super.checkFields(username, password, emailSubject, emailMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        logger.log(Level.INFO, \"All fields from Credentials.txt and Message.txt\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                + \"received successfully\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Authenticates the user account based on the credentials provided"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static class EmailPasswordAuthenticator extends Authenticator {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        public PasswordAuthentication getPasswordAuthentication() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return new PasswordAuthentication(username, password);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void createAndSendEmail(String username, String emailSubject, String emailMessage,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                   String recipient, Session session) throws CommandException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        super.createAndSendEmail(username, emailSubject, emailMessage, recipient, session);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public boolean isValidEmail(String guestAddress) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return super.isValidEmail(guestAddress);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (!(other instanceof MailCommand)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        MailCommand e \u003d (MailCommand) other;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 167,
      "SarahTaaherBonna": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MarkCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kronicler"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kronicler"
        },
        "content": "//@@author kronicler"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kronicler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kronicler"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kronicler"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kronicler"
        },
        "content": "public class MarkCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mark\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks a person as present \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            + \"using their unique phone number. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            + \"This will also change the a/ tag associated with the person to Present.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            + \"[PHONE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            + \"91234567 \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public static final String MESSAGE_MARK_PERSON_SUCCESS \u003d \"Marked Person: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"Phone number not found in the address book\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * @param phone of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public MarkCommand(Phone phone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * Scans through the list and compares the phone numbers to the one that is being searched"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * Assigns the index of the found person to the index of the command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * @param lastShownList {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * @throws CommandException if there are no matching persons in the list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public void retrieveIndex(List\u003cPerson\u003e lastShownList) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        int x \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        boolean isNotFound \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        for (Person p : lastShownList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            Phone temp \u003d p.getPhone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            if (phone.equals(temp)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                isNotFound \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            x++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        if (isNotFound) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        index \u003d Index.fromZeroBased(x);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        retrieveIndex(lastShownList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Name updatedName \u003d personToEdit.getName();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Phone updatedPhone \u003d personToEdit.getPhone();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Email updatedEmail \u003d personToEdit.getEmail();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 107,
        "content": "        //@@author Sarah"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Payment updatedPayment \u003d personToEdit.getPayment();"
      },
      {
        "lineNumber": 109,
        "content": "        //@@author"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        //@@author kronicler"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Attendance updatedAttendance \u003d editPersonDescriptor.getAttendance().orElse(personToEdit.getAttendance());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedPayment,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                updatedAttendance, updatedTags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        if (!(other instanceof MarkCommand)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        MarkCommand e \u003d (MarkCommand) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        private Payment payment;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        private Attendance attendance;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            setName(null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            setPhone(null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            setEmail(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            setPayment(null);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            setAttendance(new Attendance(\"PRESENT\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            setTags(null);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 185,
        "content": "        //@@author Sarah"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public void setPayment(Payment payment) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            this.payment \u003d payment;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        public Optional\u003cPayment\u003e getPayment() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return Optional.ofNullable(payment);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "content": "        //@@author"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        //@@author kronicler"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public void setAttendance(Attendance attendance) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public Optional\u003cAttendance\u003e getAttendance() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return Optional.ofNullable(attendance);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                    \u0026\u0026 getPayment().equals(e.getPayment())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                    \u0026\u0026 getAttendance().equals(e.getAttendance())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kronicler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 4,
      "kronicler": 229,
      "SarahTaaherBonna": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "//@@author aaryamNUS"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * Removes a set of tags from all the people in the current GuestBook"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "public class RemoveTagCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removeTag\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes the specified tag \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + \"from all persons in the list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + PREFIX_TAG + \"VIP \" + PREFIX_TAG + \"Paid\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String MESSAGE_REMOVED_TAG_SUCCESS \u003d \"Successfully removed all tags from %1$d persons\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String MESSAGE_NO_PERSON_WITH_TAG \u003d \"No persons in the list have the specified tags\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"calculateNumberOfPeopleToChange\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private int numberOfPeopleToChange \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private final Set\u003cTag\u003e tagsToRemove;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @param tagsToRemove of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public RemoveTagCommand(Set\u003cTag\u003e tagsToRemove) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        requireNonNull(tagsToRemove);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        this.tagsToRemove \u003d tagsToRemove;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        List\u003cPerson\u003e currentList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ReadOnlyAddressBook currentAddressBookReadOnly \u003d model.getAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // Uses edited AddressBook API to make an editable AddressBook for removeTag() to work"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddressBook currentAddressBook \u003d new AddressBook(currentAddressBookReadOnly);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        calculateNumberOfPeopleToChange(currentList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (numberOfPeopleToChange \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PERSON_WITH_TAG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            for (Tag tagToBeRemoved: tagsToRemove) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                currentAddressBook.removeTag(tagToBeRemoved);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            logger.log(Level.INFO, \"All tags removed successfully\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            model.resetData(currentAddressBook);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_REMOVED_TAG_SUCCESS, numberOfPeopleToChange));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (!(other instanceof MarkCommand)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        RemoveTagCommand e \u003d (RemoveTagCommand) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return tagsToRemove.equals(e.tagsToRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Calculates how many people in the list have at least one tag matching with the set of"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * tags to be removed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @param currentList the current list of guests"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private void calculateNumberOfPeopleToChange(List\u003cPerson\u003e currentList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assert numberOfPeopleToChange \u003d\u003d 0 : \"numberOfPeopleToChange should start at 0\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Set\u003cTag\u003e currentTags;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        for (Person personToBeEdited : currentList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            currentTags \u003d personToBeEdited.getTags();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            for (Tag tagToBeRemoved: tagsToRemove) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                    if (currentTags.contains(tagToBeRemoved)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                        numberOfPeopleToChange++;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                    logger.log(Level.WARNING, \"Incorrect format for tags\", ex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnmarkCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kronicler"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kronicler"
        },
        "content": "//@@author kronicler"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kronicler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kronicler"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kronicler"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kronicler"
        },
        "content": "public class UnmarkCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unmark\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks a person as absent \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            + \"using their unique phone number. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            + \"This will also change the attendance associated with the person to Absent.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            + \"[PHONE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            + \"91234567 \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public static final String MESSAGE_MARK_PERSON_SUCCESS \u003d \"Marked Person: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"Phone number not found in the address book\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * @param phone of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public UnmarkCommand(Phone phone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * Scans through the list and compares the phone numbers to the one that is being searched"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * Assigns the index of the found person to the index of the command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * @param lastShownList {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * @throws CommandException if there are no matching persons in the list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public void retrieveIndex(List\u003cPerson\u003e lastShownList) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        int x \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        boolean isNotFound \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        for (Person p : lastShownList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            Phone temp \u003d p.getPhone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            if (phone.equals(temp)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                isNotFound \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            x++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        if (isNotFound) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        index \u003d Index.fromZeroBased(x);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        retrieveIndex(lastShownList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Name updatedName \u003d personToEdit.getName();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Phone updatedPhone \u003d personToEdit.getPhone();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Email updatedEmail \u003d personToEdit.getEmail();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Payment updatedPayment \u003d personToEdit.getPayment();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Attendance updatedAttendance \u003d editPersonDescriptor.getAttendance().orElse(personToEdit.getAttendance());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedPayment,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                updatedAttendance, updatedTags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        if (!(other instanceof UnmarkCommand)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        UnmarkCommand e \u003d (UnmarkCommand) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        private Payment payment;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        private Attendance attendance;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            setName(null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            setPhone(null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            setEmail(null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            setPayment(null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            setAttendance(new Attendance(\"ABSENT\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            setTags(null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public void setPayment(Payment payment) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            this.payment \u003d payment;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public Optional\u003cPayment\u003e getPayment() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return Optional.ofNullable(payment);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public void setAttendance(Attendance attendance) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public Optional\u003cAttendance\u003e getAttendance() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return Optional.ofNullable(attendance);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kronicler"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                    \u0026\u0026 getPayment().equals(e.getPayment())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                    \u0026\u0026 getAttendance().equals(e.getAttendance())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kronicler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kronicler": 237
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/converters/CsvConverter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.logic.converters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.exceptions.PersonDecodingException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.exceptions.PersonEncodingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.AdaptedPerson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.SupportedFileFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.csv.CsvAdaptedPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author wm28"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wm28"
        },
        "content": " * Converts a person between the {@code CsvAdaptedPerson} and the {@code Person}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": "public class CsvConverter implements PersonConverter {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private static final Pattern PERSON_CSV_INPUT_FORMAT \u003d Pattern.compile(\"[\\\"|\u0027]?(?\u003cname\u003e[^\\\"\u0027,]*)[\\\"|\u0027]?,\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + \"[\\\"|\u0027]?(?\u003cphone\u003e[^\\\"\u0027,]*)[\\\"|\u0027]?,\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + \"[\\\"|\u0027]?(?\u003cemail\u003e[^\\\"\u0027,]*)[\\\"|\u0027]?,\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + \"[\\\"|\u0027]?(?\u003cpayment\u003e[^\\\"\u0027,]*)[\\\"|\u0027]?,\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + \"[\\\"|\u0027]?(?\u003cattendance\u003e[^\\\"\u0027,]*)[\\\"|\u0027]?,?\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + \"(?\u003ctags\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private final SupportedFileFormat supportedFileFormat \u003d SupportedFileFormat.CSV;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Encodes a {@code Person} object to a csv-formatted person, {@code CsvAdaptedPerson}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wm28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @param person to be encoded"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @return AdaptedPerson which which is an instance of the CsvAdaptedPerson class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @throws PersonEncodingException if the person fails to encode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public AdaptedPerson encodePerson(Person person) throws PersonEncodingException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wm28"
        },
        "content": "        if (person \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wm28"
        },
        "content": "            throw new PersonEncodingException(\"Person is null\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wm28"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wm28"
        },
        "content": "        result.append(person.getName() + \",\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wm28"
        },
        "content": "        result.append(person.getPhone() + \",\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wm28"
        },
        "content": "        result.append(person.getEmail() + \",\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wm28"
        },
        "content": "        result.append(person.getPayment() + \",\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wm28"
        },
        "content": "        result.append(person.getAttendance() + \",\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wm28"
        },
        "content": "        result.append(person.getTags().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .collect(Collectors.joining(\",\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return new CsvAdaptedPerson(result.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Decodes csv-formatted person,{@code CsvAdaptedPerson}, into a {@code Person} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wm28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @param personInput Csv-formatted person input string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @return Person based on the csv-formatted input string of the guest"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @throws PersonDecodingException if the csv input does not conform to the expected format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public Person decodePerson(AdaptedPerson personInput) throws PersonDecodingException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wm28"
        },
        "content": "        Matcher matcher \u003d PERSON_CSV_INPUT_FORMAT.matcher(personInput.getFormattedString().trim());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wm28"
        },
        "content": "        Person person;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wm28"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wm28"
        },
        "content": "            throw new PersonDecodingException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wm28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wm28"
        },
        "content": "            Name name \u003d ParserUtil.parseName(matcher.group(\"name\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wm28"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(matcher.group(\"phone\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wm28"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(matcher.group(\"email\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wm28"
        },
        "content": "            Payment payment \u003d ParserUtil.parsePayment(matcher.group(\"payment\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wm28"
        },
        "content": "            Attendance attendance \u003d ParserUtil.parseAttendance(matcher.group(\"attendance\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wm28"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d splitTags(matcher.group(\"tags\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wm28"
        },
        "content": "            person \u003d new Person(name, phone, email, payment, attendance, tagList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wm28"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wm28"
        },
        "content": "            throw new PersonDecodingException(pe.getMessage(), pe);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public SupportedFileFormat getSupportedFileFormat() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return supportedFileFormat;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Splits and parses the tags into a set of Tags"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wm28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @param tags String input tags"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @return set of parsed Tags"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @throws ParseException if the csv input does not conform to the expected format"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private Set\u003cTag\u003e splitTags(String tags) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wm28"
        },
        "content": "        if (tags.trim().isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wm28"
        },
        "content": "            return new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return ParserUtil.parseTags(Arrays.asList(tags.split(\",\")));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 2,
      "wm28": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/converters/PersonConverter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.logic.converters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.exceptions.PersonDecodingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.exceptions.PersonEncodingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.AdaptedPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.SupportedFileFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author wm28"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": " * Represents a Converter that is able to convert between a {@code Person} and an {@code AdaptedPerson}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "public interface PersonConverter {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Encodes {@code Person} into an {@code AdaptedPerson}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @throws PersonEncodingException if {@code person} does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": "    AdaptedPerson encodePerson(Person person) throws PersonEncodingException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Decodes {@code AdaptedPerson} into a {@code Person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @throws PersonDecodingException if {@code person} does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": "    Person decodePerson(AdaptedPerson person) throws PersonDecodingException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Returns the file format the particular PersonConverter supports"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wm28"
        },
        "content": "    SupportedFileFormat getSupportedFileFormat();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wm28": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/converters/exceptions/PersonDecodingException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.logic.converters.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author wm28"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": " * Represents a decoding error encountered by a PersonConverter."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": "public class PersonDecodingException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public PersonDecodingException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public PersonDecodingException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wm28": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/converters/exceptions/PersonEncodingException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.logic.converters.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author wm28"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": " * Represents an encoding error encountered by a PersonConverter."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": "public class PersonEncodingException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public PersonEncodingException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public PersonEncodingException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wm28": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/converters/fileformats/AdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.logic.converters.fileformats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author wm28"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": " * Represents a Person formatted according to any the supported file formats"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": "public abstract class AdaptedPerson {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public abstract String getFormattedString();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "wm28": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/converters/fileformats/SupportedFile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.logic.converters.fileformats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author wm28"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": " * Represents a supported file that can read and write AdaptedPersons"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "public interface SupportedFile {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Read {@code} AdaptedPerson of all types from file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "    List\u003cAdaptedPerson\u003e readAdaptedPersons() throws IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Write {@code} AdaptedPerson of all types to file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wm28"
        },
        "content": "    void writeAdaptedPersons(List\u003cAdaptedPerson\u003e adaptedPersons) throws IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Returns the file format the PersonConverter supports"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": "    SupportedFileFormat getSupportedFileFormat();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Returns the file name of the file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wm28"
        },
        "content": "    String getFileName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "wm28": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/converters/fileformats/SupportedFileFormat.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.logic.converters.fileformats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author wm28"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": " * Represents a supported file format for the import \u0026 export commands"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": "public enum SupportedFileFormat {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": "    CSV;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "wm28": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/converters/fileformats/csv/CsvAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.logic.converters.fileformats.csv;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.AdaptedPerson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author wm28"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": " * Represents a Csv-formatted person"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "public class CsvAdaptedPerson extends AdaptedPerson {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private final String csvFormattedPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public CsvAdaptedPerson(String csvFormattedPerson) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "        this.csvFormattedPerson \u003d csvFormattedPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public String getFormattedString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return csvFormattedPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return csvFormattedPerson.equals(((CsvAdaptedPerson) other).getFormattedString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "wm28": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/converters/fileformats/csv/CsvFile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.logic.converters.fileformats.csv;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FILE_ALREADY_EXIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.nio.file.FileAlreadyExistsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.AdaptedPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.SupportedFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.SupportedFileFormat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author wm28"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wm28"
        },
        "content": " * Represents a csv file that can read and write AdaptedPersons"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": "public class CsvFile implements SupportedFile {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private final Path fileName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private final SupportedFileFormat supportedFileFormat \u003d SupportedFileFormat.CSV;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public CsvFile(String fileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wm28"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": "        this.fileName \u003d Paths.get(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Reads data in file and returns csv-formatted person, {@code CsvAdaptedPerson}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wm28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @return A List of AdaptedPerson which has objects of the CsvAdaptedPerson class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @throws IOException if file fails to read"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public List\u003cAdaptedPerson\u003e readAdaptedPersons() throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wm28"
        },
        "content": "        if (!FileUtil.isFileExists(fileName)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wm28"
        },
        "content": "            throw new FileNotFoundException(String.format(MESSAGE_FILE_NOT_FOUND, fileName.toAbsolutePath()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wm28"
        },
        "content": "        String fileContent \u003d FileUtil.readFromFile(fileName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wm28"
        },
        "content": "        List\u003cString\u003e dataLines \u003d Arrays.asList(fileContent.split(\"\\\\r?\\\\n\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wm28"
        },
        "content": "        List\u003cAdaptedPerson\u003e result \u003d dataLines.stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .filter((dataLine) -\u003e !dataLine.trim().isEmpty())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .map(line -\u003e new CsvAdaptedPerson(line))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Write data csv-formatted person, {@code CsvAdaptedPerson}, into the file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wm28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @param adaptedPersons A list of AdaptedPerson, which contains CsvAdaptedPerson."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @throws IOException if file fails to write."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void writeAdaptedPersons(List\u003cAdaptedPerson\u003e adaptedPersons) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wm28"
        },
        "content": "        if (FileUtil.isFileExists(fileName)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wm28"
        },
        "content": "            throw new FileAlreadyExistsException(String.format(MESSAGE_FILE_ALREADY_EXIST, fileName.toAbsolutePath()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wm28"
        },
        "content": "        FileUtil.writeToFile(fileName, adaptedPersons.stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .map((adaptedPerson) -\u003e adaptedPerson.getFormattedString())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .collect(Collectors.joining(\"\\n\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public SupportedFileFormat getSupportedFileFormat() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return supportedFileFormat;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return fileName.getFileName().toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "wm28": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        PREFIX_EMAIL, PREFIX_PAYMENT, PREFIX_ATTENDANCE, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                PREFIX_EMAIL, PREFIX_PAYMENT, PREFIX_ATTENDANCE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Payment payment \u003d ParserUtil.parsePayment(argMultimap.getValue(PREFIX_PAYMENT).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Attendance attendance \u003d ParserUtil.parseAttendance(argMultimap.getValue(PREFIX_ATTENDANCE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person person \u003d new Person(name, phone, email, payment, attendance, tagList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 11,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventStartTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventVenue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * Parses input arguments and creates a new AddEventCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_VENUE, PREFIX_START_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATE, PREFIX_VENUE, PREFIX_START_TIME)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        EventName eventName \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        EventDate eventDate \u003d ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        EventVenue eventVenue \u003d ParserUtil.parseEventVenue(argMultimap.getValue(PREFIX_VENUE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        EventStartTime eventStartTime \u003d ParserUtil.parseEventStartTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        Event event \u003d new Event(eventName, eventDate, eventVenue, eventStartTime, tagList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return new AddEventCommand(event);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SandhyaGopakumar": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "//@@author aaryamNUS"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * Parses input arguments and creates a new AddTagCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTagCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * and returns an AddTagCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public AddTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (!AddTagCommandParser.arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return new AddTagCommand(tagList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Returns true if the tag prefix does not return empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.commands.EmailAllCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.commands.MailCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.logic.commands.MarkCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.commands.RemoveTagCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.logic.commands.UnmarkCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        //@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        //@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            return new DeleteEventCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "content": "            //@@author Sarah"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "content": "            //@@author"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wm28"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wm28"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        case MarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return new MarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        case UnmarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            return new UnmarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case RemoveTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return new RemoveTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return new AddTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wm28"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wm28"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case MailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return new MailCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case EmailAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return EmailAllCommand.getInstance();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "aaryamNUS": 17,
      "kronicler": 8,
      "SarahTaaherBonna": 4,
      "wm28": 8,
      "-": 92,
      "SandhyaGopakumar": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "content": "    //@@author Sarah"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final Prefix PREFIX_PAYMENT \u003d new Prefix(\"pa/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final Prefix PREFIX_ATTENDANCE \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "content": "    //@@author"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "SarahTaaherBonna": 2,
      "-": 14,
      "SandhyaGopakumar": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        PREFIX_PAYMENT, PREFIX_ATTENDANCE, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "content": "        //@@author Sarah"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PAYMENT).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            editPersonDescriptor.setPayment(ParserUtil.parsePayment(argMultimap.getValue(PREFIX_PAYMENT).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ATTENDANCE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            editPersonDescriptor.setAttendance(ParserUtil.parseAttendance("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    argMultimap.getValue(PREFIX_ATTENDANCE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "content": "        //@@author"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "SarahTaaherBonna": 9,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FILE_EXTENSION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FILE_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.CsvConverter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.csv.CsvFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author wm28"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "public class ExportCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String DEFAULT_FILENAME_FORMAT \u003d \"exportedGuestBook.csv\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Parses the given argument {@code String} in the context of the ExportCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public ExportCommand parse(String arg) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wm28"
        },
        "content": "        String trimmedArg \u003d arg.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wm28"
        },
        "content": "        if (trimmedArg.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wm28"
        },
        "content": "            return new ExportCommand(new CsvFile(DEFAULT_FILENAME_FORMAT), new CsvConverter());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": "        } else if (!FileUtil.isValidPath(trimmedArg)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FILE_PATH, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wm28"
        },
        "content": "        } else if (!FileUtil.isValidFileExtension(trimmedArg, \"csv\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wm28"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FILE_EXTENSION, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return new ExportCommand(new CsvFile(trimmedArg), new CsvConverter());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "wm28": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "content": "//@@author Sarah"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * and returns an FilterCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        ArrayList\u003cString\u003e checking \u003d new ArrayList\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        for (int i \u003d 0; i \u003c checking.size(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            if ((checking.get(i).charAt(0) \u003d\u003d \u0027n\u0027 || checking.get(i).charAt(0) \u003d\u003d \u0027e\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    || (checking.get(i).charAt(0) \u003d\u003d \u0027p\u0027 \u0026\u0026 checking.get(i).charAt(1) \u003d\u003d \u0027/\u0027)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    || (checking.get(i).charAt(0) \u003d\u003d \u0027p\u0027 \u0026\u0026 checking.get(i).charAt(1) \u003d\u003d \u0027a\u0027)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    || checking.get(i).charAt(0) \u003d\u003d \u0027a\u0027 || checking.get(i).charAt(0) \u003d\u003d \u0027t\u0027)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    \u0026\u0026 (checking.get(i).charAt(1) \u003d\u003d \u0027/\u0027 || checking.get(i).charAt(2) \u003d\u003d \u0027/\u0027)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                return new FilterCommand(new ContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new FilterCommand(new ContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "SarahTaaherBonna": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        ArrayList\u003cString\u003e checking \u003d new ArrayList\u003c\u003e(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        for (int i \u003d 0; i \u003c checking.size(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            if ((checking.get(i).charAt(0) \u003d\u003d \u0027n\u0027 || checking.get(i).charAt(0) \u003d\u003d \u0027e\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    || checking.get(i).charAt(0) \u003d\u003d \u0027p\u0027) \u0026\u0026 checking.get(i).charAt(1) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 15,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FILE_EXTENSION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FILE_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.CsvConverter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.csv.CsvFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author wm28"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Parses the given argument {@code String} in the context of the ImportCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public ImportCommand parse(String arg) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": "        String trimmedArg \u003d arg.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": "        if (trimmedArg.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wm28"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wm28"
        },
        "content": "        } else if (!FileUtil.isValidPath(trimmedArg)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wm28"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FILE_PATH, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": "        } else if (!FileUtil.isValidFileExtension(trimmedArg, \"csv\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FILE_EXTENSION, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wm28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wm28"
        },
        "content": "        return new ImportCommand(new CsvFile(trimmedArg), new CsvConverter());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wm28"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "wm28": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MailCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.commands.MailCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * Parses input arguments and creates a new MailCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "//@@author aaryamNUS"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "public class MailCommandParser implements Parser\u003cMailCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MailCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * and returns a MailCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public MailCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        //ensure the arguments are not empty"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assert args !\u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                    MailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return new MailCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MarkCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kronicler"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.logic.commands.MarkCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kronicler"
        },
        "content": "//@@author kronicler"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kronicler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kronicler"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kronicler"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kronicler"
        },
        "content": "//@@author kronicler"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kronicler"
        },
        "content": "public class MarkCommandParser implements Parser\u003cMarkCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public MarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            phone \u003d ParserUtil.parsePhone(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        return new MarkCommand(phone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kronicler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kronicler": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventStartTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventVenue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "content": "    //@@author Sarah"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Parses a {@code String attendance} into an {@code attendance}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static Attendance parseAttendance(String attendance) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(attendance);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String trimmedAttendance \u003d attendance.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!Attendance.isValidAttendance(trimmedAttendance)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException(Attendance.MESSAGE_ATTENDANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new Attendance(trimmedAttendance);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "content": "    //@@author"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "content": "    //@@author Sarah"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Parses a {@code String Payment} into an {@code Payment}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws ParseException if the given {@code payment} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static Payment parsePayment(String payment) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(payment);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String trimmedPayment \u003d payment.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!Payment.isValidPayment(trimmedPayment)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException(Payment.MESSAGE_PAYMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new Payment(trimmedPayment);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "content": "    //@@author"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Parses {@code String EventName} into an {@code EventName}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static EventName parseEventName(String name) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (!EventName.isValidEventName(trimmedName)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new ParseException(EventName.MESSAGE_EVENTNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return new EventName(trimmedName);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Parses {@code String EventDate} into an {@code EventDate}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static EventDate parseEventDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (!EventDate.isValidEventDate(trimmedDate)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new ParseException(EventDate.MESSAGE_EVENTDATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return new EventDate(trimmedDate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Parses {@code String EventVenue} into an {@code EventVenue}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static EventVenue parseEventVenue(String venue) throws ParseException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        requireNonNull(venue);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        String trimmedVenue \u003d venue.trim();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (!EventVenue.isValidEventVenue(trimmedVenue)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new ParseException(EventVenue.MESSAGE_EVENTVENUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return new EventVenue(trimmedVenue);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Parses {@code String EventStartTime} into an {@code EventStartTime}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static EventStartTime parseEventStartTime(String startTime) throws ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        requireNonNull(startTime);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        String trimmedStartTime \u003d startTime.trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (!EventStartTime.isValidEventStartTime(trimmedStartTime)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new ParseException(EventStartTime.MESSAGE_EVENTSTARTTIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return new EventStartTime(trimmedStartTime);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 4,
      "SarahTaaherBonna": 24,
      "-": 116,
      "SandhyaGopakumar": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemoveTagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.commands.RemoveTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "//@@author aaryamNUS"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * Parses input arguments and creates a new RemoveTagCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "public class RemoveTagCommandParser implements Parser\u003cRemoveTagCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveTagCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * and returns an RemoveTagCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public RemoveTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return new RemoveTagCommand(tagList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Returns true if the tag prefix does not return empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnmarkCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kronicler"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.logic.commands.UnmarkCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kronicler"
        },
        "content": "//@@author kronicler"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kronicler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kronicler"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kronicler"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kronicler"
        },
        "content": "public class UnmarkCommandParser implements Parser\u003cUnmarkCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public UnmarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            phone \u003d ParserUtil.parsePhone(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnmarkCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        return new UnmarkCommand(phone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kronicler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kronicler": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private final Event eventDetails;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        eventDetails \u003d new Event();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Replaces the current details of the event with {@code event}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public void setEvent(Event event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventDetails.setEvent(event);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        setEvent(newData.getEventDetails());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //event-level operations"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /** Adds the details given by the user to event. */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public void addEvent(Event e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        eventDetails.addEvent(e);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /** Deletes the event details stored in the addressbook. */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public void deleteEvent() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        eventDetails.deleteEvent();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /** Returns true if the event details given by the user is being stored in the addressbook. */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public boolean hasEvent() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return eventDetails.isUserInitialised();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    //@@author aaryamNUS"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Removes {@code tag} from {@code person} in this {@code AddressBook}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code snippet was inspired from the PR \"Model: Add deleteTag(Tag)\" by @yamgent"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private void removeTagFromPerson(Tag tag, Person person) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (!newTags.remove(tag)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Person newPerson \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                new Person (person.getName(), person.getPhone(), person.getEmail(), person.getPayment(),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                            person.getAttendance(), newTags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        updatePerson(person, newPerson);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Removes {@code tag} from all persons in this {@code AddressBook}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void removeTag(Tag tag) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        persons.forEach(person -\u003e removeTagFromPerson(tag, person));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Adds {@code tag} from {@code person} in this {@code AddressBook}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code snippet was inspired from the PR \"Model: Add deleteTag(Tag)\" by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private void addTagFromPerson(Tag tag, Person person) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (!newTags.add(tag)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Person newPerson \u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                new Person (person.getName(), person.getPhone(), person.getEmail(), person.getPayment(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                            person.getAttendance(), newTags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        updatePerson(person, newPerson);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Adds {@code tag} to all persons in this {@code AddressBook}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        persons.forEach(person -\u003e addTagFromPerson(tag, person));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    //@@author aaryamNUS"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public Event getEventDetails() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return eventDetails;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 83,
      "-": 96,
      "SandhyaGopakumar": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    boolean hasEvent();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * An event must have been initialised by the user in the application."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    void deleteEvent();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Adds the given event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * {@code event} with details given by the user must not already exist in the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Replaces the given event {@code target} with {@code editedEvent}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * {@code target} must exist in the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * The person identity of {@code editedEvent} must not be the same as another existing event in the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //void updateEvent(Event target, Event editedEvent);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Removes the given {@code tag} from all {@code Person}s"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    void deleteTag(Tag tag);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Adds the given {@code tag} to all {@code Person}s"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    void addTag(Tag tag);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /** Returns the details of the event currently residing in the addressbook. */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    Event getEventDetails();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 11,
      "-": 78,
      "SandhyaGopakumar": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        versionedAddressBook.addEvent(event);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public void deleteEvent() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        versionedAddressBook.deleteEvent();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public boolean hasEvent() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return versionedAddressBook.hasEvent();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /** Returns the details of the event currently residing in the addressbook. */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public Event getEventDetails() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return versionedAddressBook.getEventDetails();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        versionedAddressBook.removeTag(tag);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        versionedAddressBook.addTag(tag);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 11,
      "-": 149,
      "SandhyaGopakumar": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    Event getEventDetails();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "SandhyaGopakumar": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * Represents an event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private EventName eventName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private EventDate eventDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private EventVenue eventVenue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private EventStartTime eventStartTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private Set\u003cTag\u003e eventTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private boolean isNotInitialisedByUser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public Event(EventName eventName, EventDate eventDate, EventVenue eventVenue,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                 EventStartTime eventStartTime, Set\u003cTag\u003e eventTags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        requireAllNonNull(eventName, eventDate, eventVenue, eventStartTime, eventTags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventVenue \u003d eventVenue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventStartTime \u003d eventStartTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventTags.addAll(eventTags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.isNotInitialisedByUser \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public Event(EventName eventName, EventDate eventDate, EventVenue eventVenue,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                 EventStartTime eventStartTime, Set\u003cTag\u003e eventTags, Boolean eventIsNotInitialisedByUser) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        requireAllNonNull(eventName, eventDate, eventVenue, eventStartTime, eventTags, eventIsNotInitialisedByUser);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventVenue \u003d eventVenue;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventStartTime \u003d eventStartTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventTags.addAll(eventTags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.isNotInitialisedByUser \u003d eventIsNotInitialisedByUser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public Event() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        EventName eventName \u003d new EventName(\"event not created yet\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        EventDate eventDate \u003d new EventDate(\"01/01/0001\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        EventVenue eventVenue \u003d new EventVenue(\"NA\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventVenue \u003d eventVenue;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        EventStartTime eventStartTime \u003d new EventStartTime(\"1:00 pm\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventStartTime \u003d eventStartTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        Tag tag \u003d new Tag(\"NA\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventTags.add(tag);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.isNotInitialisedByUser \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return eventName.getEventName();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return eventDate.getEventDate();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return eventVenue.getEventVenue();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return eventStartTime.getEventStartTime();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private EventName getEventName() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private EventDate getEventDate() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return eventDate;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private EventVenue getEventVenue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return eventVenue;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private EventStartTime getEventStartTime() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return eventStartTime;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public void setEvent(Event event) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (!this.equals(event)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            this.eventName.setEventName(event.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            this.eventDate.setEventDate(event.getDate());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            this.eventVenue.setEventVenue(event.getVenue());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            this.eventStartTime.setEventStartTime(event.getStartTime());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            this.eventTags \u003d event.eventTags;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            this.isNotInitialisedByUser \u003d !event.isUserInitialised();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /** Adds user-given details of the event. */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (!this.equals(event)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            this.eventName.setEventName(event.getName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            this.eventDate.setEventDate(event.getDate());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            this.eventVenue.setEventVenue(event.getVenue());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            this.eventStartTime.setEventStartTime(event.getStartTime());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            this.eventTags \u003d event.eventTags;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.isNotInitialisedByUser \u003d false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /** Deletes user-given details of the event. */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public void deleteEvent() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        Event event \u003d new Event();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventName.setEventName(event.getName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventDate.setEventDate(event.getDate());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventVenue.setEventVenue(event.getVenue());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventStartTime.setEventStartTime(event.getStartTime());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventTags \u003d event.eventTags;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.isNotInitialisedByUser \u003d true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public boolean isUserInitialised() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return !isNotInitialisedByUser;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public Set\u003cTag\u003e getEventTags() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return Collections.unmodifiableSet(eventTags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Returns true if both events of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public boolean isSameEvent(seedu.address.model.event.Event otherEvent) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 otherEvent.getName().equals(getName())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 otherEvent.getDate().equals(getDate())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 otherEvent.getVenue().equals(getVenue())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 otherEvent.getStartTime().equals(getStartTime());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Returns true if both events have the same identity and data fields."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (!(other instanceof seedu.address.model.event.Event)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        seedu.address.model.event.Event otherEvent \u003d (seedu.address.model.event.Event) other;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return otherEvent.getEventName().equals(getEventName())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 otherEvent.getEventDate().equals(getEventDate())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 otherEvent.getEventVenue().equals(getEventVenue())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 otherEvent.getEventStartTime().equals(getEventStartTime())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 otherEvent.getEventTags().equals(getEventTags());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return Objects.hash(eventName, eventDate, eventVenue, eventStartTime, eventTags);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                .append(\" Venue: \")"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                .append(getVenue())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                .append(\" Start Time: \")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                .append(getStartTime())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        getEventTags().forEach(builder::append);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SandhyaGopakumar": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * Represents a Event\u0027s date."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEventDate(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "public class EventDate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String MESSAGE_EVENTDATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            \"Event\u0027s date should only contain numbers and forward slash and should follow the dd/mm/yyyy format.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String EVENTDATE_VALIDATION_REGEX \u003d \"^(3[01]|[12][0-9]|0[1-9])/(1[0-2]|0[1-9])/[0-9]{4}$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private String fullEventDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Constructs a {@code eventDate}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * @param eventDate A valid event date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public EventDate(String eventDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        requireNonNull(eventDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        checkArgument(isValidEventDate(eventDate), MESSAGE_EVENTDATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        fullEventDate \u003d eventDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Accessor method for eventDate"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public String getEventDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return this.fullEventDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Setter method for eventDate"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public void setEventDate(String eventDate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.fullEventDate \u003d eventDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Returns true if a given string is a valid event date."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static boolean isValidEventDate(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return test.matches(EVENTDATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return fullEventDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                || (other instanceof EventDate // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 fullEventDate.equals(((EventDate) other).fullEventDate)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return fullEventDate.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SandhyaGopakumar": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * Represents a Event\u0027s name."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEventName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "//@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "public class EventName {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String MESSAGE_EVENTNAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            \"Event names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String EVENTNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private String fullEventName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Constructs a {@code eventName}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * @param eventName A valid event name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public EventName(String eventName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        checkArgument(isValidEventName(eventName), MESSAGE_EVENTNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        fullEventName \u003d eventName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Accessor method for eventName"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public String getEventName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return this.fullEventName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Setter method for eventName"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public void setEventName(String eventName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.fullEventName \u003d eventName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Returns true if a given string is a valid event name."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static boolean isValidEventName(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return test.matches(EVENTNAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return fullEventName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                || (other instanceof EventName // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 fullEventName.equals(((EventName) other).fullEventName)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return fullEventName.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SandhyaGopakumar": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventStartTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * Represents a Event\u0027s start time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEventStartTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "public class EventStartTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String MESSAGE_EVENTSTARTTIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            \"Event\u0027s start time should only contain alphanumeric characters \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                    + \"and spaces in the 12 hour format and should not be blank.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String EVENTSTARTTIME_VALIDATION_REGEX \u003d \"(1[012]|[1-9]):[0-5][0-9](\\\\s)?(?i)(am|pm)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private String fullEventStartTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Constructs a {@code eventStartTime}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * @param eventStartTime A valid event start time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public EventStartTime(String eventStartTime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        requireNonNull(eventStartTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        checkArgument(isValidEventStartTime(eventStartTime), MESSAGE_EVENTSTARTTIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        fullEventStartTime \u003d eventStartTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Accessor method for eventStartTime"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public String getEventStartTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return this.fullEventStartTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Setter method for eventStartTime"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public void setEventStartTime(String eventStartTime) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.fullEventStartTime \u003d eventStartTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Returns true if a given string is a valid event start time."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static boolean isValidEventStartTime(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return test.matches(EVENTSTARTTIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return fullEventStartTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                || (other instanceof EventStartTime // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 fullEventStartTime.equals(((EventStartTime) other).fullEventStartTime)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return fullEventStartTime.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SandhyaGopakumar": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventVenue.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * Represents a Event\u0027s venue."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEventVenue(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "public class EventVenue {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String MESSAGE_EVENTVENUE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            \"Event\u0027s venue should only contain alphanumeric characters, spaces, \u0027,\u0027 or \u0027#\u0027 and should not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String EVENTVENUE_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ,#-]*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private String fullEventVenue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Constructs a {@code eventVenue}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * @param eventVenue A valid event venue."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public EventVenue(String eventVenue) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        requireNonNull(eventVenue);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        checkArgument(isValidEventVenue(eventVenue), MESSAGE_EVENTVENUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        fullEventVenue \u003d eventVenue;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Accessor method for eventVenue"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public String getEventVenue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return this.fullEventVenue;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Setter method for eventVenue"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public void setEventVenue(String eventVenue) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.fullEventVenue \u003d eventVenue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Returns true if a given string is a valid event venue."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static boolean isValidEventVenue(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return test.matches(EVENTVENUE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return fullEventVenue;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                || (other instanceof EventVenue // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 fullEventVenue.equals(((EventVenue) other).fullEventVenue)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return fullEventVenue.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SandhyaGopakumar": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "//@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SandhyaGopakumar": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "//@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "public class EventNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "SandhyaGopakumar": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Attendance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "//@@ author Sarah"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Represents a Person\u0027s attendance in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAttendance(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class Attendance {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_ATTENDANCE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            \"Attendance should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String ATTENDANCE_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\s.-]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public final String attendanceValue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Constructs a {@code Attendance}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param attendance A valid attendance."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public Attendance(String attendance) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(attendance);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        checkArgument(isValidAttendance(attendance), MESSAGE_ATTENDANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        attendanceValue \u003d attendance;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Returns true if a given string is a valid attendance."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static boolean isValidAttendance(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return test.matches(ATTENDANCE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return attendanceValue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                || (other instanceof Attendance // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 attendanceValue.equals(((Attendance) other).attendanceValue)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return attendanceValue.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "content": "//@@author Sarah"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code payment, attendance and tags etc.} matches all of the keywords given."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class ContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final ArrayList\u003cString\u003e checkKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public ContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param person containing details such as"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *               payment status, attendance status and tags"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @return the details that match keywords in the person\u0027s details, as mentioned above"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        HashSet\u003cseedu.address.model.tag.Tag\u003e set \u003d new HashSet\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String strTags \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        checkKeywords.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            String str \u003d keywords.get(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            String[] arrStr \u003d str.split(\"/\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            if (arrStr[j].equals(\"pa\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                checkKeywords.add(i, arrStr[j + 1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strTags +\u003d \" \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strTags +\u003d person.getPayment();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            } else if (arrStr[j].equals(\"t\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                checkKeywords.add(i, arrStr[j + 1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strTags \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                for (Tag tag : set) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    strTags +\u003d \" \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    strTags +\u003d tag.tagName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        final String checkStr \u003d strTags;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return checkKeywords.stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .allMatch(checkKeywords -\u003e StringUtil.containsWordIgnoreCase(checkStr, checkKeywords));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                || (other instanceof ContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 keywords.equals(((ContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "SarahTaaherBonna": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "content": "//@@author Sarah"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name, Phone or Email} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final ArrayList\u003cString\u003e checkKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String strToCheck \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        checkKeywords.clear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            String str \u003d keywords.get(i);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            String[] arrStr \u003d str.split(\"/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            if (arrStr[j].equals(\"n\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                checkKeywords.add(i, arrStr[j + 1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strToCheck +\u003d \" \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strToCheck +\u003d person.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            } else if (arrStr[j].equals(\"p\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                checkKeywords.add(i, arrStr[j + 1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strToCheck +\u003d \" \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strToCheck +\u003d person.getPhone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            } else if (arrStr[j].equals(\"e\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                checkKeywords.add(i, arrStr[j + 1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strToCheck +\u003d \" \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                strToCheck +\u003d person.getEmail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        final String checkStr \u003d strToCheck;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return checkKeywords.stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .anyMatch(checkKeywords -\u003e StringUtil.containsWordIgnoreCase(checkStr, checkKeywords));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "SarahTaaherBonna": 35,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Payment.java",
    "lines": [
      {
        "lineNumber": 1,
        "content": "//@@author Sarah"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Represents a Person\u0027s payment in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPayment(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class Payment {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_PAYMENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            \"Payment should only contain alphanumeric characters, spaces and . such as N.A. , \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String PAYMENT_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\s.-]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public final String paymentValue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Constructs a {@code Payment}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param payment A valid payment."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public Payment(String payment) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(payment);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        checkArgument(isValidPayment(payment), MESSAGE_PAYMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        paymentValue \u003d payment;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Returns true if a given string is a valid attendance."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static boolean isValidPayment(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return test.matches(PAYMENT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return paymentValue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                || (other instanceof Payment // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 paymentValue.equals(((Payment) other).paymentValue)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return paymentValue.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "SarahTaaherBonna": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final Payment payment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final Attendance attendance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Payment payment, Attendance attendance, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireAllNonNull(name, phone, email, payment, attendance, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.payment \u003d payment;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "content": "    //@@author Sarah"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public Payment getPayment() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return payment;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public Attendance getAttendance() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "content": "    //@@author"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 otherPerson.getPayment().equals(getPayment())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 otherPerson.getAttendance().equals(getAttendance())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return Objects.hash(name, phone, email, payment, attendance, tags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .append(\" Payment: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .append(getPayment())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .append(\" Attendance: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .append(getAttendance())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "SarahTaaherBonna": 17,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Uid.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kronicler"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kronicler"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kronicler"
        },
        "content": "//@@author kronicler"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kronicler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kronicler"
        },
        "content": " * Represents a Person\u0027s UID in the guest list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kronicler"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUid(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kronicler"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kronicler"
        },
        "content": "public class Uid {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public static final String MESSAGE_UID_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kronicler"
        },
        "content": "            \"Id should only contain numeric characters, it can be left blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * Ensures that only a string of numeric characters are accepted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public static final String UID_VALIDATION_REGEX \u003d \"[\\\\p{Digit}]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public final String uidValue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * Constructs a {@code Uid}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * @param uid is a string of numbers that the Person holds."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public Uid(String uid) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        requireNonNull(uid);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        checkArgument(isValidUid(uid), MESSAGE_UID_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        uidValue \u003d uid;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     * Returns true if a given string is a valid Uid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kronicler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public static boolean isValidUid(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        return test.matches(UID_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        return uidValue;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                || (other instanceof Uid // instance of handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kronicler"
        },
        "content": "                \u0026\u0026 uidValue.equals(((Uid) other).uidValue)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kronicler"
        },
        "content": "        return uidValue.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kronicler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kronicler"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kronicler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kronicler": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@gmail.com\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new Payment(\"PAID\"), new Attendance(\"PRESENT\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    getTagSet(\"NORMAL\", \"NoShrimp\", \"GUEST\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@gmail.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new Payment(\"NOT PAID\"), new Attendance(\"ABSENT\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                getTagSet(\"VEGETARIAN\", \"NoNuts\", \"VIP\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@gmail.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new Payment(\"NOT PAID\"), new Attendance(\"PRESENT\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                getTagSet(\"VEGAN\", \"GUEST\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@gmail.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new Payment(\"PENDING\"), new Attendance(\"ABSENT\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                getTagSet(\"NORMAL\", \"NoBeef\", \"NoSeafood\", \"VIP\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@gmail.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new Payment(\"PAID\"), new Attendance(\"PRESENT\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                getTagSet(\"HALAL\", \"NoGluten\", \"GUEST\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@gmail.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new Payment(\"PENDING\"), new Attendance(\"ABSENT\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                getTagSet(\"NoBeef\", \"VIP\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 20,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventStartTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventVenue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * JAXB-friendly version of the Event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "public class XmlAdaptedEvent {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private String isNotInitialisedByUser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Constructs an XmlAdaptedEvent."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public XmlAdaptedEvent() {}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Constructs an {@code XmlAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public XmlAdaptedEvent(String name, String date, String venue,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                           String startTime, List\u003cXmlAdaptedTag\u003e tagged, String isNotInitialisedByUser) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.isNotInitialisedByUser \u003d isNotInitialisedByUser;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Converts a given Event into this class for JAXB use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedEvent"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public XmlAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        date \u003d source.getDate();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        venue \u003d source.getVenue();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        startTime \u003d source.getStartTime();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        tagged \u003d source.getEventTags().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (source.isUserInitialised() \u003d\u003d true) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            isNotInitialisedByUser \u003d \"false\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            isNotInitialisedByUser \u003d \"true\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Converts this jaxb-friendly adapted event object into the model\u0027s Event object."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        final List\u003cTag\u003e eventTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            eventTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new IllegalValueException(String.format"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                    (MISSING_FIELD_MESSAGE_FORMAT, EventName.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (!EventName.isValidEventName(name)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new IllegalValueException(EventName.MESSAGE_EVENTNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        final EventName modelName \u003d new EventName(name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new IllegalValueException(String.format"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                    (MISSING_FIELD_MESSAGE_FORMAT, EventDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (!EventDate.isValidEventDate(date)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new IllegalValueException(EventDate.MESSAGE_EVENTDATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        final EventDate modelDate \u003d new EventDate(date);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (venue \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new IllegalValueException(String.format"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                    (MISSING_FIELD_MESSAGE_FORMAT, EventVenue.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (!EventVenue.isValidEventVenue(venue)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new IllegalValueException(EventVenue.MESSAGE_EVENTVENUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        final EventVenue modelVenue \u003d new EventVenue(venue);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new IllegalValueException(String.format"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                    (MISSING_FIELD_MESSAGE_FORMAT, EventStartTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (!EventStartTime.isValidEventStartTime(startTime)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new IllegalValueException(EventStartTime.MESSAGE_EVENTSTARTTIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        final EventStartTime modelStartTime \u003d new EventStartTime(startTime);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "content": "        //@@author SE-EDU"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(eventTags);"
      },
      {
        "lineNumber": 135,
        "content": "        //@@author"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        boolean modelisNotInitialisedByUser;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (isNotInitialisedByUser \u003d\u003d \"true\") {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            modelisNotInitialisedByUser \u003d true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            modelisNotInitialisedByUser \u003d false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return new Event(modelName, modelDate, modelVenue, modelStartTime, modelTags, modelisNotInitialisedByUser);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (!(other instanceof XmlAdaptedEvent)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        XmlAdaptedEvent otherEvent \u003d (XmlAdaptedEvent) other;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return Objects.equals(name, otherEvent.name)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 Objects.equals(date, otherEvent.date)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 Objects.equals(venue, otherEvent.venue)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 Objects.equals(startTime, otherEvent.startTime)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 tagged.equals(otherEvent.tagged);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "SandhyaGopakumar": 162
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private String payment;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private String attendance;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String payment,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                            String attendance, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.payment \u003d payment;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        payment \u003d source.getPayment().paymentValue;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        attendance \u003d source.getAttendance().attendanceValue;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "content": "        //@@author Sarah"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (payment \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Payment.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!Payment.isValidPayment(payment)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new IllegalValueException(Payment.MESSAGE_PAYMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        final Payment modelPayment \u003d new Payment(payment);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (attendance \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new IllegalValueException(String"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                    .format(MISSING_FIELD_MESSAGE_FORMAT, Attendance.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!Attendance.isValidAttendance(attendance)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new IllegalValueException(Attendance.MESSAGE_ATTENDANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        final Attendance modelAttendance \u003d new Attendance(attendance);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "content": "        //@@author"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelPayment, modelAttendance, modelTags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 Objects.equals(payment, otherPerson.payment)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 Objects.equals(attendance, otherPerson.attendance)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "SarahTaaherBonna": 28,
      "-": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"An event already exists.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private XmlAdaptedEvent event;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        event \u003d new XmlAdaptedEvent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        event \u003d new XmlAdaptedEvent(src.getEventDetails());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        Event event \u003d this.event.toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (addressBook.hasEvent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        addressBook.setEvent(event);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "                \u0026\u0026 event.equals(((XmlSerializableAddressBook) other).event);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "SandhyaGopakumar": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private seedu.address.model.event.Event event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private Label venue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public BrowserPanel(seedu.address.model.event.Event event) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        fillInEventDetails(event);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Fills in details of the selected {@code person} to the PersonDisplay Ui component"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private void fillInEventDetails(Event event) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        if (event.isUserInitialised()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            name.setText(event.getName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            date.setText(event.getDate());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            venue.setText(event.getVenue());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            startTime.setText(event.getStartTime());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            removeTags();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            createTags(event);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            name.setText(\"Please put in event details\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            date.setText(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            venue.setText(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            startTime.setText(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            removeTags();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    //@@author aaryamNUS"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Method createTags initialises the tag labels for {@code person}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private void createTags(seedu.address.model.event.Event event) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        event.getEventTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColor(tag.tagName));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wm28"
        },
        "content": "    //@@author wm28"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Removes all tags from the PersonDisplay Ui component"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private void removeTags() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wm28"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wm28"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wm28"
        },
        "content": "        fillInEventDetails(event.getNewDetails());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 13,
      "wm28": 14,
      "-": 27,
      "SandhyaGopakumar": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, true));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage(), false));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 2,
      "-": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private StackPane personDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        BrowserPanel browserPanel \u003d new BrowserPanel(logic.getEventDetails());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wm28"
        },
        "content": "        PersonDisplay personDisplay \u003d new PersonDisplay();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wm28"
        },
        "content": "        personDisplayPlaceholder.getChildren().add(personDisplay.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                logic.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 2,
      "wm28": 6,
      "-": 197,
      "SandhyaGopakumar": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private Label attendance;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private Label payment;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        attendance.setText(person.getAttendance().attendanceValue);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        payment.setText(person.getPayment().paymentValue);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        createTags(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    //@@author aaryamNUS"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Method createTags initialises the tag labels for {@code person}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private void createTags(Person person) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColor(tag.tagName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 16,
      "SarahTaaherBonna": 5,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionClearedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": " * An UI component that displays information of a selected {@code Person} on the MainWindow."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wm28"
        },
        "content": "public class PersonDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private static final String FXML \u003d \"PersonDisplay.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private Label attendance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private Label payment;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public PersonDisplay() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wm28"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wm28"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    //@@author aaryamNUS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Method createTags initialises the tag labels for {@code person}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private void createTags(Person person) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColor(tag.tagName));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wm28"
        },
        "content": "    //@@author wm28"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Removes all tags from the PersonDisplay Ui component"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private void removeTags() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wm28"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Fills in details of the selected {@code person} to the PersonDisplay Ui component"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private void fillInPersonDetails(Person person) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wm28"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wm28"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wm28"
        },
        "content": "        attendance.setText(person.getAttendance().attendanceValue);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wm28"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wm28"
        },
        "content": "        payment.setText(person.getPayment().paymentValue);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wm28"
        },
        "content": "        removeTags();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wm28"
        },
        "content": "        createTags(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Removes details of the previously selected {@code Person} displayed in the PersonDisplay Ui component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private void removePersonDetails() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wm28"
        },
        "content": "        name.setText(\"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wm28"
        },
        "content": "        phone.setText(\"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wm28"
        },
        "content": "        attendance.setText(\"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wm28"
        },
        "content": "        email.setText(\"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wm28"
        },
        "content": "        payment.setText(\"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wm28"
        },
        "content": "        removeTags();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wm28"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wm28"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wm28"
        },
        "content": "        fillInPersonDetails(event.getNewSelection());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wm28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wm28"
        },
        "content": "     * Clears {@code Person} details in PersonDisplay Ui component when selection is cleared in the PersonListPanel"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wm28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void handlePersonPanelSelectionClearedEvent(PersonPanelSelectionClearedEvent event) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wm28"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wm28"
        },
        "content": "                \"Local data changed, clearing selected guest details \"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wm28"
        },
        "content": "        removePersonDetails();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 13,
      "SarahTaaherBonna": 2,
      "wm28": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionClearedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.scrollTo(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wm28"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wm28"
        },
        "content": "                \"Local data changed, clearing guest list selection\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wm28"
        },
        "content": "        personListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wm28"
        },
        "content": "        raise(new PersonPanelSelectionClearedEvent());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wm28": 9,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String ERROR_IN_COMMAND \u003d \"error\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            displayed.setValue(event.message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            if (event.isCorrectCommand) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                setStyleforSuccessfulCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                setStyleforIncorrectCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Sets the {@code ResultDisplay} style to display the default style"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private void setStyleforSuccessfulCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        resultDisplay.getStyleClass().remove(ERROR_IN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Sets the {@code ResultDisplay} style to display an incorrect command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private void setStyleforIncorrectCommand() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        if (styleClass.contains(ERROR_IN_COMMAND)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        styleClass.add(ERROR_IN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 35,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String TOTAL_PERSONS_STATUS \u003d \"%d person(s) total\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private StatusBar totalPersonsStatus;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public StatusBarFooter(Path saveLocation, int totalPersons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        setTotalPersons(totalPersons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private void setTotalPersons(int totalPersons) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Platform.runLater(() -\u003e totalPersonsStatus.setText(String.format(TOTAL_PERSONS_STATUS, totalPersons)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        setTotalPersons(abce.data.getPersonList().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 10,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/docs/images/InvitésLogoSmall.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        //mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 1,
      "-": 118,
      "SandhyaGopakumar": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * The following string array represents different tag colours associated with each guest in the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Each colour represents a charecteristic of the guest, as summarised below:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Orange - Absent, Yellow - Present, Light Blue - VIP,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * White - Guest Speaker, Black - Not Paid, Purple - Paid,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Default - a tag that is not supported by the application specifications"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static final String[] TAG_COLORS \u003d {\"orange\", \"yellow\", \"lightblue\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                                \"white\", \"bronze\", \"silver\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                                \"gold\", \"platinum\", \"veg\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                                \"halal\", \"default\"};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    //@@author aaryamNUS"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     Method getTagColor returns the specific color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public String getTagColor(String tagName) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "         * Using the hashcode of the tag name ensures the color of the tag remains consistent"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "         * during different iterations of the code by generating a random color"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        switch (tagName.replaceAll(\"\\\\s+\", \"\").toLowerCase()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"absent\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return TAG_COLORS[0];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"present\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return TAG_COLORS[1];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"vip\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return TAG_COLORS[2];"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"guestspeaker\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return TAG_COLORS[3];"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"bronze\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return TAG_COLORS[4];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"silver\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return TAG_COLORS[5];"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"gold\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return TAG_COLORS[6];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"platinum\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return TAG_COLORS[7];"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"veg\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return TAG_COLORS[8];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"halal\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return TAG_COLORS[9];"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return TAG_COLORS[10];"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 50,
      "-": 105
    }
  },
  {
    "path": "src/main/resources/view/BrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "  \u003cHBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" alignment\u003d\"TOP_LEFT\" \u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cInsets top\u003d\"10\" right\u003d\"5\" bottom\u003d\"10\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"NEVER\" minWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_big_label\" text\u003d\"Event Details\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Name: \" GridPane.rowIndex\u003d\"1\" GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Date: \" GridPane.rowIndex\u003d\"2\" GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_small_label\" GridPane.valignment\u003d\"TOP\" text\u003d\"Venue: \" GridPane.rowIndex\u003d\"3\" GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Start Time: \" GridPane.rowIndex\u003d\"4\" GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Tags: \" GridPane.rowIndex\u003d\"5\" GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_small_label\" GridPane.rowIndex\u003d\"1\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" GridPane.rowIndex\u003d\"2\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003cLabel fx:id\u003d\"venue\" wrapText\u003d\"true\" styleClass\u003d\"cell_small_label\" GridPane.rowIndex\u003d\"3\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_small_label\" GridPane.rowIndex\u003d\"4\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" GridPane.rowIndex\u003d\"5\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "SandhyaGopakumar": 39
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wm28"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wm28"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "/*@@author aaryamNUS"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "* Adding the definitions for the tag labels"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "*/"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-background-color: #ff9900;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-background-color: #cb9d1d;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "#tags .lightblue {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-background-color: #96e1f0;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "#tags .white {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "#tags .bronze {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-background-color: #cd7f32;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "#tags .silver {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-background-color: #C0C0C0;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "#tags .gold {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-background-color: #DAA520;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "#tags .platinum {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-background-color: #E5E4E2;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "#tags .veg {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-background-color: #228B22;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "#tags .halal {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-background-color: #ADFF2F;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "#tags .default {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-text-fill: red;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "#tags .transparent {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-text-fill: red;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    -fx-background-color: null !important;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "/* @@author */"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 70,
      "wm28": 2,
      "-": 341
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    \u003cImage url\u003d\"@/docs/images/InvitésLogo.jpg\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"personDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wm28"
        },
        "content": "                   minHeight\u003d\"140\" prefHeight\u003d\"140\" maxHeight\u003d\"140\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wm28"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wm28"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wm28"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wm28"
        },
        "content": "            \u003cStackPane fx:id\u003d\"browserPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wm28"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 1,
      "wm28": 9,
      "-": 65
    }
  },
  {
    "path": "src/main/resources/view/PersonDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "  \u003cHBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" alignment\u003d\"CENTER_LEFT\" \u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cInsets top\u003d\"10\" right\u003d\"5\" bottom\u003d\"10\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"NEVER\" minWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Name: \" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Phone: \" GridPane.rowIndex\u003d\"1\" GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Email: \" GridPane.rowIndex\u003d\"2\" GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Payment: \" GridPane.rowIndex\u003d\"3\" GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Attendance: \" GridPane.rowIndex\u003d\"4\" GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Tags: \" GridPane.rowIndex\u003d\"5\" GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" GridPane.rowIndex\u003d\"1\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" GridPane.rowIndex\u003d\"2\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel fx:id\u003d\"payment\" styleClass\u003d\"cell_small_label\" GridPane.rowIndex\u003d\"3\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel fx:id\u003d\"attendance\" styleClass\u003d\"cell_small_label\" GridPane.rowIndex\u003d\"4\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" GridPane.rowIndex\u003d\"5\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wm28"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wm28"
        },
        "content": "  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wm28": 44
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"50\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"50\" prefWidth\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5\" prefWidth\u003d\"50\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"2\" prefWidth\u003d\"50\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"50\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": "    \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wm28"
        },
        "content": "    \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wm28"
        },
        "content": "    \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" GridPane.columnIndex\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    \u003cLabel fx:id\u003d\"payment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$payment\" GridPane.columnIndex\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    \u003cLabel fx:id\u003d\"attendance\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$attendance\" GridPane.columnIndex\u003d\"4\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    \u003cFlowPane fx:id\u003d\"tags\" GridPane.columnIndex\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 4,
      "wm28": 10,
      "-": 25
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": "  \u003cHBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"50\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"50\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"50\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"50\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"50\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"50\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_big_label\" text\u003d\"Name\"  GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_big_label\" text\u003d\"Phone\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_big_label\" text\u003d\"Email\" GridPane.columnIndex\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_big_label\" text\u003d\"Payment\" GridPane.columnIndex\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_big_label\" text\u003d\"Attendance\" GridPane.columnIndex\u003d\"4\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_big_label\" text\u003d\"Tags\" GridPane.columnIndex\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": "  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 4,
      "wm28": 22,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import org.controlsfx.control.StatusBar?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"grid-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"syncStatus\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"totalPersonsStatus\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"2\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 2,
      "-": 13
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment isPrivate\u003d\"false\"\u003eNOT PAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003eABSENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment isPrivate\u003d\"false\"\u003eNOT PAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003eABSENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 4,
      "-": 15
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment isPrivate\u003d\"false\"\u003eNOT PAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003eABSENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    \u003cpayment\u003eNOT PAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    \u003cattendance\u003ePRESENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    \u003ctagged\u003eNORMAL\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    \u003cattendance\u003ePRESENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    \u003cpayment\u003eNOT PAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    \u003ctagged\u003eNORMAL\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 3,
      "-": 6
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment isPrivate\u003d\"false\"\u003eNOTPAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003ePRESENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment isPrivate\u003d\"false\"\u003ePAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003eABSENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment isPrivate\u003d\"false\"\u003ePENDING\u003c/payment\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003ePRESENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment isPrivate\u003d\"false\"\u003ePENDING\u003c/payment\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003eABSENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment isPrivate\u003d\"false\"\u003ePAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003ePRESENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment isPrivate\u003d\"false\"\u003eNOTPAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003eABSENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment isPrivate\u003d\"false\"\u003eNOTPAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003ePRESENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment isPrivate\u003d\"false\"\u003ePAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003eABSENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment isPrivate\u003d\"false\"\u003ePENDING\u003c/payment\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003ePRESENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    \u003cevent\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cname\u003eWedding\u003c/name\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cdate isPrivate\u003d\"false\"\u003e10/01/2018\u003c/date\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003eMarriot Hotel\u003c/venue\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cstartTime isPrivate\u003d\"false\"\u003e10:00 PM\u003c/startTime\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    \u003c/event\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 27,
      "-": 39,
      "SandhyaGopakumar": 6
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    \u003cpayment\u003eNOT PAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    \u003cattendance\u003ePRESENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    \u003ctagged\u003eNORMAL\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 3,
      "-": 6
    }
  },
  {
    "path": "src/test/data/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail\u003ealice@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment\u003ePENDING\u003c/payment\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance\u003ePRESENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003ctagged\u003eVEGETARIAN\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003ctagged\u003eNoNuts\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail\u003epauline@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment\u003ePENDING\u003c/payment\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance\u003ePRESENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 8,
      "-": 15
    }
  },
  {
    "path": "src/test/data/data/XmlSerializableAddressBookTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment isPrivate\u003d\"false\"\u003eNOT/PAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003eABSENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/data/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail\u003ealice@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment\u003ePENDING\u003c/payment\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance\u003ePRESENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003ctagged\u003eVEGETARIAN\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003ctagged\u003eNoNuts\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail\u003ejohnd@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment\u003ePAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance\u003eABSENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003ctagged\u003eNORMAL\u003c/tagged\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003ctagged\u003eNoSeafood\u003c/tagged\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003ctagged\u003eGUEST\u003c/tagged\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail\u003eheinz@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment\u003eNOT PAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance\u003ePRESENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail\u003ecornelia@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment\u003ePAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance\u003eABSENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003ctagged\u003eNORMAL\u003c/tagged\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003ctagged\u003eVIP\u003c/tagged\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail\u003ewerner@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment\u003eNOT PAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance\u003ePRESENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail\u003elydia@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment\u003ePAID\u003c/payment\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance\u003eABSENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cemail\u003eanna@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cpayment\u003ePENDING\u003c/payment\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        \u003cattendance\u003ePRESENT\u003c/attendance\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    \u003cevent\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cname\u003eConference\u003c/name\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cdate\u003e10/10/2017\u003c/date\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cvenue\u003eSRC RM 1\u003c/venue\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        \u003cstartTime\u003e12:00 PM\u003c/startTime\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    \u003c/event\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 28,
      "-": 32,
      "SandhyaGopakumar": 6
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String ATTENDANCE_FIELD_ID \u003d \"#attendance\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String PAYMENT_FIELD_ID \u003d \"#payment\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final Label attendanceLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final Label paymentLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        attendanceLabel \u003d getChildNode(ATTENDANCE_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        paymentLabel \u003d getChildNode(PAYMENT_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public String getAttendance() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return attendanceLabel.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public String getPayment() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return paymentLabel.getText();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Tests the setting of different tags to the guests in the list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @param tag"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag exists\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 getAttendance().equals(person.getAttendance().attendanceValue)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \u0026\u0026 getPayment().equals(person.getPayment().paymentValue)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 16,
      "SarahTaaherBonna": 14,
      "-": 81
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ResultDisplayHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handler for the {@code ResultDisplay} of the UI"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle(TextArea resultDisplayNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(resultDisplayNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text in the result display."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Returns the list of style classes present in the result display"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public List\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 9,
      "-": 22
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static final String TOTAL_PERSONS_STATUS_ID \u003d \"#totalPersonsStatus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar syncStatusNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private final StatusBar totalPersonsStatusNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar saveLocationNode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private String getLastRememberedTotalPersonsStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        totalPersonsStatusNode \u003d getChildNode(TOTAL_PERSONS_STATUS_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Returns the text of the \u0027total persons\u0027 portion of the status bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public String getTotalPersonsStatus() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return totalPersonsStatusNode.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Remembers the content of the \u0027total\u0027 persons portion of the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void rememberTotalPersonsStatus() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        getLastRememberedTotalPersonsStatus \u003d getTotalPersonsStatus();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Returns true if the current content of the \u0027total persons\u0027 is different from the value remembered"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * by the most recent {@code rememberTotalPersonsStatus()} call."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public boolean isTotalPersonsStatusChanged() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        return !getLastRememberedTotalPersonsStatus.equals(getTotalPersonsStatus());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 30,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Invités\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void isCorrectFileExtension() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": "        // correct file extension"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": "        assertTrue(FileUtil.isValidFileExtension(\"valid/file/path.csv\", \"csv\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wm28"
        },
        "content": "        // incorrect file extension"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wm28"
        },
        "content": "        assertFalse(FileUtil.isValidFileExtension(\"valid/file/path.csv\", \"vsc\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wm28"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wm28"
        },
        "content": "                FileUtil.isValidFileExtension(null, \"csv\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wm28"
        },
        "content": "        // null extension -\u003e throws AssertionException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wm28"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wm28"
        },
        "content": "                FileUtil.isValidFileExtension(\"valid/file/path.csv\", null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wm28": 16,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String VALID_PAYMENT \u003d \"NOT PAID\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String VALID_ATTENDANCE \u003d \"PRESENT\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"NORMAL\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_PAYMENT, VALID_ATTENDANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_PAYMENT, VALID_ATTENDANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_PAYMENT, VALID_ATTENDANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 6,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public boolean hasEvent() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void deleteEvent() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public Event getEventDetails() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 11,
      "-": 204,
      "SandhyaGopakumar": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "//@@author SandhyaGopakumar"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public void constructor_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        new AddEventCommand(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        CommandResult commandResult \u003d new AddEventCommand(validEvent).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        thrown.expectMessage(AddEventCommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        addEventCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public boolean hasEvent() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void deleteEvent() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public Event getEventDetails() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private class ModelStubWithEvent extends ModelStub {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        private final Event event;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        ModelStubWithEvent(Event event) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public boolean hasEvent() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            return this.event.isUserInitialised();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private class ModelStubAcceptingEventAdded extends ModelStub {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        final Event event \u003d new Event();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public boolean hasEvent() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void addEvent(Event newEvent) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            requireNonNull(newEvent);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            event.addEvent(newEvent);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SandhyaGopakumar": 208
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTagCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "//@@author aaryamNUS"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * {@code RemoveTagCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "public class AddTagCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private Set\u003cTag\u003e tagsToAdd \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(\"NORMAL\"), new Tag(\"VIP\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private Set\u003cTag\u003e allNewTags \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(\"HUSBAND\"), new Tag(\"TEST\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void execute_validSetOfTags_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddTagCommand addTagCommand \u003d new AddTagCommand(tagsToAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_ADDED_TAG_SUCCESS, 7);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        for (Tag eachTagsToAdd: tagsToAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            expectedModel.addTag(eachTagsToAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandSuccess(addTagCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * 1. Adds a set of tags to all persons in the filtered list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * 2. Undo the addition."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the set of tags of the all previous persons in the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * unfiltered list is different from the set of tags at the filtered list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * 4. Redo the addition. This ensures {@code RedoCommand} adds the set of tags object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void executeUndoRedo_validSetOfTags_success() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddTagCommand addTagCommand \u003d new AddTagCommand(allNewTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        for (Tag eachTagsToAdd: allNewTags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            expectedModel.addTag(eachTagsToAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // removeTag -\u003e set of tags deleted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        addTagCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // redo -\u003e same tags added again"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddTagCommand addTagFirstCommand \u003d new AddTagCommand(tagsToAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddTagCommand addTagSecondCommand \u003d new AddTagCommand(allNewTags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertTrue(addTagFirstCommand.equals(addTagFirstCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // not same values -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddTagCommand addTagFirstCommandCopy \u003d new AddTagCommand(tagsToAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(addTagFirstCommand.equals(addTagFirstCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(addTagFirstCommand.equals(new Tag(\"Veg\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(addTagFirstCommand.equals(new Tag(\"Test\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // different objects -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(addTagFirstCommand.equals(addTagSecondCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 76,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String VALID_NAME_DANNY \u003d \"Danny Timbo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String VALID_PHONE_DANNY \u003d \"33333333\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String VALID_ATTENDANCE_AMY \u003d \"PRESENT\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String VALID_ATTENDANCE_BOB \u003d \"ABSENT\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String VALID_ATTENDANCE_DANNY \u003d \"PRESENT\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String VALID_TAG_ADDED \u003d \"added\"; //used to test whether a tag has been added to a person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String VALID_TAG_UNUSED \u003d \"unused\"; //do not use this tag when creating a person"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@gmail.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@gmail.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String VALID_EMAIL_DANNY \u003d \"danny@gmail.com\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String VALID_PAYMENT_AMY \u003d \"PAID\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String VALID_PAYMENT_BOB \u003d \"NOT PAID\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String VALID_PAYMENT_DANNY \u003d \"PAID\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String VALID_TAG_DIET_AMY \u003d \"NORMAL\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String VALID_TAG_DIET_BOB \u003d \"NORMAL\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String VALID_TAG_DIET_DANNY \u003d \"NORMAL\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String NAME_DESC_DANNY \u003d \" \" + PREFIX_NAME + VALID_NAME_DANNY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String PHONE_DESC_DANNY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_DANNY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String EMAIL_DESC_DANNY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_DANNY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String ATTENDANCE_DESC_AMY \u003d \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_ATTENDANCE + VALID_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String ATTENDANCE_DESC_BOB \u003d \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_ATTENDANCE + VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String ATTENDANCE_DESC_DANNY \u003d \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + PREFIX_ATTENDANCE + VALID_ATTENDANCE_DANNY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String TAG_DESC_ADDED \u003d \" \" + PREFIX_TAG + VALID_TAG_ADDED;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String PAYMENT_DESC_AMY \u003d \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_PAYMENT + VALID_PAYMENT_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String PAYMENT_DESC_BOB \u003d \" \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_PAYMENT + VALID_PAYMENT_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final String PAYMENT_DESC_DANNY \u003d \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            + PREFIX_PAYMENT + VALID_PAYMENT_DANNY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String TAG_DESC_DIET_AMY \u003d \" \" + PREFIX_TAG + VALID_TAG_DIET_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String TAG_DESC_DIET_BOB \u003d \" \" + PREFIX_TAG + VALID_TAG_DIET_BOB;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    // and not gmail account"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String INVALID_PAYMENT_DESC \u003d \" \" + PREFIX_PAYMENT + \"$PAID\"; // \u0027$\u0027 not allowed in payment"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String INVALID_ATTENDANCE_DESC \u003d \" \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + PREFIX_ATTENDANCE; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_DANNY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAttendance(VALID_ATTENDANCE_AMY)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withTags(VALID_TAG_DIET_AMY).withPayment(VALID_PAYMENT_AMY).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAttendance(VALID_ATTENDANCE_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withTags(VALID_TAG_DIET_BOB).withPayment(VALID_PAYMENT_BOB).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        DESC_DANNY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_DANNY)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                .withPhone(VALID_PHONE_DANNY).withEmail(VALID_EMAIL_DANNY).withAttendance(VALID_ATTENDANCE_DANNY)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).withPayment(VALID_PAYMENT_DANNY).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertEquals(0, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 22,
      "SarahTaaherBonna": 27,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        //showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        //showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        //showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        //undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        //redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 6,
      "-": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DIET_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withTags(VALID_TAG_DIET_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_DIET_BOB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        //showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        //showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        //showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 9,
      "-": 240
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PAYMENT_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // different payment -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPayment(VALID_PAYMENT_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // different attendance -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAttendance(VALID_ATTENDANCE_BOB).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(\"VEGETARIAN\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 10,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"n/Kurz n/Elle n/Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 1,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemoveTagCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "//@@author aaryamNUS"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * {@code RemoveTagCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "public class RemoveTagCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private Set\u003cTag\u003e tagsToRemove \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(\"NORMAL\"), new Tag(\"VIP\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private Set\u003cTag\u003e noCommonTags \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(\"Unused\"), new Tag(\"Invalid\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void execute_validSetOfTags_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        RemoveTagCommand removeTagCommand \u003d new RemoveTagCommand(tagsToRemove);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveTagCommand.MESSAGE_REMOVED_TAG_SUCCESS, 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        for (Tag eachTagsToDelete: tagsToRemove) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            expectedModel.deleteTag(eachTagsToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandSuccess(removeTagCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void execute_noPersonWithTags_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        RemoveTagCommand removeTagCommand \u003d new RemoveTagCommand(noCommonTags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        String expectedMessage \u003d RemoveTagCommand.MESSAGE_NO_PERSON_WITH_TAG;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandFailure(removeTagCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * 1. Deletes a set of tags from all persons in the filtered list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the set of tags of the all previous peerons in the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * unfiltered list is different from the set of tags at the filtered list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the set of tags object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void executeUndoRedo_validSetOfTags_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        RemoveTagCommand removeTagCommand \u003d new RemoveTagCommand(tagsToRemove);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveTagCommand.MESSAGE_REMOVED_TAG_SUCCESS, 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        for (Tag eachTagsToDelete: tagsToRemove) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            expectedModel.deleteTag(eachTagsToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // removeTag -\u003e set of tags deleted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        removeTagCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // redo -\u003e same tags removed again"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void executeUndoRedo_noPersonsWithTags_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        RemoveTagCommand removeTagCommand \u003d new RemoveTagCommand(noCommonTags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        String expectedMessage \u003d RemoveTagCommand.MESSAGE_NO_PERSON_WITH_TAG;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandFailure(removeTagCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        RemoveTagCommand removeTagFirstCommand \u003d new RemoveTagCommand(noCommonTags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        RemoveTagCommand removeTagSecondCommand \u003d new RemoveTagCommand(tagsToRemove);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertTrue(removeTagFirstCommand.equals(removeTagFirstCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // not same values -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        RemoveTagCommand removeTagFirstCommandCopy \u003d new RemoveTagCommand(noCommonTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(removeTagFirstCommand.equals(removeTagFirstCommandCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(removeTagFirstCommand.equals(new Tag(\"Veg\")));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(removeTagFirstCommand.equals(new Tag(\"Test\")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // different objects -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(removeTagFirstCommand.equals(removeTagSecondCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 112,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        //showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        //showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 2,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/converters/CsvConverterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.logic.converters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.exceptions.PersonDecodingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.exceptions.PersonEncodingException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.AdaptedPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.SupportedFileFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.csv.CsvAdaptedPerson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": "public class CsvConverterTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String VALID_NAME \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String VALID_PHONE \u003d \"11111111\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String VALID_EMAIL \u003d \"amy@gmail.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String VALID_PAYMENT \u003d \"PAID\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String VALID_ATTENDANCE \u003d \"PRESENT\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String VALID_TAG_ADDED \u003d \"added\"; //used to test whether a tag has been added to a person"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String VALID_TAG_UNUSED \u003d \"unused\"; //do not use this tag when creating a person"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String VALID_TAG_DIET \u003d \"NORMAL\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String INVALID_NAME \u003d \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String INVALID_PHONE \u003d \"911a\"; // \u0027a\u0027 not allowed in phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String INVALID_EMAIL \u003d \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String INVALID_TAG_QUOTATIONS \u003d \"\\\"vegetarian\"; // \u0027\"\u0027 not allowed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String INVALID_TAG_SPACES \u003d \"\\\"No shrimp\"; // spaces are not allowed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String VALID_CSV \u003d VALID_NAME + \",\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_PHONE + \",\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_EMAIL + \",\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_PAYMENT + \",\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_ATTENDANCE + \",\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_TAG_FRIEND + \",\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_TAG_DIET;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String INVALID_NAME_CSV \u003d INVALID_NAME + \",\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_PHONE + \",\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_EMAIL + \",\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_PAYMENT + \",\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_ATTENDANCE + \",\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_TAG_FRIEND + \",\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_TAG_DIET;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String INVALID_PHONE_CSV \u003d VALID_NAME + \",\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + INVALID_PHONE + \",\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_EMAIL + \",\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_PAYMENT + \",\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_ATTENDANCE + \",\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_TAG_FRIEND + \",\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_TAG_DIET;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String INVALID_EMAIL_CSV \u003d VALID_NAME + \",\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_PHONE + \",\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + INVALID_EMAIL + \",\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_PAYMENT + \",\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_ATTENDANCE + \",\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_TAG_FRIEND + \",\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_TAG_DIET;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String INVALID_TAGS_CSV \u003d VALID_NAME + \",\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_PHONE + \",\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_EMAIL + \",\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_PAYMENT + \",\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_ATTENDANCE + \",\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_TAG_FRIEND + \",\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + INVALID_TAG_SPACES + \",\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + INVALID_TAG_QUOTATIONS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String INSUFFICIENT_FIELDS_CSV \u003d VALID_NAME + \",\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + VALID_PHONE + \",\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wm28"
        },
        "content": "            + INVALID_PHONE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void decodePerson_validAdaptedPerson_decodeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wm28"
        },
        "content": "        PersonBuilder personBuilder \u003d new PersonBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wm28"
        },
        "content": "        personBuilder.withName(VALID_NAME)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .withPhone(VALID_PHONE)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .withEmail(VALID_EMAIL)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .withAttendance(VALID_ATTENDANCE)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .withPayment(VALID_PAYMENT)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_DIET);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wm28"
        },
        "content": "        Person validPerson \u003d personBuilder.build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wm28"
        },
        "content": "        CsvConverter csvConverter \u003d new CsvConverter();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wm28"
        },
        "content": "        AdaptedPerson validAdaptedPerson \u003d new CsvAdaptedPerson(VALID_CSV);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wm28"
        },
        "content": "        Person decodedPerson \u003d csvConverter.decodePerson(validAdaptedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wm28"
        },
        "content": "        assertTrue(decodedPerson.equals(validPerson));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void decodePerson_invalidPersonName_throwsPersonDecodingException() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wm28"
        },
        "content": "        CsvConverter csvConverter \u003d new CsvConverter();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wm28"
        },
        "content": "        AdaptedPerson invalidNameAdaptedPerson \u003d new CsvAdaptedPerson(INVALID_NAME_CSV);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wm28"
        },
        "content": "        thrown.expect(PersonDecodingException.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wm28"
        },
        "content": "        thrown.expectMessage(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wm28"
        },
        "content": "        csvConverter.decodePerson(invalidNameAdaptedPerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void decodePerson_invalidPhoneNumber_throwsPersonDecodingException() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wm28"
        },
        "content": "        CsvConverter csvConverter \u003d new CsvConverter();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wm28"
        },
        "content": "        AdaptedPerson invalidPhoneAdaptedPerson \u003d new CsvAdaptedPerson(INVALID_PHONE_CSV);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wm28"
        },
        "content": "        thrown.expect(PersonDecodingException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wm28"
        },
        "content": "        thrown.expectMessage(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wm28"
        },
        "content": "        csvConverter.decodePerson(invalidPhoneAdaptedPerson);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void decodePerson_invalidEmail_throwsPersonDecodingException() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wm28"
        },
        "content": "        CsvConverter csvConverter \u003d new CsvConverter();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wm28"
        },
        "content": "        AdaptedPerson invalidEmailAdaptedPerson \u003d new CsvAdaptedPerson(INVALID_EMAIL_CSV);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wm28"
        },
        "content": "        thrown.expect(PersonDecodingException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wm28"
        },
        "content": "        thrown.expectMessage(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wm28"
        },
        "content": "        csvConverter.decodePerson(invalidEmailAdaptedPerson);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void decodePerson_invalidTags_throwsPersonDecodingException() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wm28"
        },
        "content": "        CsvConverter csvConverter \u003d new CsvConverter();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wm28"
        },
        "content": "        AdaptedPerson invalidTagsAdaptedPerson \u003d new CsvAdaptedPerson(INVALID_TAGS_CSV);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wm28"
        },
        "content": "        thrown.expect(PersonDecodingException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wm28"
        },
        "content": "        thrown.expectMessage(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wm28"
        },
        "content": "        csvConverter.decodePerson(invalidTagsAdaptedPerson);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void decodePerson_insufficientCsvData_throwsPersonDecodingException() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wm28"
        },
        "content": "        CsvConverter csvConverter \u003d new CsvConverter();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wm28"
        },
        "content": "        AdaptedPerson insufficientFieldsAdaptedPerson \u003d new CsvAdaptedPerson(INSUFFICIENT_FIELDS_CSV);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wm28"
        },
        "content": "        thrown.expect(PersonDecodingException.class);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wm28"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wm28"
        },
        "content": "        csvConverter.decodePerson(insufficientFieldsAdaptedPerson);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void encodePerson_validPerson_encodeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wm28"
        },
        "content": "        PersonBuilder personBuilder \u003d new PersonBuilder();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wm28"
        },
        "content": "        personBuilder.withName(VALID_NAME)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .withPhone(VALID_PHONE)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .withEmail(VALID_EMAIL)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .withAttendance(VALID_ATTENDANCE)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .withPayment(VALID_PAYMENT)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wm28"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_DIET);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wm28"
        },
        "content": "        Person validPerson \u003d personBuilder.build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wm28"
        },
        "content": "        CsvConverter csvConverter \u003d new CsvConverter();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wm28"
        },
        "content": "        AdaptedPerson validAdaptedPerson \u003d csvConverter.encodePerson(validPerson);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wm28"
        },
        "content": "        assertTrue(VALID_CSV.equals(validAdaptedPerson.getFormattedString()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void encodePerson_nullPerson_throwsPersonEncodingException() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wm28"
        },
        "content": "        CsvConverter csvConverter \u003d new CsvConverter();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wm28"
        },
        "content": "        thrown.expect(PersonEncodingException.class);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wm28"
        },
        "content": "        csvConverter.encodePerson(null);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void getSupportedFileFormat_correctFileFormat_returnsFileFormat() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wm28"
        },
        "content": "        CsvConverter csvConverter \u003d new CsvConverter();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wm28"
        },
        "content": "        assertTrue(csvConverter.getSupportedFileFormat().equals(SupportedFileFormat.CSV));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wm28": 183
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/converters/fileformats/csv/CsvFileTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wm28"
        },
        "content": "package seedu.address.logic.converters.fileformats.csv;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wm28"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wm28"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wm28"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wm28"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wm28"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wm28"
        },
        "content": "import seedu.address.logic.converters.fileformats.SupportedFileFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wm28"
        },
        "content": "public class CsvFileTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String VALID_CSV_FILE \u003d \"src\\\\test\\\\data\\\\data\\\\CsvTest\\\\typicalPersonsGuestList.csv\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String VALID_PERSON_ONE_CSV_FILE \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wm28"
        },
        "content": "            \"Alma Andrade,80000867,80000867@gmail.com,PAID,ABSENT,halal\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String VALID_PERSON_TWO_CSV_FILE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wm28"
        },
        "content": "            \"Eamon Webster,80000030,80000030@gmail.com,PAID,ABSENT,vegetarian\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String VALID_PERSON_THREE_CSV_FILE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wm28"
        },
        "content": "            \"Edan Morse,80000200,80000200@gmail.com,PAID,ABSENT,vegan\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String VALID_PERSON_FOUR_CSV_FILE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wm28"
        },
        "content": "            \"ElsieMae Vasquez,80000044,80000044@gmail.com,PAID,ABSENT\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public static final String NON_EXISTENT_CSV_FILE \u003d \"src\\\\test\\\\data\\\\data\\\\CsvTest\\\\nonExistentGuestList.csv\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void constructor_nullFilename_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wm28"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wm28"
        },
        "content": "        new CsvFile(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void getSupportedFileFormat_correctFileFormat_returnsFileFormat() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wm28"
        },
        "content": "        CsvFile csvFile \u003d new CsvFile(VALID_CSV_FILE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wm28"
        },
        "content": "        assertTrue(csvFile.getSupportedFileFormat().equals(SupportedFileFormat.CSV));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void readAdaptedPersons_validCsvFile_readSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wm28"
        },
        "content": "        List\u003cAdaptedPerson\u003e expectedAdaptedPeople \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wm28"
        },
        "content": "        expectedAdaptedPeople.add(new CsvAdaptedPerson(VALID_PERSON_ONE_CSV_FILE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wm28"
        },
        "content": "        expectedAdaptedPeople.add(new CsvAdaptedPerson(VALID_PERSON_TWO_CSV_FILE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wm28"
        },
        "content": "        expectedAdaptedPeople.add(new CsvAdaptedPerson(VALID_PERSON_THREE_CSV_FILE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wm28"
        },
        "content": "        expectedAdaptedPeople.add(new CsvAdaptedPerson(VALID_PERSON_FOUR_CSV_FILE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wm28"
        },
        "content": "        CsvFile csvFile \u003d new CsvFile(VALID_CSV_FILE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wm28"
        },
        "content": "        List\u003cAdaptedPerson\u003e adaptedPeople \u003d csvFile.readAdaptedPersons();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wm28"
        },
        "content": "        assertTrue(adaptedPeople.containsAll(expectedAdaptedPeople));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wm28"
        },
        "content": "        assertTrue(expectedAdaptedPeople.containsAll(adaptedPeople));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void readAdaptedPersons_nonExistentCsvFile_readSuccessful() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wm28"
        },
        "content": "        CsvFile csvFile \u003d new CsvFile(NON_EXISTENT_CSV_FILE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wm28"
        },
        "content": "        thrown.expect(IOException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wm28"
        },
        "content": "        csvFile.readAdaptedPersons();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wm28"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wm28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wm28"
        },
        "content": "    public void writeAdaptedPersons_validCsvFile_writeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wm28"
        },
        "content": "        //To be implemented"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wm28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wm28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 2,
      "wm28": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ATTENDANCE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ATTENDANCE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PAYMENT_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PAYMENT_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PAYMENT_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DIET_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PAYMENT_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DIET_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "               + PAYMENT_DESC_BOB + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "               + PAYMENT_DESC_BOB + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + PAYMENT_DESC_BOB + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + PAYMENT_DESC_BOB + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // multiple attendance - last attendance accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ATTENDANCE_DESC_AMY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_BOB + PAYMENT_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_DIET_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + PAYMENT_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        + PAYMENT_DESC_AMY + ATTENDANCE_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + PAYMENT_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        + ATTENDANCE_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + PAYMENT_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        + ATTENDANCE_DESC_BOB,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + PAYMENT_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        + ATTENDANCE_DESC_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // missing payment prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_PAYMENT_BOB"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        + ATTENDANCE_DESC_BOB,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // missing attendance prefix"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + PAYMENT_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        + VALID_ATTENDANCE_BOB,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_PAYMENT_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        + VALID_ATTENDANCE_BOB,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + PAYMENT_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + PAYMENT_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + TAG_DESC_DIET_BOB, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + PAYMENT_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + TAG_DESC_DIET_BOB, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // invalid payment"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_PAYMENT_DESC"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + TAG_DESC_DIET_BOB, Payment.MESSAGE_PAYMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // invalid attendance"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + PAYMENT_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + INVALID_ATTENDANCE_DESC"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + TAG_DESC_DIET_BOB, Attendance.MESSAGE_ATTENDANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + PAYMENT_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + PAYMENT_DESC_BOB"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + INVALID_ATTENDANCE_DESC,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 65,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddTagCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "//@@author aaryamNUS"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * AddTagCommandParserTest checks for various user input situations, such as tags without"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * any prefix, tags with only the prefix, and if no input is presented"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "public class AddTagCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private AddTagCommandParser parser \u003d new AddTagCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void parse_noPrefixSpecifiedForAllTags_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertParseFailure(parser, \"Veg Gold VIP\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void parse_onlyPrefixSpecified_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertParseFailure(parser, \"t\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertParseFailure(parser, \"    \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.commands.RemoveTagCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void parseCommand_removeTag() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        RemoveTagCommand command \u003d (RemoveTagCommand) parser.parseCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                RemoveTagCommand.COMMAND_WORD + \" \" + PREFIX_TAG + \"Veg \" + PREFIX_TAG + \"Silver\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertNotEquals(new RemoveTagCommand(new HashSet\u003c\u003e(Arrays.asList(new Tag(\"Veg\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                new Tag(\"Silver\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ))), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void parseCommand_addTag() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddTagCommand command \u003d (AddTagCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                AddTagCommand.COMMAND_WORD + \" \" + PREFIX_TAG + \"Veg \" + PREFIX_TAG + \"Silver\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertNotEquals(new AddTagCommand(new HashSet\u003c\u003e(Arrays.asList(new Tag(\"Veg\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                new Tag(\"Silver\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ))), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"n/foo\", \"n/bar\", \"n/baz\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 20,
      "SarahTaaherBonna": 1,
      "-": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ATTENDANCE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ATTENDANCE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PAYMENT_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PAYMENT_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PAYMENT_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DIET_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DIET_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PAYMENT_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PAYMENT_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DIET_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DIET_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PAYMENT_DESC, Payment.MESSAGE_PAYMENT_CONSTRAINTS); // invalid payment"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ATTENDANCE_DESC,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                Attendance.MESSAGE_ATTENDANCE_CONSTRAINTS); // invalid ATTENDANCE"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_DIET_BOB + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_DIET_BOB + TAG_EMPTY"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + TAG_DESC_DIET_BOB, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_DIET_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + TAG_DESC_DIET_BOB, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // multiple invalid values,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // but only the first invalid value is captured"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        + INVALID_NAME_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        + VALID_PAYMENT_AMY"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        + VALID_ATTENDANCE_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + EMAIL_DESC_BOB + PAYMENT_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withPayment(VALID_PAYMENT_BOB)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withAttendance(VALID_ATTENDANCE_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withTags(VALID_TAG_DIET_BOB).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "content": "        //@@author Sarah"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // payment"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PAYMENT_DESC_AMY;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPayment(VALID_PAYMENT_AMY).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // attendance"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAttendance(VALID_ATTENDANCE_AMY).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "content": "        //@@author SE-EDU"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_DIET_AMY;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_DIET_AMY).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + EMAIL_DESC_AMY + PAYMENT_DESC_AMY + ATTENDANCE_DESC_AMY"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + TAG_DESC_DIET_AMY"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + EMAIL_DESC_BOB + PAYMENT_DESC_BOB"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + TAG_DESC_DIET_BOB + ATTENDANCE_DESC_BOB;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withPayment(VALID_PAYMENT_BOB)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withAttendance(VALID_ATTENDANCE_BOB)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withTags(VALID_TAG_DIET_BOB)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ATTENDANCE_DESC_BOB"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + PHONE_DESC_BOB + PAYMENT_DESC_BOB + TAG_DESC_DIET_BOB;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withPayment(VALID_PAYMENT_BOB).withAttendance(VALID_ATTENDANCE_BOB)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withTags(VALID_TAG_DIET_BOB).build();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "SarahTaaherBonna": 64,
      "-": 180
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"n/Alice\", \"n/Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseSuccess(parser, \"n/Alice n/Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertParseSuccess(parser, \" \\n n/Alice \\n \\t n/Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 3,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String INVALID_ATTENDANCE \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String VALID_ATTENDANCE \u003d \"PRESENT\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@gmail.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"VEGAN\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"GUEST\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void parseAttendance_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAttendance((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void parseAttendance_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAttendance(INVALID_ATTENDANCE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void parseAttendance_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Attendance expectedAttendance \u003d new Attendance(VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertEquals(expectedAttendance, ParserUtil.parseAttendance(VALID_ATTENDANCE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void parseAttendance_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String attendanceWithWhitespace \u003d WHITESPACE + VALID_ATTENDANCE + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Attendance expectedAttendance \u003d new Attendance(VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertEquals(expectedAttendance, ParserUtil.parseAttendance(attendanceWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 17,
      "-": 191
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemoveTagCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.logic.commands.RemoveTagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "//@@author aaryamNUS"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * RemoveTagCommandParserTest checks for various user input situations, such as tags without"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " * any prefix, tags with only the prefix, and if no input is presented"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "public class RemoveTagCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private RemoveTagCommandParser parser \u003d new RemoveTagCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertParseFailure(parser, \"    \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                RemoveTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void parse_noPrefixSpecifiedForAllTags_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertParseFailure(parser, \"Silver GuestSpeaker\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                RemoveTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void parse_onlyPrefixSpecified_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertParseFailure(parser, \"t\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                RemoveTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DIET_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DIET_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANNY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private final AddressBook addressBookWithBobAndAmy \u003d new AddressBookBuilder().withPerson(BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            .withPerson(AMY).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private final AddressBook addressBookWithDanny \u003d new AddressBookBuilder().withPerson(DANNY).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAttendance(VALID_ATTENDANCE_BOB).withTags(VALID_TAG_DIET_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAttendance(VALID_ATTENDANCE_BOB).withTags(VALID_TAG_DIET_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    //@@author aaryamNUS"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code snippet was inspired from the PR \"Model: Add deleteTag(Tag)\" by @yamgent"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void removeTag_nonExistentTag_addressBookUnchanged() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_UNUSED));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void removeTag_sharedTagOfDifferentPersons_tagRemoved() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_FRIEND));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_FRIEND));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags(VALID_TAG_DIET_AMY).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_DIET_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                .withPerson(amyWithoutFriendTag).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void addTag_noNewTagsToAdd_addressBookUnchanged() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        addressBookWithDanny.addTag(new Tag(VALID_TAG_FRIEND));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(DANNY).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(expectedAddressBook, addressBookWithDanny);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void addTag_tagAddedToMultiplePersons_tagAdded() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        addressBookWithBobAndAmy.addTag(new Tag(VALID_TAG_HUSBAND));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Person amyWithHusbandTag \u003d new PersonBuilder(AMY).withTags(VALID_TAG_DIET_AMY, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Person bobWithHusbandTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_DIET_BOB, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithHusbandTag)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                .withPerson(amyWithHusbandTag).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    //@@author aaryamNUS"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        private final Event eventDetails \u003d new Event();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons, Event event) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            this.eventDetails.setEvent(event);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        public Event getEventDetails() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return eventDetails;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 87,
      "SarahTaaherBonna": 3,
      "-": 90,
      "SandhyaGopakumar": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DIET_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DIET_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    //@@author aaryamNUS"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void deleteTag_nonExistentTag_modelUnchanged() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(new ModelManager(addressBook, userPrefs), modelManager);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void deleteTag_tagUsedByMultiplePersons_tagRemovedFromAll() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags(VALID_TAG_DIET_AMY).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_DIET_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        expectedModelManager.updatePerson(AMY, amyWithoutFriendTag);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        expectedModelManager.updatePerson(BOB, bobWithoutFriendTag);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void addTag_addingExistentTag_modelUnchanged() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        modelManager.addTag(new Tag(VALID_TAG_DIET_AMY));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(new ModelManager(addressBook, userPrefs), modelManager);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void addTag_tagAddedToMultiplePersons_tagAddedToAll() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        modelManager.addTag(new Tag(VALID_TAG_HUSBAND));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Person amyWithHusbandTag \u003d new PersonBuilder(AMY).withTags(VALID_TAG_DIET_AMY, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        Person bobWithHusbandTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_DIET_BOB, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        expectedModelManager.updatePerson(AMY, amyWithHusbandTag);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        expectedModelManager.updatePerson(BOB, bobWithHusbandTag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    //@@author aaryamNUS"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 102,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AttendanceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "content": "//@@author Sarah"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class AttendanceTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Attendance(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void constructor_invalidAttendance_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String invalidAttendance \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Attendance(invalidAttendance));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void isValidAttendance() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Attendance.isValidAttendance(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // invalid Attendance"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertFalse(Attendance.isValidAttendance(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertFalse(Attendance.isValidAttendance(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // valid Attendance"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertTrue(Attendance.isValidAttendance(\"PRESENT\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertTrue(Attendance.isValidAttendance(\"ABSENT\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "SarahTaaherBonna": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@gmail.com\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@gmail.com\")); // minimal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@gmail.com\")); // alphabets only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@gmail.com\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@gmail.com\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@gmail.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@gmail.com\")); // long domain name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@gmail.com\")); // long local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 8,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                Collections.singletonList(\"n/Alice\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"n/Alice\", \"n/Bob\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"n/Bob\", \"n/Carol\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"n/aLIce\", \"n/bOB\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"n/Carol\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // Keywords match phone, email and attendance, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@gmail.com\", \"PRESENT\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withEmail(\"alice@gmail.com\").withPayment(\"PENDING\").withAttendance(\"PRESENT\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 9,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PaymentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "content": "//@@author Sarah"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class PaymentTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Attendance(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void constructor_invalidPayment_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String invalidPayment \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Payment(invalidPayment));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void isValidPayment() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Payment.isValidPayment(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // invalid Payment"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertFalse(Payment.isValidPayment(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertFalse(Payment.isValidPayment(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // valid Payment"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertTrue(Payment.isValidPayment(\"PAID\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertTrue(Payment.isValidPayment(\"NOT PAID\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertTrue(Payment.isValidPayment(\"PENDING\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "SarahTaaherBonna": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PAYMENT_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DIET_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // different payment -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPayment(VALID_PAYMENT_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withPayment(VALID_PAYMENT_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withAttendance(VALID_ATTENDANCE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withTags(VALID_TAG_DIET_BOB).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withPayment(VALID_PAYMENT_BOB).withAttendance(VALID_ATTENDANCE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withTags(VALID_TAG_DIET_BOB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPayment(VALID_PAYMENT_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withAttendance(VALID_ATTENDANCE_BOB).withTags(VALID_TAG_DIET_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // different payment -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPayment(VALID_PAYMENT_BOB).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        // different attendance -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAttendance(VALID_ATTENDANCE_BOB).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_DIET_BOB).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 23,
      "-": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PAYMENT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DIET_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.contains(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPayment(VALID_PAYMENT_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withAttendance(VALID_ATTENDANCE_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .withTags(VALID_TAG_DIET_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(null, ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAttendance(VALID_ATTENDANCE_BOB).withTags(VALID_TAG_DIET_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(null);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((UniquePersonList) null);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((List\u003cPerson\u003e) null);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 7,
      "-": 181
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String INVALID_ATTENDANCE \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String INVALID_PAYMENT \u003d \"$PAID\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#Vegetarian\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String VALID_PAYMENT \u003d BENSON.getPayment().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final String VALID_ATTENDANCE \u003d BENSON.getAttendance().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_PAYMENT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        VALID_ATTENDANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_PAYMENT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                VALID_ATTENDANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_PAYMENT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        VALID_ATTENDANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_PAYMENT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                VALID_ATTENDANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_PAYMENT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        VALID_ATTENDANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_PAYMENT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                VALID_ATTENDANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void toModelType_invalidPayment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_PAYMENT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        VALID_ATTENDANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String expectedMessage \u003d Payment.MESSAGE_PAYMENT_CONSTRAINTS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void toModelType_nullPayment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                VALID_ATTENDANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Payment.class.getSimpleName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void toModelType_invalidAttendance_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_PAYMENT,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        INVALID_ATTENDANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String expectedMessage \u003d Attendance.MESSAGE_ATTENDANCE_CONSTRAINTS;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void toModelType_nullAttendance_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_PAYMENT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                null, VALID_TAGS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Attendance.class.getSimpleName());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_PAYMENT,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        VALID_ATTENDANCE, invalidTags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 42,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            \"data\", \"data/XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.xml\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 2,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        descriptor.setPayment(person.getPayment());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        descriptor.setAttendance(person.getAttendance());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "content": "    //@@author Sarah"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Sets the {@code Payment} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public EditPersonDescriptorBuilder withPayment(String payment) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        descriptor.setPayment(new Payment(payment));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Sets the {@code Attendance} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public EditPersonDescriptorBuilder withAttendance(String attendance) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        descriptor.setAttendance(new Attendance(attendance));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "content": "    //@@author SE-EDU"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "SarahTaaherBonna": 11,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventStartTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.event.EventVenue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Conference\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"24/10/2018\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String DEFAULT_VENUE \u003d \"SRC 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public static final String DEFAULT_STARTTIME \u003d \"10:00 AM\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private EventName eventName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private EventDate eventDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private EventVenue eventVenue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private EventStartTime eventStartTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    private Set\u003cTag\u003e eventTags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        eventName \u003d new EventName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        eventDate \u003d new EventDate(DEFAULT_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        eventVenue \u003d new EventVenue(DEFAULT_VENUE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        eventStartTime \u003d new EventStartTime(DEFAULT_STARTTIME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        eventTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code eventToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public EventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        eventName \u003d new EventName(eventToCopy.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        eventDate \u003d new EventDate(eventToCopy.getDate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        eventVenue \u003d new EventVenue(eventToCopy.getVenue());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        eventStartTime \u003d new EventStartTime(eventToCopy.getStartTime());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        eventTags \u003d new HashSet\u003c\u003e(eventToCopy.getEventTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Sets the {@code EventName} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public EventBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventName \u003d new EventName(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Sets the {@code EventDate} of the {@code Event} that we are building"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public EventBuilder withDate(String date) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventDate \u003d new EventDate(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Sets the {@code EventVenue} of the {@code Event} that we are building"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public EventBuilder withVenue(String venue) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventVenue \u003d new EventVenue(venue);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Sets the {@code EventStartTime} of the {@code Event} that we are building"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public EventBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventStartTime \u003d new EventStartTime(startTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Event} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public EventBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        this.eventTags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "        return new Event(eventName, eventDate, eventVenue, eventStartTime, eventTags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SandhyaGopakumar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SandhyaGopakumar": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Blah\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85455255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"aliceblah@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String DEFAULT_PAYMENT \u003d \"PAID\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String DEFAULT_ATTENDANCE \u003d \"ABSENT\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private Payment payment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private Attendance attendance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        payment \u003d new Payment(DEFAULT_PAYMENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        attendance \u003d new Attendance(DEFAULT_ATTENDANCE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        payment \u003d personToCopy.getPayment();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        attendance \u003d personToCopy.getAttendance();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Sets the {@code Attendance} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public PersonBuilder withAttendance(String attendance) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.attendance \u003d new Attendance(attendance);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Sets the {@code Payment} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public PersonBuilder withPayment(String payment) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.payment \u003d new Payment(payment);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new Person(name, phone, email, payment, attendance, tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 24,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        sb.append(PREFIX_PAYMENT + person.getPayment().paymentValue + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        sb.append(PREFIX_ATTENDANCE + person.getAttendance().attendanceValue + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        descriptor.getPayment().ifPresent(payment -\u003e sb.append(PREFIX_PAYMENT)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .append(payment.paymentValue).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        descriptor.getAttendance().ifPresent(attendance -\u003e sb.append(PREFIX_ATTENDANCE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .append(attendance.attendanceValue).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 9,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_DANNY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_DANNY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DANNY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PAYMENT_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PAYMENT_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PAYMENT_DANNY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_DANNY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DIET_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DIET_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withAttendance(\"PRESENT\").withEmail(\"alice@gmail.com\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withPayment(\"PENDING\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withTags(\"VEGETARIAN\", \"NoNuts\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withAttendance(\"ABSENT\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withEmail(\"johnd@gmail.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withPayment(\"PAID\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withTags(\"NORMAL\", \"NoSeafood\", \"GUEST\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withEmail(\"heinz@gmail.com\").withAttendance(\"PRESENT\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withPayment(\"NOT PAID\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withEmail(\"cornelia@gmail.com\").withPayment(\"PAID\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withAttendance(\"ABSENT\").withTags(\"NORMAL\", \"VIP\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withEmail(\"werner@gmail.com\").withAttendance(\"PRESENT\").withPayment(\"NOT PAID\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withEmail(\"lydia@gmail.com\").withAttendance(\"ABSENT\").withPayment(\"PAID\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withEmail(\"anna@gmail.com\").withAttendance(\"PRESENT\").withPayment(\"PENDING\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withEmail(\"stefan@gmail.com\").withAttendance(\"PRESENT\").withPayment(\"NOT PAID\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withEmail(\"hans@gmail.com\").withAttendance(\"ABSENT\").withPayment(\"PENDING\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAttendance(VALID_ATTENDANCE_AMY).withTags(VALID_TAG_DIET_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withPayment(VALID_PAYMENT_AMY).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAttendance(VALID_ATTENDANCE_BOB).withTags(VALID_TAG_DIET_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            .withPayment(VALID_PAYMENT_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public static final Person DANNY \u003d new PersonBuilder().withName(VALID_NAME_DANNY).withPhone(VALID_PHONE_DANNY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            .withEmail(VALID_EMAIL_DANNY).withAttendance(VALID_ATTENDANCE_DANNY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            .withPayment(VALID_PAYMENT_DANNY).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 10,
      "SarahTaaherBonna": 25,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *      - {@code NewResultAvailableEvent} is posted"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isCorrectCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        eventsCollectorRule.eventsCollector.reset();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *      - {@code NewResultAvailableEvent} is posted"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertTrue(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isCorrectCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        eventsCollectorRule.eventsCollector.reset();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 20,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getPersonList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@gmail.com\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            builder.append(\"\u003cpayment\u003ePAID\u003c/payment\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            builder.append(\"\u003cattendance\u003eABSENT\u003c/attendance\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyPersons.xml\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 3,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_SUCCESS_EVENT_STUB \u003d new NewResultAvailableEvent("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            \"success\", true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_FAILURE_EVENT_STUB \u003d new NewResultAvailableEvent("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            \"failure\", true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private List\u003cString\u003e defaultStyleWhenCorrect;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private List\u003cString\u003e errorStyleWhenFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        defaultStyleWhenCorrect \u003d new ArrayList\u003c\u003e(resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        errorStyleWhenFailure \u003d new ArrayList\u003c\u003e(defaultStyleWhenCorrect);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        errorStyleWhenFailure.add(ResultDisplay.ERROR_IN_COMMAND);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(defaultStyleWhenCorrect, resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertResultDisplay(NEW_RESULT_SUCCESS_EVENT_STUB);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertResultDisplay(NEW_RESULT_FAILURE_EVENT_STUB);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Posts the {@code event} to the {@code EventsCenter}, then verifies the \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *     - the text on the result display matches the {@code event}\u0027s message \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *     - the result display\u0027s style is the same as {@code defaultStyleOfResultDisplay} if event is successful,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *     {@code errorStyleOfResultDisplay} otherwise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private void assertResultDisplay(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        postNow(event);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        List\u003cString\u003e expectedStyle \u003d event.isCorrectCommand ? defaultStyleWhenCorrect : errorStyleWhenFailure;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(event.message, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(expectedStyle, resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 36,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.TOTAL_PERSONS_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            new AddressBookBuilder().withPerson(ALICE).build());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static final int INITAL_TOTAL_PERSONS \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, INITAL_TOTAL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                String.format(TOTAL_PERSONS_STATUS, INITAL_TOTAL_PERSONS));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                String.format(TOTAL_PERSONS_STATUS, EVENT_STUB.data.getPersonList().size()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}, and the total persons matches that"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * of {@code expectedTotalPersonsStatus}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                                        String expectedTotalPersonsStatus) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(expectedTotalPersonsStatus, statusBarFooterHandle.getTotalPersonsStatus());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 17,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.ui.PersonCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertEquals(expectedCard.getAttendance(), actualCard.getAttendance());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertEquals(expectedCard.getPayment(), actualCard.getPayment());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        expectedCard.getTags().forEach(tag -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertEquals(expectedPerson.getPayment().paymentValue, actualCard.getPayment());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertEquals(expectedPerson.getAttendance().attendanceValue, actualCard.getAttendance());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertTagsEqual(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    //@@author aaryamNUS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * in {@code PersonCard#TAG_COLORS}, using an index generated by the hash code of the tag\u0027s content."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * @see PersonCard#getTagColor(String)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static String getTagColor(String tagName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        switch (tagName) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"vegetarian\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return \"green\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"halal\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return \"orange\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"vegan\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return \"yellow\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"vip\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return \"lightblue\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"bride\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"groom\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return \"red\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"Guest Speaker\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"guest\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return \"white\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"NoNuts\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"NoBeef\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"NoSeafood\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"NoGluten\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        case \"NoShrimp\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return \"purple\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            return \"grey\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "            //throw new AssertionError(tagName + \"does not have a color assigned.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * correct color."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream().map(tag -\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                tag.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(expectedTags, actualCard.getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        expectedTags.forEach(tag -\u003e assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                getTagColor(tag)), actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 63,
      "SarahTaaherBonna": 4,
      "-": 69
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ATTENDANCE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ATTENDANCE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PAYMENT_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PAYMENT_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PAYMENT_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DIET_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PAYMENT_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + PAYMENT_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_AMY + \"   \" + TAG_DESC_DIET_AMY + \" \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + PAYMENT_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_AMY + TAG_DESC_DIET_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_DIET_AMY + PHONE_DESC_BOB + ATTENDANCE_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                 + EMAIL_DESC_BOB + PAYMENT_DESC_BOB;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        /* Case: add a duplicate person except with different payment -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPayment(VALID_PAYMENT_BOB).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        /* Case: add a duplicate person except with different attendance -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAttendance(VALID_ATTENDANCE_BOB).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + PAYMENT_DESC_AMY"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + PAYMENT_DESC_AMY"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + PAYMENT_DESC_AMY"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        /* Case: missing payment -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        /* Case: missing attendance -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + PAYMENT_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + PAYMENT_DESC_AMY"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_AMY + TAG_DESC_DIET_AMY;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + PAYMENT_DESC_AMY"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_AMY + TAG_DESC_DIET_AMY;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + PAYMENT_DESC_AMY"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_AMY + TAG_DESC_DIET_AMY;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        /* Case: invalid payment -\u003e rejected */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_PAYMENT_DESC"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_AMY + TAG_DESC_DIET_AMY;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertCommandFailure(command, Payment.MESSAGE_PAYMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        /* Case: invalid attendance -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + PAYMENT_DESC_AMY"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + INVALID_ATTENDANCE_DESC + TAG_DESC_DIET_AMY;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertCommandFailure(command, Attendance.MESSAGE_ATTENDANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + PAYMENT_DESC_AMY"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 2,
      "SarahTaaherBonna": 51,
      "-": 221
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.TOTAL_PERSONS_STATUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "import seedu.address.ui.ResultDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private List\u003cString\u003e defaultStyleWhenCorrect;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    private List\u003cString\u003e errorStyleWhenFailure;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        defaultStyleWhenCorrect \u003d mainWindowHandle.getResultDisplay().getStyleClass();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        errorStyleWhenFailure \u003d mainWindowHandle.getResultDisplay().getStyleClass();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        errorStyleWhenFailure.add(ResultDisplay.ERROR_IN_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        statusBarFooterHandle.rememberTotalPersonsStatus();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Asserts that the command box and result display shows the default style."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    protected void assertCommandBoxAndResultDisplayShowsDefaultStyle() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(defaultStyleWhenCorrect, getResultDisplay().getStyleClass());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Asserts that the command box and result display shows the error style."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    protected void assertCommandBoxAndResultDisplayShowsErrorStyle() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(errorStyleWhenFailure, getResultDisplay().getStyleClass());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(handle.isTotalPersonsStatusChanged());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same and"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * the total list remains the same."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(handle.isTotalPersonsStatusChanged());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Asserts that the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, and total persons was changed to match the total"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * number of persons in the address book, while the save location remains the same."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     * Note: This code was adapted from the example implementation provide by @yamgent from SE-EDU"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "    protected void assertStatusBarChangedExceptSaveLocation() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        final int totalPersons \u003d testApp.getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(String.format(TOTAL_PERSONS_STATUS, totalPersons), handle.getTotalPersonsStatus());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertEquals(String.format(TOTAL_PERSONS_STATUS, getModel().getAddressBook().getPersonList().size()),"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "                getStatusBarFooter().getTotalPersonsStatus());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 43,
      "-": 270
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 2,
      "-": 99
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 2,
      "-": 191
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ATTENDANCE_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ATTENDANCE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PAYMENT_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PAYMENT_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DIET_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DIET_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DIET_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "//import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + PAYMENT_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_BOB + \" \" + TAG_DESC_DIET_BOB + \" \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_DIET_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + PAYMENT_DESC_BOB + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + PAYMENT_DESC_BOB + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + PAYMENT_DESC_AMY + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + ATTENDANCE_DESC_AMY + TAG_DESC_DIET_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                        + INVALID_ATTENDANCE_DESC,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                Attendance.MESSAGE_ATTENDANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + PAYMENT_DESC_BOB + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + PAYMENT_DESC_BOB + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + PAYMENT_DESC_BOB + ATTENDANCE_DESC_AMY + TAG_DESC_DIET_BOB;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                + PAYMENT_DESC_BOB + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "               + PAYMENT_DESC_BOB + ATTENDANCE_DESC_BOB + TAG_DESC_DIET_BOB;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 2,
      "SarahTaaherBonna": 27,
      "-": 277
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Benson n/Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel n/Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel n/Benson n/Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel n/Benson n/NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Mei\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Meiers\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Mark\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAttendance().attendanceValue;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 2,
      "SarahTaaherBonna": 10,
      "-": 183
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 1,
      "-": 104
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaryamNUS"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaryamNUS": 2,
      "-": 152
    }
  },
  {
    "path": "wm28.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "# wm28"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\commons\\events\\ui\\PersonPanelSelectionClearedEvent.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Indicates that selection is cleared in the Person List Panel"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class PersonPanelSelectionClearedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\ExportCommand.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Exports currently filtered guest list to a CSV file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports guests to a CSV file. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Parameters: FILE_PATH\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" guestlist.csv\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_EXPORT_CSV_RESULT \u003d \"Successfully exported %1$d/%2$d guests to %3$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_NO_PERSONS \u003d \"There are no persons to export!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private SupportedFile supportedFile;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private PersonConverter personConverter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private int totalPersons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private int successfulExports;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public ExportCommand(SupportedFile supportedFile, PersonConverter personConverter) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assert supportedFile !\u003d null : \"supportedFile cannot be null\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assert personConverter !\u003d null : \"personConverter cannot be null\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assert personConverter.getSupportedFileFormat().equals(supportedFile.getSupportedFileFormat())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                : \"supportedFile and personConverter does not support the same file format\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.personConverter \u003d personConverter;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.supportedFile \u003d supportedFile;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        ObservableList\u003cPerson\u003e filteredList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (filteredList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PERSONS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        totalPersons \u003d filteredList.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        successfulExports \u003d totalPersons;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            List\u003cAdaptedPerson\u003e result \u003d exportPersons(filteredList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            supportedFile.writeAdaptedPersons(result);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new CommandException(ioe.getMessage(), ioe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXPORT_CSV_RESULT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                successfulExports, totalPersons, supportedFile.getFileName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Exports persons to csv-formatted strings"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private List\u003cAdaptedPerson\u003e exportPersons(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        List\u003cAdaptedPerson\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        for (Person person : personList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                result.add(personConverter.encodePerson(person));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            } catch (PersonEncodingException pee) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                successfulExports--;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\ImportCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Imports multiple guests into the guest list of the current event via a CSV file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports guests into current event through a CSV file. \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Parameters: FILE_PATH\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" guestlist.csv\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_IMPORT_CSV_RESULT \u003d \"Successfully imported %1$d of %2$d guests from %3$s\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private SupportedFile supportedFile;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final PersonConverter personConverter;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private int successfulImports;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private int totalImports;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public ImportCommand(SupportedFile supportedFile, PersonConverter personConverter) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assert supportedFile !\u003d null : \"SupportedFile cannot be null\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assert personConverter !\u003d null : \"personConverter cannot be null\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        assert personConverter.getSupportedFileFormat().equals(supportedFile.getSupportedFileFormat())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                : \"supportedFile and personConverter does not support the same file format\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.supportedFile \u003d supportedFile;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.personConverter \u003d personConverter;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            List\u003cAdaptedPerson\u003e persons \u003d supportedFile.readAdaptedPersons();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            successfulImports \u003d persons.size();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            totalImports \u003d successfulImports;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            importPersons(persons, model);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new CommandException(ioe.getMessage(), ioe);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                String.format(MESSAGE_IMPORT_CSV_RESULT, successfulImports, totalImports, supportedFile.getFileName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Imports persons to the guest list"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private void importPersons(List\u003cAdaptedPerson\u003e persons, Model model) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        for (AdaptedPerson person : persons) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                Person toAdd \u003d personConverter.decodePerson(person);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                addPerson(toAdd, model);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            } catch (PersonDecodingException pe) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                successfulImports--;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            } catch (CommandException ce) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                successfulImports--;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Adds a person to the guest list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private void addPerson(Person toAdd, Model model) throws CommandException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\converters\\CsvConverter.java"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Converts a person between the {@code CsvAdaptedPerson} and the {@code Person}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class CsvConverter implements PersonConverter {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private static final Pattern PERSON_CSV_INPUT_FORMAT \u003d Pattern.compile(\"[\\\"|\u0027]?(?\u003cname\u003e[^\\\"\u0027,]*)[\\\"|\u0027]?,\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"[\\\"|\u0027]?(?\u003cphone\u003e[^\\\"\u0027,]*)[\\\"|\u0027]?,\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"[\\\"|\u0027]?(?\u003cemail\u003e[^\\\"\u0027,]*)[\\\"|\u0027]?,\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"[\\\"|\u0027]?(?\u003cpayment\u003e[^\\\"\u0027,]*)[\\\"|\u0027]?,\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"[\\\"|\u0027]?(?\u003cattendance\u003e[^\\\"\u0027,]*)[\\\"|\u0027]?,?\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            + \"(?\u003ctags\u003e.*)\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final SupportedFileFormat supportedFileFormat \u003d SupportedFileFormat.CSV;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Encodes a {@code Person} object to a csv-formatted person, {@code CsvAdaptedPerson}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param person to be encoded"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @return AdaptedPerson which which is an instance of the CsvAdaptedPerson class."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws PersonEncodingException if the person fails to encode"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public AdaptedPerson encodePerson(Person person) throws PersonEncodingException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (person \u003d\u003d null) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new PersonEncodingException(\"Person is null\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        result.append(person.getName() + \",\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        result.append(person.getPhone() + \",\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        result.append(person.getEmail() + \",\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        result.append(person.getPayment() + \",\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        result.append(person.getAttendance() + \",\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        result.append(person.getTags().stream()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .collect(Collectors.joining(\",\")));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new CsvAdaptedPerson(result.toString());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Decodes csv-formatted person,{@code CsvAdaptedPerson}, into a {@code Person} object."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param personInput Csv-formatted person input string"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @return Person based on the csv-formatted input string of the guest"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws PersonDecodingException if the csv input does not conform to the expected format"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public Person decodePerson(AdaptedPerson personInput) throws PersonDecodingException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Matcher matcher \u003d PERSON_CSV_INPUT_FORMAT.matcher(personInput.getFormattedString().trim());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        Person person;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new PersonDecodingException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            Name name \u003d ParserUtil.parseName(matcher.group(\"name\"));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(matcher.group(\"phone\"));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(matcher.group(\"email\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            Payment payment \u003d ParserUtil.parsePayment(matcher.group(\"payment\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            Attendance attendance \u003d ParserUtil.parseAttendance(matcher.group(\"attendance\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d splitTags(matcher.group(\"tags\"));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            person \u003d new Person(name, phone, email, payment, attendance, tagList);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new PersonDecodingException(pe.getMessage(), pe);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public SupportedFileFormat getSupportedFileFormat() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return supportedFileFormat;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Splits and parses the tags into a set of Tags"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param tags String input tags"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @return set of parsed Tags"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws ParseException if the csv input does not conform to the expected format"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private Set\u003cTag\u003e splitTags(String tags) throws ParseException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (tags.trim().isEmpty()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return ParserUtil.parseTags(Arrays.asList(tags.split(\",\")));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\converters\\exceptions\\PersonDecodingException.java"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Represents a decoding error encountered by a PersonConverter."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class PersonDecodingException extends Exception {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public PersonDecodingException(String message) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public PersonDecodingException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\converters\\exceptions\\PersonEncodingException.java"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Represents an encoding error encountered by a PersonConverter."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class PersonEncodingException extends Exception {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public PersonEncodingException(String message) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public PersonEncodingException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\converters\\fileformats\\AdaptedPerson.java"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Represents a Person formatted according to any the supported file formats"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public abstract class AdaptedPerson {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public abstract String getFormattedString();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\converters\\fileformats\\csv\\CsvAdaptedPerson.java"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Represents a Csv-formatted person"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class CsvAdaptedPerson extends AdaptedPerson {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final String csvFormattedPerson;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public CsvAdaptedPerson(String csvFormattedPerson) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.csvFormattedPerson \u003d csvFormattedPerson;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public String getFormattedString() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return csvFormattedPerson;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\converters\\fileformats\\csv\\CsvFile.java"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Represents a csv file that can read and write AdaptedPersons"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class CsvFile implements SupportedFile {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final Path fileName;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private final SupportedFileFormat supportedFileFormat \u003d SupportedFileFormat.CSV;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public CsvFile(String fileName) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        this.fileName \u003d Paths.get(fileName);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Reads data in file and returns csv-formatted person, {@code CsvAdaptedPerson}."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @return A List of AdaptedPerson which has objects of the CsvAdaptedPerson class."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws IOException if file fails to read"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public List\u003cAdaptedPerson\u003e readAdaptedPersons() throws IOException {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (!FileUtil.isFileExists(fileName)) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new FileNotFoundException(String.format(MESSAGE_FILE_NOT_FOUND, fileName.toAbsolutePath()));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String fileContent \u003d FileUtil.readFromFile(fileName);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        List\u003cString\u003e dataLines \u003d Arrays.asList(fileContent.split(\"\\\\r?\\\\n\"));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        List\u003cAdaptedPerson\u003e result \u003d dataLines.stream()"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .filter((dataLine) -\u003e !dataLine.trim().isEmpty())"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .map(line -\u003e new CsvAdaptedPerson(line))"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Write data csv-formatted person, {@code CsvAdaptedPerson}, into the file."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @param adaptedPersons A list of AdaptedPerson, which contains CsvAdaptedPerson."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws IOException if file fails to write."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void writeAdaptedPersons(List\u003cAdaptedPerson\u003e adaptedPersons) throws IOException {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (FileUtil.isFileExists(fileName)) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new FileAlreadyExistsException(String.format(MESSAGE_FILE_ALREADY_EXIST, fileName.toAbsolutePath()));"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        FileUtil.writeToFile(fileName, adaptedPersons.stream()"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .map((adaptedPerson) -\u003e adaptedPerson.getFormattedString())"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                .collect(Collectors.joining(\"\\n\")));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public SupportedFileFormat getSupportedFileFormat() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return supportedFileFormat;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return fileName.getFileName().toString();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\converters\\fileformats\\SupportedFile.java"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Represents a supported file that can read and write AdaptedPersons"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public interface SupportedFile {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Read {@code} AdaptedPerson of all types from file."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    List\u003cAdaptedPerson\u003e readAdaptedPersons() throws IOException;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Write {@code} AdaptedPerson of all types to file"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    void writeAdaptedPersons(List\u003cAdaptedPerson\u003e adaptedPersons) throws IOException;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Returns the file format the PersonConverter supports"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    SupportedFileFormat getSupportedFileFormat();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Returns the file name of the file"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    String getFileName();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\converters\\fileformats\\SupportedFileFormat.java"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Represents a supported file format for the import \u0026 export commands"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public enum SupportedFileFormat {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    CSV;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\converters\\PersonConverter.java"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Represents a Converter that is able to convert between a {@code Person} and an {@code AdaptedPerson}."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public interface PersonConverter {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Encodes {@code Person} into an {@code AdaptedPerson}."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws PersonEncodingException if {@code person} does not conform the expected format"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    AdaptedPerson encodePerson(Person person) throws PersonEncodingException;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Decodes {@code AdaptedPerson} into a {@code Person}."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws PersonDecodingException if {@code person} does not conform the expected format"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    Person decodePerson(AdaptedPerson person) throws PersonDecodingException;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Returns the file format the particular PersonConverter supports"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    SupportedFileFormat getSupportedFileFormat();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\ExportCommandParser.java"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class ExportCommandParser {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public static final String DEFAULT_FILENAME_FORMAT \u003d \"exportedGuestList.csv\";"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Parses the given argument {@code String} in the context of the ExportCommand"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public ExportCommand parse(String arg) throws ParseException {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String trimmedArg \u003d arg.trim();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (trimmedArg.isEmpty()) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            return new ExportCommand(new CsvFile(DEFAULT_FILENAME_FORMAT), new CsvConverter());"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        } else if (!FileUtil.isValidPath(trimmedArg)) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FILE_PATH, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        } else if (!FileUtil.isValidFileExtension(trimmedArg, \"csv\")) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FILE_EXTENSION, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new ExportCommand(new CsvFile(trimmedArg), new CsvConverter());"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\ImportCommandParser.java"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": " */"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Parses the given argument {@code String} in the context of the ImportCommand"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public ImportCommand parse(String arg) throws ParseException {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        String trimmedArg \u003d arg.trim();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        if (trimmedArg.isEmpty()) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        } else if (!FileUtil.isValidPath(trimmedArg)) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FILE_PATH, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        } else if (!FileUtil.isValidFileExtension(trimmedArg, \"csv\")) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FILE_EXTENSION, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        return new ImportCommand(new CsvFile(trimmedArg), new CsvConverter());"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "###### \\java\\seedu\\address\\ui\\PersonDisplay.java"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Removes all tags from the PersonDisplay Ui component"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private void removeTags() {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Fills in details of the selected {@code person} to the PersonDisplay Ui component"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private void fillInPersonDetails(Person person) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        attendance.setText(person.getAttendance().attendanceValue);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        payment.setText(person.getPayment().paymentValue);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        removeTags();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        createTags(person);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Removes details of the previously selected {@code Person} displayed in the PersonDisplay Ui component"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private void removePersonDetails() {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        name.setText(\"\");"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        phone.setText(\"\");"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        attendance.setText(\"\");"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        email.setText(\"\");"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        payment.setText(\"\");"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        removeTags();"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        fillInPersonDetails(event.getNewSelection());"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     * Clears {@code Person} details in PersonDisplay Ui component when selection is cleared in the PersonListPanel"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    public void handlePersonPanelSelectionClearedEvent(PersonPanelSelectionClearedEvent event) {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event,"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "                \"Local data changed, clearing selected guest details \"));"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "        removePersonDetails();"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "}"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "SarahTaaherBonna"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "SarahTaaherBonna": 529
    }
  }
]
